// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Totten.Solution.Ragstore.Infra.Data.Contexts.RagnaStoreContexts;

#nullable disable

namespace Totten.Solution.Ragstore.Infra.Data.Migrations.RagnaStore
{
    [DbContext(typeof(RagnaStoreContext))]
    partial class RagnaStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.AgentAggregation.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer");

                    b.Property<int?>("ServerId1")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("ServerId1");

                    b.ToTable("Agents", (string)null);
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.CallbackAggregation.Callback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CallbackOwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<double>("ItemPrice")
                        .HasColumnType("double precision");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer");

                    b.Property<int?>("ServerId1")
                        .HasColumnType("integer");

                    b.Property<int>("StoreType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCellphone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("ServerId1");

                    b.ToTable("Callbacks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CallbackOwnerId = "d7aeb595-44a5-4f5d-822e-980f35ace12d",
                            CreatedAt = new DateTime(2025, 4, 12, 19, 31, 3, 792, DateTimeKind.Utc).AddTicks(9411),
                            ItemId = 490037,
                            ItemPrice = 500000000.0,
                            Level = 4,
                            Name = "CallbackObscuro",
                            ServerId = 1,
                            StoreType = 2,
                            UpdatedAt = new DateTime(2025, 4, 12, 19, 31, 3, 792, DateTimeKind.Utc).AddTicks(9412),
                            UserCellphone = "+5584988633251"
                        });
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.CallbackAggregation.CallbackSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SendIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Sended")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CallbacksSchedule", (string)null);
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.Servers.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SiteUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Servers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 12, 19, 31, 3, 792, DateTimeKind.Utc).AddTicks(6713),
                            IsActive = false,
                            Name = "broTHOR",
                            SiteUrl = "https://playragnarokonlinebr.com",
                            UpdatedAt = new DateTime(2025, 4, 12, 19, 31, 3, 792, DateTimeKind.Utc).AddTicks(6715)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 12, 19, 31, 3, 792, DateTimeKind.Utc).AddTicks(6718),
                            IsActive = false,
                            Name = "broVALHALLA",
                            SiteUrl = "https://playragnarokonlinebr.com",
                            UpdatedAt = new DateTime(2025, 4, 12, 19, 31, 3, 792, DateTimeKind.Utc).AddTicks(6718)
                        });
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.AgentAggregation.Agent", b =>
                {
                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Servers.Server", null)
                        .WithMany("Agents")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId1");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.CallbackAggregation.Callback", b =>
                {
                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Servers.Server", null)
                        .WithMany("Callbacks")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId1");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.Servers.Server", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("Callbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
