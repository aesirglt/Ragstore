

*** TYPES


** UDTs

class CRenderer {
  /* this+0x0 */ float m_hpc;
  /* this+0x4 */ float m_vpc;
  /* this+0x8 */ float m_hratio;
  /* this+0xc */ float m_vratio;
  /* this+0x10 */ float m_aspectRatio;
  /* this+0x14 */ float m_screenXFactor;
  /* this+0x18 */ float m_screenYFactor;
  /* this+0x1c */ int m_xoffset;
  /* this+0x20 */ int m_yoffset;
  /* this+0x24 */ int m_width;
  /* this+0x28 */ int m_height;
  /* this+0x2c */ int m_halfWidth;
  /* this+0x30 */ int m_halfHeight;
  /* this+0x34 */ int m_curFrame;
  /* this+0x38 */ int m_bRGBBitCount;
  /* this+0x3c */ unsigned long m_fpsFrameCount;
  /* this+0x40 */ unsigned long m_fpsStartTick;
  /* this+0x44 */ int m_isFoggy;
  /* this+0x48 */ int m_fogChanged;
  /* this+0x4c */ int m_isVertexFog;
  /* this+0x50 */ class CTexture * m_oldTexture;
  /* this+0x54 */ class CTexture * m_oldLmapTexture;
  /* this+0x58 */ float m_guardBandLeft;
  /* this+0x5c */ float m_guardBandRight;
  /* this+0x60 */ float m_guardBandTop;
  /* this+0x64 */ float m_guardBandBottom;
  /* this+0x68 */ int m_isShowInfo;
  /* this+0x6c */ struct vector3d m_eyeVector;
  /* this+0x78 */ unsigned long m_nClearColor;
  /* this+0x7c */ struct IDirect3DDevice7 * m_device;
  /* this+0x80 */ struct IDirectDrawSurface7 * m_lpSurface;
  /* this+0x84 */ unsigned long m_dwScreenWidth;
  /* this+0x88 */ unsigned long m_dwScreenHeight;
  /* this+0x8c */ enum PixelFormat m_pf;
  /* this+0x90 */ void * m_lpSurfacePtr;
  /* this+0x94 */ long m_lPitch;
  /* this+0x98 */ class std::vector<RPFace *,std::allocator<RPFace *> > m_rpFaceList;
  /* this+0xa8 */ class std::vector<RPFace *,std::allocator<RPFace *> > m_rpLMGroundList;
  /* this+0xb8 */ class std::vector<RPFace *,std::allocator<RPFace *> > m_rpLMLightList;
  /* this+0xc8 */ class std::vector<std::pair<float,RPFace *>,std::allocator<std::pair<float,RPFace *> > > m_rpAlphaDepthList;
  /* this+0xd8 */ class std::vector<std::pair<float,RPFace *>,std::allocator<std::pair<float,RPFace *> > > m_rpAlphaList;
  /* this+0xe8 */ class std::vector<std::pair<float,RPFace *>,std::allocator<std::pair<float,RPFace *> > > m_rpAlphaNoDepthList;
  /* this+0xf8 */ class std::vector<std::pair<float,RPFace *>,std::allocator<std::pair<float,RPFace *> > > m_rpEmissiveDepthList;
  /* this+0x108 */ class std::vector<std::pair<float,RPFace *>,std::allocator<std::pair<float,RPFace *> > > m_rpEmissiveList;
  /* this+0x118 */ class std::vector<std::pair<float,RPFace *>,std::allocator<std::pair<float,RPFace *> > > m_rpEmissiveNoDepthList;
  /* this+0x128 */ class std::vector<RPRaw *,std::allocator<RPRaw *> > m_rpRawList;
  /* this+0x138 */ class std::vector<RPRaw *,std::allocator<RPRaw *> > m_rpRawAlphaList;
  /* this+0x148 */ class std::vector<RPRaw *,std::allocator<RPRaw *> > m_rpRawEmissiveList;
  /* this+0x158 */ class std::vector<RPFace *,std::allocator<RPFace *> > m_rpAlphaOPList;
  /* this+0x168 */ class std::vector<RPLmFace *,std::allocator<RPLmFace *> > m_rpLmList;
  /* this+0x178 */ class std::vector<RPLmFace *,std::allocator<RPLmFace *> > m_rpBumpFaceList;
  /* this+0x188 */ class std::list<CacheSurface,std::allocator<CacheSurface> >[0x10] m_cacheSurfaces;
  /* this+0x248 */ class std::list<CTexture *,std::allocator<CTexture *> > m_unusedCacheSurfaces;
  /* this+0x254 */ class std::list<RPFace,std::allocator<RPFace> > m_rpNullFaceList;
  /* this+0x260 */ class std::list<RPFace,std::allocator<RPFace> >::iterator m_rpNullFaceListIter;
  /* this+0x264 */ class std::list<RPQuadFace,std::allocator<RPQuadFace> > m_rpQuadFaceList;
  /* this+0x270 */ class std::list<RPQuadFace,std::allocator<RPQuadFace> >::iterator m_rpQuadFaceListIter;
  /* this+0x274 */ class std::list<RPLmQuadFace,std::allocator<RPLmQuadFace> > m_rpLmQuadFaceList;
  /* this+0x280 */ class std::list<RPLmQuadFace,std::allocator<RPLmQuadFace> >::iterator m_rpLmQuadFaceListIter;
  /* this+0x284 */ class std::vector<tlvertex3d,std::allocator<tlvertex3d> > m_vertBuffer;
}

class CTexMgr {
  /* this+0x0 */ class std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> > m_texTable;
  }

class CTexture {
  /* this+0x4 */ unsigned long m_w;
  /* this+0x8 */ unsigned long m_h;
  /* this+0xc */ struct IDirectDrawSurface7 * m_pddsSurface;
  /* this+0x10 */ enum PixelFormat m_pf;
  /* this+0x14 */ unsigned char m_blackkey;
  /* this+0x18 */ unsigned long m_updateWidth;
  /* this+0x1c */ unsigned long m_updateHeight;
  /* this+0x20 */ char[0x100] m_texName;
  /* this+0x120 */ long m_lockCnt;
  /* this+0x124 */ unsigned long m_timeStamp;
    }

struct IDirectDrawSurface7 {
}

class std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> > {
  /* this+0x0 */ class std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> > _Tr;
}

struct HWND__ {
  /* this+0x0 */ int unused;
}

struct _GUID {
  /* this+0x0 */ unsigned long Data1;
  /* this+0x4 */ unsigned short Data2;
  /* this+0x6 */ unsigned short Data3;
  /* this+0x8 */ unsigned char[0x8] Data4;
}

struct Registry {
  /* this+0x0 */ struct _GUID guidDevice;
  /* this+0x10 */ struct _GUID guidDriver;
  /* this+0x20 */ char[0x28] deviceName;
  /* this+0x48 */ unsigned long isFullScreenMode;
  /* this+0x4c */ unsigned long isLowResSprite;
  /* this+0x50 */ unsigned long useCompressedTexture;
  /* this+0x54 */ unsigned long isFogRender;
  /* this+0x58 */ unsigned long Width;
  /* this+0x5c */ unsigned long Height;
  /* this+0x60 */ unsigned long bitPerPixel;
  /* this+0x64 */ unsigned long deviceCnt;
  /* this+0x68 */ unsigned long modeCnt;
  /* this+0x6c */ unsigned long frameSkip;
  /* this+0x70 */ unsigned long filtering;
  /* this+0x74 */ unsigned long m_bUse3dSound;
  /* this+0x78 */ unsigned long m_soundOutPut;
  /* this+0x7c */ unsigned long m_soundDriver;
}

struct Registry2 {
  /* this+0x0 */ struct _GUID m_guidDevice;
  /* this+0x10 */ struct _GUID m_guidDriver;
  /* this+0x20 */ char[0x28] m_deviceName;
  /* this+0x48 */ unsigned long m_isFullScreenMode;
  /* this+0x4c */ unsigned long m_width;
  /* this+0x50 */ unsigned long m_height;
  /* this+0x54 */ unsigned long m_bitPerPixel;
  /* this+0x58 */ unsigned long m_deviceCnt;
  /* this+0x5c */ unsigned long m_modeCnt;
  /* this+0x60 */ unsigned long m_isVoodoo;
  /* this+0x64 */ unsigned long m_spriteMode;
  /* this+0x68 */ unsigned long m_textureMode;
  /* this+0x6c */ unsigned long m_trilinearFilter;
  /* this+0x70 */ int m_soundMode;
  /* this+0x74 */ int m_speakerType;
  /* this+0x78 */ int m_digitalrateType;
  /* this+0x7c */ int m_numSampleType;
  /* this+0x80 */ int m_digitalbitsType;
  /* this+0x84 */ int m_useWaveout;
  /* this+0x88 */ char[0x400] m_providerName;
}

struct BINK {
  /* this+0x0 */ unsigned long Width;
  /* this+0x4 */ unsigned long Height;
  /* this+0x8 */ unsigned long Frames;
  /* this+0xc */ unsigned long FrameNum;
  /* this+0x10 */ unsigned long LastFrameNum;
  /* this+0x14 */ unsigned long FrameRate;
  /* this+0x18 */ unsigned long FrameRateDiv;
  /* this+0x1c */ unsigned long ReadError;
  /* this+0x20 */ unsigned long OpenFlags;
  /* this+0x24 */ unsigned long BinkType;
  /* this+0x28 */ unsigned long Size;
  /* this+0x2c */ unsigned long FrameSize;
  /* this+0x30 */ unsigned long SndSize;
  /* this+0x34 */ struct BINKRECT[0x8] FrameRects;
  /* this+0xb4 */ long NumRects;
  /* this+0xb8 */ unsigned long PlaneNum;
  /* this+0xbc */ void *[0x2] YPlane;
  /* this+0xc4 */ void *[0x2] APlane;
  /* this+0xcc */ unsigned long YWidth;
  /* this+0xd0 */ unsigned long YHeight;
  /* this+0xd4 */ unsigned long UVWidth;
  /* this+0xd8 */ unsigned long UVHeight;
  /* this+0xdc */ void * MaskPlane;
  /* this+0xe0 */ unsigned long MaskPitch;
  /* this+0xe4 */ unsigned long MaskLength;
  /* this+0xe8 */ unsigned long LargestFrameSize;
  /* this+0xec */ unsigned long InternalFrames;
  /* this+0xf0 */ long NumTracks;
  /* this+0xf4 */ unsigned long Highest1SecRate;
  /* this+0xf8 */ unsigned long Highest1SecFrame;
  /* this+0xfc */ long Paused;
  /* this+0x100 */ unsigned long BackgroundThread;
  /* this+0x104 */ void * compframe;
  /* this+0x108 */ void * preloadptr;
  /* this+0x10c */ unsigned long * frameoffsets;
  /* this+0x110 */ struct BINKIO bio;
  /* this+0x24c */ unsigned char * ioptr;
  /* this+0x250 */ unsigned long iosize;
  /* this+0x254 */ unsigned long decompwidth;
  /* this+0x258 */ unsigned long decompheight;
  /* this+0x25c */ long * trackindexes;
  /* this+0x260 */ unsigned long * tracksizes;
  /* this+0x264 */ unsigned long * tracktypes;
  /* this+0x268 */ long * trackIDs;
  /* this+0x26c */ unsigned long numrects;
  /* this+0x270 */ unsigned long playedframes;
  /* this+0x274 */ unsigned long firstframetime;
  /* this+0x278 */ unsigned long startframetime;
  /* this+0x27c */ unsigned long startblittime;
  /* this+0x280 */ unsigned long startsynctime;
  /* this+0x284 */ unsigned long startsyncframe;
  /* this+0x288 */ unsigned long twoframestime;
  /* this+0x28c */ unsigned long entireframetime;
  /* this+0x290 */ unsigned long slowestframetime;
  /* this+0x294 */ unsigned long slowestframe;
  /* this+0x298 */ unsigned long slowest2frametime;
  /* this+0x29c */ unsigned long slowest2frame;
  /* this+0x2a0 */ unsigned long soundon;
  /* this+0x2a4 */ unsigned long videoon;
  /* this+0x2a8 */ unsigned long totalmem;
  /* this+0x2ac */ unsigned long timevdecomp;
  /* this+0x2b0 */ unsigned long timeadecomp;
  /* this+0x2b4 */ unsigned long timeblit;
  /* this+0x2b8 */ unsigned long timeopen;
  /* this+0x2bc */ unsigned long fileframerate;
  /* this+0x2c0 */ unsigned long fileframeratediv;
  /* this+0x2c4 */ unsigned long runtimeframes;
  /* this+0x2c8 */ unsigned long runtimemoveamt;
  /* this+0x2cc */ unsigned long * rtframetimes;
  /* this+0x2d0 */ unsigned long * rtadecomptimes;
  /* this+0x2d4 */ unsigned long * rtvdecomptimes;
  /* this+0x2d8 */ unsigned long * rtblittimes;
  /* this+0x2dc */ unsigned long * rtreadtimes;
  /* this+0x2e0 */ unsigned long * rtidlereadtimes;
  /* this+0x2e4 */ unsigned long * rtthreadreadtimes;
  /* this+0x2e8 */ unsigned long lastblitflags;
  /* this+0x2ec */ unsigned long lastdecompframe;
  /* this+0x2f0 */ unsigned long playingtracks;
  /* this+0x2f4 */ unsigned long soundskips;
  /* this+0x2f8 */ struct BINKSND * bsnd;
  /* this+0x2fc */ unsigned long skippedlastblit;
  /* this+0x300 */ unsigned long skipped_this_frame;
  /* this+0x304 */ unsigned long skippedblits;
  /* this+0x308 */ struct BUNDLEPOINTERS bunp;
  /* this+0x32c */ unsigned long skipped_in_a_row;
  /* this+0x330 */ unsigned long big_sound_skip_adj;
  /* this+0x334 */ unsigned long big_sound_skip_reduce;
  /* this+0x338 */ unsigned long last_time_almost_empty;
  /* this+0x33c */ unsigned long last_read_count;
  /* this+0x340 */ unsigned long last_sound_count;
  /* this+0x344 */ unsigned long[0x10] snd_callback_buffer;
}

struct BINKBUFFER {
  /* this+0x0 */ unsigned long Width;
  /* this+0x4 */ unsigned long Height;
  /* this+0x8 */ unsigned long WindowWidth;
  /* this+0xc */ unsigned long WindowHeight;
  /* this+0x10 */ unsigned long SurfaceType;
  /* this+0x14 */ void * Buffer;
  /* this+0x18 */ long BufferPitch;
  /* this+0x1c */ long ClientOffsetX;
  /* this+0x20 */ long ClientOffsetY;
  /* this+0x24 */ unsigned long ScreenWidth;
  /* this+0x28 */ unsigned long ScreenHeight;
  /* this+0x2c */ unsigned long ScreenDepth;
  /* this+0x30 */ unsigned long ExtraWindowWidth;
  /* this+0x34 */ unsigned long ExtraWindowHeight;
  /* this+0x38 */ unsigned long ScaleFlags;
  /* this+0x3c */ unsigned long StretchWidth;
  /* this+0x40 */ unsigned long StretchHeight;
  /* this+0x44 */ long surface;
  /* this+0x48 */ void * ddsurface;
  /* this+0x4c */ void * ddclipper;
  /* this+0x50 */ long destx;
  /* this+0x54 */ long desty;
  /* this+0x58 */ long wndx;
  /* this+0x5c */ long wndy;
  /* this+0x60 */ unsigned long wnd;
  /* this+0x64 */ long ddoverlay;
  /* this+0x68 */ long ddoffscreen;
  /* this+0x6c */ long lastovershow;
  /* this+0x70 */ long issoftcur;
  /* this+0x74 */ unsigned long cursorcount;
  /* this+0x78 */ void * buffertop;
  /* this+0x7c */ unsigned long type;
  /* this+0x80 */ long noclipping;
  /* this+0x84 */ long loadeddd;
  /* this+0x88 */ long loadedwin;
  /* this+0x8c */ void * dibh;
  /* this+0x90 */ void * dibbuffer;
  /* this+0x94 */ long dibpitch;
  /* this+0x98 */ void * dibinfo;
  /* this+0x9c */ unsigned long dibdc;
  /* this+0xa0 */ unsigned long diboldbitmap;
}

class CBink {
  /* this+0x0 */ struct BINK * m_Bink;
  /* this+0x4 */ struct BINKBUFFER * m_BinkBuffer;
  /* this+0x8 */ unsigned char m_IsBinkPlaying;
  /* this+0xc */ int m_BinkMode;
}

class CLanguage {
  /* this+0x4 */ class std::deque<unsigned long,std::allocator<unsigned long> > m_fakeInput;
  /* this+0x34 */ struct tagCANDIDATELIST * m_candidateList;
  /* this+0x38 */ int m_candidateCount;
  /* this+0x3c */ int m_candidatePageSize;
  /* this+0x40 */ int m_candidateSelection;
  /* this+0x44 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_candidateBuffer;
  /* this+0x54 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_input;
  /* this+0x64 */ int m_inputCursor;
  /* this+0x68 */ int m_selectionCursor;
  /* this+0x6c */ int m_selectionOrigin;
  /* this+0x70 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_keyStroke;
  /* this+0x80 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_compStr;
  /* this+0x90 */ int m_compCursorPos;
  /* this+0x94 */ unsigned char m_bHideText;
  /* this+0x96 */ unsigned short m_langId;
  /* this+0x98 */ unsigned int m_codePage;
  /* this+0x9c */ int m_underLineStart;
  /* this+0xa0 */ int m_underLineEnd;
  /* this+0xa4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_languageFolder;
  /* this+0xb4 */ unsigned short m_scriptLangId;
}

class CSession {
  /* this+0x0 */ int m_curMapType;
  /* this+0x4 */ int[0xf][0x1e] m_mapInfoTable;
  /* this+0x70c */ class std::list<SKILL_INFO,std::allocator<SKILL_INFO> > m_guildSkillList;
  /* this+0x718 */ class std::list<SKILL_INFO,std::allocator<SKILL_INFO> > m_skillInfoList;
  /* this+0x724 */ class std::list<SKILL_INFO,std::allocator<SKILL_INFO> > m_homunSkillList;
  /* this+0x730 */ class std::list<SKILL_INFO,std::allocator<SKILL_INFO> > m_merSkillList;
  /* this+0x73c */ class std::list<QUEST_INFO,std::allocator<QUEST_INFO> > m_QuestList;
  /* this+0x748 */ class std::list<SKILL_INFO,std::allocator<SKILL_INFO> > m_tempSkillList;
  /* this+0x754 */ unsigned char m_shortcutSlotCnt;
  /* this+0x758 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> >[0x1b] m_shortenItemName;
  /* this+0x908 */ int[0x1b] m_shortenSkillUseLevel;
  /* this+0x974 */ struct ShortCutKey[0x1b] m_shortCutList;
  /* this+0xa34 */ class std::vector<int,std::allocator<int> > m_skillUseLevelList;
  /* this+0xa44 */ class std::vector<int,std::allocator<int> > m_skillAttackedEffectIdTable;
  /* this+0xa54 */ class std::vector<int,std::allocator<int> > m_skillAttackEffectIdTable;
  /* this+0xa64 */ class std::vector<int,std::allocator<int> > m_guildSkillUseLevelList;
  /* this+0xa74 */ class std::vector<int,std::allocator<int> > m_homunSkillUseLevelList;
  /* this+0xa84 */ class std::vector<int,std::allocator<int> > m_merSkillUseLevelList;
  /* this+0xa94 */ unsigned long m_targetGID;
  /* this+0xa98 */ class std::vector<CHAT_PROHIBIT_LOG,std::allocator<CHAT_PROHIBIT_LOG> > m_chatProhibitLog;
  /* this+0xaa8 */ class std::vector<REQ_ACCOUNT_AID,std::allocator<REQ_ACCOUNT_AID> > m_recievedAccountName;
  /* this+0xab8 */ class std::vector<REQ_ACCOUNTNAME_INFO,std::allocator<REQ_ACCOUNTNAME_INFO> > m_reqAccountInfo;
  /* this+0xac8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_selectedServerName;
  /* this+0xad8 */ class std::vector<FORCE_ANIM_TICK,std::allocator<FORCE_ANIM_TICK> > m_forceAnimEndTick;
  /* this+0xae8 */ int m_diffTime;
  /* this+0xaec */ char[0x14] m_curMap;
  /* this+0xb00 */ int m_numLatePacket;
  /* this+0xb04 */ int m_showType;
  /* this+0xb08 */ unsigned long m_averagePingTime;
  /* this+0xb0c */ unsigned long m_showDigitTick;
  /* this+0xb10 */ unsigned long m_killTimeStartTick;
  /* this+0xb14 */ int m_isShowTime;
  /* this+0xb18 */ int m_isNeverDie;
  /* this+0xb1c */ char[0x40] m_cName;
  /* this+0xb5c */ char[0x40] m_aName;
  /* this+0xb9c */ struct TAG_CHARACTER_BLOCK_INFO[0x9] m_charBlockInfo2;
  /* this+0xc74 */ int m_sex;
  /* this+0xc78 */ int m_charNum;
  /* this+0xc7c */ int m_authCode;
  /* this+0xc80 */ unsigned long m_userLevel;
  /* this+0xc84 */ unsigned long m_lastLoginIP;
  /* this+0xc88 */ char[0x1c] m_lastLoginTime;
  /* this+0xca4 */ int m_mkcount;
  /* this+0xca8 */ int m_haircolor;
  /* this+0xcac */ int m_deadcount;
  /* this+0xcb0 */ int m_head;
  /* this+0xcb4 */ int m_weapon;
  /* this+0xcb8 */ int m_shield;
  /* this+0xcbc */ int m_bodyPalette;
  /* this+0xcc0 */ int m_headPalette;
  /* this+0xcc4 */ int m_accessory;
  /* this+0xcc8 */ int m_accessory2;
  /* this+0xccc */ int m_accessory3;
  /* this+0xcd0 */ int m_bodyState;
  /* this+0xcd4 */ int m_healthState;
  /* this+0xcd8 */ int m_effectState;
  /* this+0xcdc */ int m_posX;
  /* this+0xce0 */ int m_posY;
  /* this+0xce4 */ int m_dir;
  /* this+0xce8 */ char m_camp;
  /* this+0xcec */ int m_camp_A;
  /* this+0xcf0 */ int m_camp_B;
  /* this+0xcf4 */ char m_charfont;
  /* this+0xcf6 */ short m_DayCount;
  /* this+0xcf8 */ int m_cartCurCount;
  /* this+0xcfc */ int m_cartMaxCount;
  /* this+0xd00 */ int m_cartCurWeight;
  /* this+0xd04 */ int m_cartMaxWeight;
  /* this+0xd08 */ int m_maxNumOfSellItemOfMerchant;
  /* this+0xd0c */ int m_attackRange;
  /* this+0xd10 */ int m_charSlot;
  /* this+0xd14 */ int m_BgmVolume;
  /* this+0xd18 */ float m_LoadingTime;
  /* this+0xd1c */ int m_isShowWhisperWnd;
  /* this+0xd20 */ int m_isPlayWhisperOpenSound;
  /* this+0xd24 */ int m_isShowWhisperWnd_Friend;
  /* this+0xd28 */ int m_isItemSnap;
  /* this+0xd2c */ int m_isShowGameOver;
  /* this+0xd30 */ int m_monsterSnapOn_Skill;
  /* this+0xd34 */ int m_monsterSnapOn_NoSkill;
  /* this+0xd38 */ int m_isShowTeamGravityPlanetLogo;
  /* this+0xd3c */ class std::vector<char const *,std::allocator<char const *> > m_newPcJobNameTable;
  /* this+0xd4c */ class std::vector<char const *,std::allocator<char const *> > m_newPcSexNameTable;
  /* this+0xd5c */ class std::vector<char const *,std::allocator<char const *> > m_newPcHeadNameTable_M;
  /* this+0xd6c */ class std::vector<char const *,std::allocator<char const *> > m_newPcHeadNameTable_F;
  /* this+0xd7c */ class std::vector<char const *,std::allocator<char const *> > m_newPcJobImfNameTable;
  /* this+0xd8c */ class std::vector<char const *,std::allocator<char const *> > m_newAccessoryNameTable;
  /* this+0xd9c */ class std::vector<char const *,std::allocator<char const *> > m_pcWeaponNameTable;
  /* this+0xdac */ class std::vector<char const *,std::allocator<char const *> > m_pcSexImfNameTable;
  /* this+0xdbc */ class std::vector<char const *,std::allocator<char const *> > m_pcJobNameTable;
  /* this+0xdcc */ class std::vector<char const *,std::allocator<char const *> > m_pcSexNameTable;
  /* this+0xddc */ class std::vector<char const *,std::allocator<char const *> > m_jobNameTable;
  /* this+0xdec */ class std::vector<char const *,std::allocator<char const *> > m_sexNameTable;
  /* this+0xdfc */ class std::vector<char const *,std::allocator<char const *> > m_shieldNameTable;
  /* this+0xe0c */ class std::list<unsigned long,std::allocator<unsigned long> > m_pingTimeList;
  /* this+0xe18 */ class std::vector<char const *,std::allocator<char const *> > m_palJobNameTable;
  /* this+0xe28 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_shortcutText;
  /* this+0xe38 */ unsigned long m_petGID;
  /* this+0xe3c */ int m_isPetNameModified;
  /* this+0xe40 */ char[0x20] m_petName;
  /* this+0xe60 */ int m_petAcc;
  /* this+0xe64 */ int m_petJob;
  /* this+0xe68 */ int m_petLevel;
  /* this+0xe6c */ int m_petHungry;
  /* this+0xe70 */ int m_petFriendly;
  /* this+0xe74 */ int m_petEggIndex;
  /* this+0xe78 */ int m_petOldHungry;
  /* this+0xe7c */ int[0x7][0x5][0x5] m_petEmotionTable;
  /* this+0x1138 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> >[0x5][0x5] m_petTalkTable;
  /* this+0x12c8 */ class XMLDocument m_petTalkXmlTable;
  /* this+0x12f0 */ class XMLDocument m_monsterSkillInfo;
  /* this+0x1318 */ class XMLDocument m_monsterTalkTable;
  /* this+0x1340 */ int m_guildDealZeny;
  /* this+0x1344 */ int m_MaxItemIndex;
  /* this+0x1348 */ unsigned long m_aid;
  /* this+0x134c */ unsigned long m_gid;
  /* this+0x1350 */ int m_isWeaponBow;
  /* this+0x1354 */ float m_oneCellDist;
  /* this+0x1358 */ int m_job;
  /* this+0x135c */ int m_exp;
  /* this+0x1360 */ int m_level;
  /* this+0x1364 */ int m_point;
  /* this+0x1368 */ int m_nextexp;
  /* this+0x136c */ int m_joblevel;
  /* this+0x1370 */ int m_skillPoint;
  /* this+0x1374 */ int m_guildSkillPoint;
  /* this+0x1378 */ int m_homunSkillPoint;
  /* this+0x137c */ int m_merSkillPoint;
  /* this+0x1380 */ int m_plusStr;
  /* this+0x1384 */ int m_plusAgi;
  /* this+0x1388 */ int m_plusVit;
  /* this+0x138c */ int m_plusInt;
  /* this+0x1390 */ int m_plusDex;
  /* this+0x1394 */ int m_plusLuk;
  /* this+0x1398 */ int m_str;
  /* this+0x139c */ int m_agi;
  /* this+0x13a0 */ int m_vit;
  /* this+0x13a4 */ int m_int;
  /* this+0x13a8 */ int m_dex;
  /* this+0x13ac */ int m_luk;
  /* this+0x13b0 */ int m_standardStr;
  /* this+0x13b4 */ int m_standardAgi;
  /* this+0x13b8 */ int m_standardVit;
  /* this+0x13bc */ int m_standardInt;
  /* this+0x13c0 */ int m_standardDex;
  /* this+0x13c4 */ int m_standardLuk;
  /* this+0x13c8 */ int m_ASPD;
  /* this+0x13cc */ int m_attPower;
  /* this+0x13d0 */ int m_mdefPower;
  /* this+0x13d4 */ int m_plusASPD;
  /* this+0x13d8 */ int m_itemDefPower;
  /* this+0x13dc */ int m_plusdefPower;
  /* this+0x13e0 */ int m_refiningPower;
  /* this+0x13e4 */ int m_max_mattPower;
  /* this+0x13e8 */ int m_min_mattPower;
  /* this+0x13ec */ int m_plusmdefPower;
  /* this+0x13f0 */ int m_hitSuccessValue;
  /* this+0x13f4 */ int m_avoidSuccessValue;
  /* this+0x13f8 */ int m_criticalSuccessValue;
  /* this+0x13fc */ int m_plusAvoidSuccessValue;
  /* this+0x1400 */ int m_equipArrowIndex;
  /* this+0x1404 */ int m_gold;
  /* this+0x1408 */ int m_speed;
  /* this+0x140c */ int m_honor;
  /* this+0x1410 */ int m_maxWeight;
  /* this+0x1414 */ int m_jobnextexp;
  /* this+0x1418 */ int m_jobexp;
  /* this+0x141c */ int m_weight;
  /* this+0x1420 */ int m_virtue;
  /* this+0x1424 */ int m_isMonsterSnap;
  /* this+0x1428 */ int m_systemDiffTime;
  /* this+0x142c */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemList;
  /* this+0x1438 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_shopItemList;
  /* this+0x1444 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_purchaseItemList;
  /* this+0x1450 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_sellItemList;
  /* this+0x145c */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_storeItemList;
  /* this+0x1468 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_merchantItemList;
  /* this+0x1474 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_merchantShopItemList;
  /* this+0x1480 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_merchantMirrorItemList;
  /* this+0x148c */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_merchantMyShopItemList;
  /* this+0x1498 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_merchantPurchaseItemList;
  /* this+0x14a4 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_merchantHopeToSellItemList;
  /* this+0x14b0 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_merchantPurchaseItemSavedList;
  /* this+0x14bc */ class std::list<FRIEND_INFO,std::allocator<FRIEND_INFO> > m_partyList;
  /* this+0x14c8 */ class std::list<FRIEND_INFO,std::allocator<FRIEND_INFO> > m_friendList;
  /* this+0x14d4 */ struct ITEM_INFO[0xa] m_equipedItems;
  /* this+0x17cc */ struct ITEM_INFO[0xa] m_otherUserEquipedItems;
  /* this+0x1ac4 */ struct ITEM_INFO[0xa] m_exchangeItems;
  /* this+0x1dbc */ struct ITEM_INFO[0xa] m_otherExchangeItems;
  /* this+0x20b4 */ int m_myExchangeMoney;
  /* this+0x20b8 */ int m_otherExchangeMoney;
  /* this+0x20bc */ class std::vector<std::pair<char const *,enum TALKTYPE>,std::allocator<std::pair<char const *,enum TALKTYPE> > > m_talkTypeTable;
  /* this+0x20cc */ class std::vector<std::pair<char const *,char const *>,std::allocator<std::pair<char const *,char const *> > > m_mapNameTable;
  /* this+0x20dc */ class std::vector<std::pair<char const *,char const *>,std::allocator<std::pair<char const *,char const *> > > m_mp3NameTable;
  /* this+0x20ec */ class std::vector<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator087911da m_fogParameterTable;
  /* this+0x20fc */ class std::vector<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator087911da m_ViewPointTable;
  /* this+0x210c */ class std::vector<char const *,std::allocator<char const *> > m_indoorRswTable;
  /* this+0x211c */ class std::vector<float,std::allocator<float> > m_shadowFactorTable;
  /* this+0x212c */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_msgStringTable;
  /* this+0x213c */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_weaponSwingWaveNameTable;
  /* this+0x214c */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_jobHitWaveNameTable;
  /* this+0x215c */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_weaponHitWaveNameTable;
  /* this+0x216c */ class std::list<unsigned long,std::allocator<unsigned long> > m_exAidList;
  /* this+0x2178 */ class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_exNameList;
  /* this+0x2184 */ class std::vector<std::pair<char const *,bool>,std::allocator<std::pair<char const *,bool> > > m_enableObjLightMapList;
  /* this+0x2194 */ class std::vector<std::pair<char const *,enum TALKTYPE>,std::allocator<std::pair<char const *,enum TALKTYPE> > > m_cmdOnOffTable;
  /* this+0x21a4 */ class std::vector<std::pair<char const *,enum TALKTYPE>,std::allocator<std::pair<char const *,enum TALKTYPE> > > m_cmdExeTable;
  /* this+0x21b4 */ class std::vector<std::pair<int,enum TALKTYPE>,std::allocator<std::pair<int,enum TALKTYPE> > > m_cmdOnOffSet;
  /* this+0x21c4 */ class std::vector<std::pair<char const *,unsigned long>,std::allocator<std::pair<char const *,unsigned long> > > m_cmdWinTable;
  /* this+0x21d4 */ class std::vector<char const *,std::allocator<char const *> > m_keyWinTable;
  /* this+0x21e4 */ class std::vector<MAIL_LIST,std::allocator<MAIL_LIST> > m_mailList;
  /* this+0x21f4 */ struct MAIL_OPEN m_mailOpen;
  /* this+0x2253 */ struct MAIL_LIST m_mailNew;
  /* this+0x229c */ struct ITEM_INFO m_mailItem;
  /* this+0x22e8 */ int m_mailItemCnt;
  /* this+0x22ec */ unsigned char m_waitForSendMail;
  /* this+0x22f0 */ class std::vector<AUCTION_ITEM_SEARCH_INFO,std::allocator<AUCTION_ITEM_SEARCH_INFO> > m_auctionList;
  /* this+0x2300 */ unsigned char m_waitForAddAuction;
  /* this+0x2304 */ int m_auctionSeachOption;
  /* this+0x2308 */ int m_auctionSeachOption2;
  /* this+0x230c */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MapPosInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<MapPosInfo> > m_mapPosTable;
  /* this+0x231c */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MapPosInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<MapPosInfo> > * m_divisionMapPosTable;
  /* this+0x2320 */ class std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> > m_divisionMapPosIndexTable;
  /* this+0x2330 */ int m_initMapPos;
  /* this+0x2334 */ int m_maxNum;
  /* this+0x2338 */ int m_hpIndex;
  /* this+0x233c */ int m_spIndex;
  /* this+0x2340 */ int m_xorIndex;
  /* this+0x2344 */ int m_maxhpIndex;
  /* this+0x2348 */ int m_maxspIndex;
  /* this+0x234c */ int[0xc] m_xorValue;
  /* this+0x237c */ int[0xc] m_maxhp;
  /* this+0x23ac */ int[0xc] m_maxsp;
  /* this+0x23dc */ int[0xc] m_hp;
  /* this+0x240c */ int[0xc] m_sp;
  /* this+0x243c */ struct CommonObject m_objParser;
  /* this+0x244c */ int m_fogOn;
  /* this+0x2450 */ int m_isAura;
  /* this+0x2454 */ int m_isNoShift;
  /* this+0x2458 */ int m_isNoCtrl;
  /* this+0x245c */ int m_isWindow;
  /* this+0x2460 */ int m_isSkillFail;
  /* this+0x2464 */ int m_isLogInOut;
  /* this+0x2468 */ int m_isShopping;
  /* this+0x246c */ int m_isQuickSpell;
  /* this+0x2470 */ int m_isQuickSpell2;
  /* this+0x2474 */ int m_isMiniGame;
  /* this+0x2478 */ int m_isQ2begin;
  /* this+0x247c */ int m_isNoTalkMsg;
  /* this+0x2480 */ int m_isNoTalkMsg2;
  /* this+0x2484 */ int m_isNoTrade;
  /* this+0x2488 */ int m_isEffectOn;
  /* this+0x248c */ int m_isDA_illusionON;
  /* this+0x2490 */ int m_bgmIsPaused;
  /* this+0x2494 */ int m_isMinEffect;
  /* this+0x2498 */ int m_isMinEffectOld;
  /* this+0x249c */ int m_isPropertyDisableLockOn;
  /* this+0x24a0 */ int m_isPropertyCountPK;
  /* this+0x24a4 */ int m_isPropertyNoParty;
  /* this+0x24a8 */ int m_amIPartyMaster;
  /* this+0x24ac */ int m_amIParent;
  /* this+0x24b0 */ int m_isAttrIndicator;
  /* this+0x24b4 */ int m_bMakeMissEffect;
  /* this+0x24b8 */ int m_isLowSystemMemory;
  /* this+0x24bc */ int m_bAutoOpenDetailWindowIfLowMemory;
  /* this+0x24c0 */ unsigned char m_isShowNameTypeOld;
  /* this+0x24c1 */ unsigned char RandomScreenFlag;
  /* this+0x24c2 */ unsigned char m_isCheckToPcbang;
  /* this+0x24c4 */ int m_SelectAccountNumber;
  /* this+0x24c8 */ int m_isBattle;
  /* this+0x24cc */ int m_isBattleChat;
  /* this+0x24d0 */ int m_isBmChat;
  /* this+0x24d4 */ int m_isStartBmChat;
  /* this+0x24d8 */ unsigned int m_timeCheckValue;
  /* this+0x24dc */ unsigned long m_dwOldTime;
  /* this+0x24e0 */ int m_talkType;
  /* this+0x24e4 */ int m_langType;
  /* this+0x24e8 */ int m_expDivType;
  /* this+0x24ec */ int m_itemCollectType;
  /* this+0x24f0 */ int m_itemDivType;
  /* this+0x24f4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_partyRequestName;
  /* this+0x2504 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_partyName;
  /* this+0x2514 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_accountAddress;
  /* this+0x2524 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_registrationUrl;
  /* this+0x2534 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_myShopName;
  /* this+0x2544 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_accountPort;
  /* this+0x2554 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_lastServerName;
  /* this+0x2564 */ unsigned char m_emblemState;
  /* this+0x2568 */ int m_isSaveChat;
  /* this+0x256c */ int m_sexCheck;
  /* this+0x2570 */ int m_cNameCheck;
  /* this+0x2574 */ unsigned long m_playingTime;
  /* this+0x2578 */ short m_MightyGauge;
  /* this+0x257a */ char m_GaugePacket;
  /* this+0x257c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > killName;
  /* this+0x258c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > killedName;
  /* this+0x259c */ int m_winPoint;
  /* this+0x25a0 */ int m_losePoint;
  /* this+0x25a4 */ struct _SYSTEMTIME expireTime;
  /* this+0x25b4 */ unsigned long m_homunGID;
  /* this+0x25b8 */ char[0x20] m_homunName;
  /* this+0x25d8 */ int m_homunAtk;
  /* this+0x25dc */ int m_homunMatk;
  /* this+0x25e0 */ int m_homunHit;
  /* this+0x25e4 */ int m_homunCritical;
  /* this+0x25e8 */ int m_homunDef;
  /* this+0x25ec */ int m_homunMdef;
  /* this+0x25f0 */ int m_homunFlee;
  /* this+0x25f4 */ int m_homunAspd;
  /* this+0x25f8 */ int m_homunJob;
  /* this+0x25fc */ int m_homunLevel;
  /* this+0x2600 */ int m_homunHP;
  /* this+0x2604 */ int m_homunMaxHP;
  /* this+0x2608 */ int m_homunSP;
  /* this+0x260c */ int m_homunMaxSP;
  /* this+0x2610 */ int m_homunFriendly;
  /* this+0x2614 */ int m_homunAcc;
  /* this+0x2618 */ int m_homunExp;
  /* this+0x261c */ int m_homunNextExp;
  /* this+0x2620 */ int m_homunHungry;
  /* this+0x2624 */ int m_homunMaxHungry;
  /* this+0x2628 */ int m_isHomunNameModified;
  /* this+0x262c */ unsigned long m_homunEnemyGID;
  /* this+0x2630 */ int m_homunEnemyX;
  /* this+0x2634 */ int m_homunEnemyY;
  /* this+0x2638 */ int m_moveHomunEnemy;
  /* this+0x263c */ int m_selectHomunEnemy;
  /* this+0x2640 */ int m_attackHomunEnemy;
  /* this+0x2644 */ int m_homunAlive;
  /* this+0x2648 */ int m_onTraceAI;
  /* this+0x264c */ int m_onHoUserAI;
  /* this+0x2650 */ int m_homunStateId;
  /* this+0x2654 */ int m_oldHomunHungry;
  /* this+0x2658 */ int m_homunATKRange;
  /* this+0x265c */ unsigned long m_merGID;
  /* this+0x2660 */ char[0x20] m_merName;
  /* this+0x2680 */ int m_merAtk;
  /* this+0x2684 */ int m_merMatk;
  /* this+0x2688 */ int m_merHit;
  /* this+0x268c */ int m_merCritical;
  /* this+0x2690 */ int m_merDef;
  /* this+0x2694 */ int m_merMdef;
  /* this+0x2698 */ int m_merFlee;
  /* this+0x269c */ int m_merAspd;
  /* this+0x26a0 */ int m_merHP;
  /* this+0x26a4 */ int m_merMaxHP;
  /* this+0x26a8 */ int m_merJob;
  /* this+0x26ac */ int m_merLevel;
  /* this+0x26b0 */ int m_merSP;
  /* this+0x26b4 */ int m_merMaxSP;
  /* this+0x26b8 */ int m_merFaith;
  /* this+0x26bc */ int m_merCallNum;
  /* this+0x26c0 */ int m_merKillCounter;
  /* this+0x26c4 */ int m_merATKRange;
  /* this+0x26c8 */ long m_merExpireDate;
  /* this+0x26cc */ unsigned long m_merEnemyGID;
  /* this+0x26d0 */ int m_merEnemyX;
  /* this+0x26d4 */ int m_merEnemyY;
  /* this+0x26d8 */ int m_moveMerEnemy;
  /* this+0x26dc */ int m_onMerUserAI;
  /* this+0x26e0 */ int m_selectMerEnemy;
  /* this+0x26e4 */ int m_attackMerEnemy;
  /* this+0x26e8 */ int m_merAlive;
  /* this+0x26ec */ int m_merStateId;
  /* this+0x26f0 */ unsigned char m_onAutoMSG;
  /* this+0x26f4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strAutoMSG;
  /* this+0x2704 */ unsigned long m_changeNameGID;
  /* this+0x2708 */ char[0x18] m_changeCharName;
  /* this+0x2720 */ int m_cashPoint;
  /* this+0x2724 */ int m_freePoint;
  /* this+0x2728 */ unsigned char[0xd] m_battleMsgOnOffSet;
  /* this+0x2735 */ unsigned char m_bRefuseInviteParty;
  /* this+0x2738 */ int m_onDunInfoWnd;
  /* this+0x273c */ int dunInfoWndX;
  /* this+0x2740 */ int dunInfoWndY;
  /* this+0x2744 */ int m_dunState;
  /* this+0x2748 */ int m_tmpDunState;
  /* this+0x274c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_dunName;
  /* this+0x275c */ int m_priority;
  /* this+0x2760 */ long m_destroyTime;
  /* this+0x2764 */ long m_enterTimeOut;
  /* this+0x2768 */ int m_bOpenEquipedItem;
  /* this+0x276c */ int m_otherUserJob;
  /* this+0x2770 */ int m_otherUserSex;
  /* this+0x2774 */ int m_otherUserHead;
  /* this+0x2778 */ int m_otherUserAccessory;
  /* this+0x277c */ int m_otherUserAccessory2;
  /* this+0x2780 */ int m_otherUserAccessory3;
  /* this+0x2784 */ int m_otherUserBodyPalette;
  /* this+0x2788 */ int m_otherUserHeadPalette;
  /* this+0x278c */ char[0x18] m_otherUserName;
  /* this+0x27a4 */ unsigned char m_bIsUAE;
}

struct MapPosInfo {
  /* this+0x0 */ int x_LT;
  /* this+0x4 */ int y_LT;
  /* this+0x8 */ int x_RB;
  /* this+0xc */ int y_RB;
}

class std::list<SKILL_INFO,std::allocator<SKILL_INFO> > {
  /* this+0x0 */ class std::allocator<SKILL_INFO> allocator;
  /* this+0x4 */ struct std::list<SKILL_INFO,std::allocator<SKILL_INFO> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<QUEST_INFO,std::allocator<QUEST_INFO> > {
  /* this+0x0 */ class std::allocator<QUEST_INFO> allocator;
  /* this+0x4 */ struct std::list<QUEST_INFO,std::allocator<QUEST_INFO> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

struct QUEST_INFO {
  /* this+0x0 */ unsigned long questID;
  /* this+0x4 */ unsigned char show;
  /* this+0x6 */ short m_mobTime_Year;
  /* this+0x8 */ short m_mobTime_Month;
  /* this+0xa */ short m_mobTime_Day;
  /* this+0xc */ short m_mobTime_Hour;
  /* this+0xe */ short m_mobTime_Minute;
  /* this+0x10 */ short m_Server_Hour;
  /* this+0x12 */ short m_Server_Minute;
  /* this+0x14 */ char mobCount;
  /* this+0x18 */ unsigned long[0x3] mobID;
  /* this+0x24 */ short[0x3] mobHunt;
  /* this+0x2a */ char[0x33][0x3] mobName;
}

struct SKILL_INFO {
  /* this+0x0 */ int m_isValid;
  /* this+0x4 */ int SKID;
  /* this+0x8 */ int type;
  /* this+0xc */ int level;
  /* this+0x10 */ int spcost;
  /* this+0x14 */ int upgradable;
  /* this+0x18 */ int attackRange;
  /* this+0x1c */ const char * skillName;
  /* this+0x20 */ int skillPos;
  /* this+0x24 */ int skillMaxLv;
  /* this+0x28 */ class std::vector<int,std::allocator<int> > needSkillList;
              }

class std::basic_string<char,std::char_traits<char>,std::allocator<char> > {
    /* this+0x0 */ class std::allocator<char> allocator;
  /* this+0x4 */ char * _Ptr;
  /* this+0x8 */ unsigned int _Len;
  /* this+0xc */ unsigned int _Res;
}

struct ShortCutKey {
  /* this+0x0 */ char isSkill;
  /* this+0x1 */ unsigned long ID;
  /* this+0x5 */ short count;
}

class std::vector<int,std::allocator<int> > {
  /* this+0x0 */ class std::allocator<int> allocator;
  /* this+0x4 */ int * _First;
  /* this+0x8 */ int * _Last;
  /* this+0xc */ int * _End;
}

class CGameActor {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ int m_efId;
  /* this+0xfc */ int m_Sk_Level;
  /* this+0x100 */ int m_isLoop;
  /* this+0x104 */ class std::list<CRagEffect *,std::allocator<CRagEffect *> > m_effectList;
  /* this+0x110 */ class CRagEffect * m_beginSpellEffect;
  /* this+0x114 */ class CRagEffect * m_magicTargetEffect;
  /* this+0x118 */ int m_moveDestX;
  /* this+0x11c */ int m_moveDestY;
  /* this+0x120 */ unsigned long m_speed;
  /* this+0x124 */ int m_isCounter;
  /* this+0x128 */ int m_isTrickDead;
  /* this+0x12c */ int m_isPlayHitWave;
  /* this+0x130 */ int m_isAsuraAttack;
  /* this+0x134 */ char * m_emblemWnd;
  /* this+0x138 */ char * m_WordDisplayWnd;
  /* this+0x13c */ char[0x80] m_hitWaveName;
  /* this+0x1bc */ unsigned long m_colorEndTick;
  /* this+0x1c0 */ short m_clevel;
  /* this+0x1c2 */ short m_MaxHp;
  /* this+0x1c4 */ short m_Hp;
  /* this+0x1c6 */ short m_MaxSp;
  /* this+0x1c8 */ short m_Sp;
  /* this+0x1cc */ int m_Exp;
  /* this+0x1d0 */ short m_Str;
  /* this+0x1d2 */ short m_Int;
  /* this+0x1d4 */ short m_Dex;
  /* this+0x1d6 */ short m_Vit;
  /* this+0x1d8 */ short m_Luk;
  /* this+0x1da */ short m_Agi;
  /* this+0x1dc */ struct vector3d m_accel;
  /* this+0x1e8 */ class CPathInfo m_path;
  /* this+0x204 */ unsigned long m_moveStartTime;
  /* this+0x208 */ unsigned char m_isNeverAnimation;
  /* this+0x20c */ int m_pathStartCell;
  /* this+0x210 */ float m_dist;
  /* this+0x214 */ unsigned long m_lastProcessStateTime;
  /* this+0x218 */ unsigned long m_lastServerTime;
  /* this+0x21c */ unsigned long m_chatTick;
  /* this+0x220 */ unsigned long m_targetGid;
  /* this+0x224 */ float m_attackMotion;
  /* this+0x228 */ int m_isBladeStop;
  /* this+0x22c */ unsigned long m_gid;
  /* this+0x230 */ int m_job;
  /* this+0x234 */ int m_sex;
  /* this+0x238 */ class UIBalloonText * m_balloon;
  /* this+0x23c */ class UIChatRoomTitle * m_chatTitle;
  /* this+0x240 */ class UIMerchantShopTitle * m_merchantShopTitle;
  /* this+0x244 */ class UIRechargeGage * m_skillRechargeGage;
  /* this+0x248 */ unsigned long m_freezeEndTick;
  /* this+0x24c */ unsigned long m_petEmotionStartTick;
  /* this+0x250 */ unsigned long m_skillRechargeEndTick;
  /* this+0x254 */ unsigned long m_skillRechargeStartTick;
  /* this+0x258 */ int m_chatWidth;
  /* this+0x25c */ int m_chatHeight;
  /* this+0x260 */ int m_nameWidth;
  /* this+0x264 */ int m_xSize;
  /* this+0x268 */ int m_ySize;
  /* this+0x26c */ int m_headType;
  /* this+0x270 */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackList;
  /* this+0x27c */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackedList;
  /* this+0x288 */ int m_willBeDead;
  /* this+0x28c */ int m_is99;
  /* this+0x290 */ char m_99;
  /* this+0x294 */ int m_bodyState;
  /* this+0x298 */ int m_effectState;
  /* this+0x29c */ int m_healthState;
  /* this+0x2a0 */ int m_pkState;
  /* this+0x2a4 */ float m_damageDestX;
  /* this+0x2a8 */ float m_damageDestZ;
  /* this+0x2ac */ unsigned long m_effectLaunchCnt;
  /* this+0x2b0 */ unsigned long m_vanishTime;
  /* this+0x2b4 */ int m_actorType;
  /* this+0x2b8 */ int m_bIsMemberAndVisible;
  /* this+0x2bc */ int m_gdid;
  /* this+0x2c0 */ int m_emblemVersion;
  /* this+0x2c4 */ class CMercenaryAI * m_homunAI;
  /* this+0x2c8 */ class CMercenaryAI * m_merAI;
  /* this+0x2cc */ unsigned char m_objectType;
  /* this+0x2d0 */ struct _MSG2AI m_homunMsg;
  /* this+0x2e8 */ struct _MSG2AI m_homunResMsg;
  /* this+0x300 */ struct _MSG2AI m_merMsg;
  /* this+0x318 */ struct _MSG2AI m_merResMsg;
  /* this+0x330 */ class CMsgEffect * m_birdEffect;
  /* this+0x334 */ class CMsgEffect * m_cartEffect;
  /* this+0x338 */ class CMsgEffect * m_pkEffect;
  /* this+0x33c */ class CMsgEffect * m_iceEffect;
  /* this+0x340 */ class CMsgEffect * m_curseEffect;
  /* this+0x344 */ class CMsgEffect * m_sleepEffect;
  /* this+0x348 */ class CMsgEffect * m_stunEffect;
  /* this+0x34c */ class CMsgEffect * m_silenceEffect;
  /* this+0x350 */ class CMsgEffect * m_angelusEffect;
  /* this+0x354 */ class CMsgEffect * m_crusisEffect;
  /* this+0x358 */ class CMsgEffect * m_chatProhibitEffect;
  /* this+0x35c */ class CMsgEffect * m_cursorEffect;
  /* this+0x360 */ class std::list<CMsgEffect *,std::allocator<CMsgEffect *> > m_msgEffectList;
}

class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > {
  /* this+0x0 */ class std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > allocator;
  /* this+0x4 */ struct std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > {
  /* this+0x0 */ class std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > allocator;
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > * _First;
  /* this+0x8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > * _Last;
  /* this+0xc */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > * _End;
}

struct ITEM_INFO {
  /* this+0x0 */ int m_itemType;
  /* this+0x4 */ int m_location;
  /* this+0x8 */ unsigned long m_itemIndex;
  /* this+0xc */ int m_wearLocation;
  /* this+0x10 */ int m_num;
  /* this+0x14 */ int m_price;
  /* this+0x18 */ int m_realPrice;
  /* this+0x1c */ int[0x4] m_slot;
  /* this+0x2c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_itemName;
  /* this+0x3c */ unsigned char m_isIdentified;
  /* this+0x3d */ unsigned char m_isDamaged;
  /* this+0x40 */ int m_refiningLevel;
  /* this+0x44 */ unsigned short m_isYours;
  /* this+0x48 */ long m_deleteTime;
            }

struct SHOP_ITEM {
  /* this+0x0 */ int index;
  /* this+0x4 */ int price;
  /* this+0x8 */ int realPrice;
  /* this+0xc */ int type;
  /* this+0x10 */ unsigned char isIdentified;
  /* this+0x11 */ char[0x21] itemName;
}

struct FRIEND_INFO {
  /* this+0x0 */ int isValid;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ unsigned long GID;
  /* this+0xc */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > characterName;
  /* this+0x1c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > mapName;
  /* this+0x2c */ int role;
  /* this+0x30 */ int state;
  /* this+0x34 */ unsigned long color;
}

class std::vector<CHAT_PROHIBIT_LOG,std::allocator<CHAT_PROHIBIT_LOG> > {
  /* this+0x0 */ class std::allocator<CHAT_PROHIBIT_LOG> allocator;
  /* this+0x4 */ struct CHAT_PROHIBIT_LOG * _First;
  /* this+0x8 */ struct CHAT_PROHIBIT_LOG * _Last;
  /* this+0xc */ struct CHAT_PROHIBIT_LOG * _End;
}

class std::vector<REQ_ACCOUNT_AID,std::allocator<REQ_ACCOUNT_AID> > {
  /* this+0x0 */ class std::allocator<REQ_ACCOUNT_AID> allocator;
  /* this+0x4 */ struct REQ_ACCOUNT_AID * _First;
  /* this+0x8 */ struct REQ_ACCOUNT_AID * _Last;
  /* this+0xc */ struct REQ_ACCOUNT_AID * _End;
}

class std::vector<REQ_ACCOUNTNAME_INFO,std::allocator<REQ_ACCOUNTNAME_INFO> > {
  /* this+0x0 */ class std::allocator<REQ_ACCOUNTNAME_INFO> allocator;
  /* this+0x4 */ struct REQ_ACCOUNTNAME_INFO * _First;
  /* this+0x8 */ struct REQ_ACCOUNTNAME_INFO * _Last;
  /* this+0xc */ struct REQ_ACCOUNTNAME_INFO * _End;
}

class CFile {
  /* this+0x0 */ void * m_hFile;
  /* this+0x4 */ char * m_buf;
  /* this+0x8 */ unsigned long m_cursor;
  /* this+0xc */ unsigned long m_size;
  /* this+0x10 */ char[0x80] m_fileName;
}

class std::vector<FORCE_ANIM_TICK,std::allocator<FORCE_ANIM_TICK> > {
  /* this+0x0 */ class std::allocator<FORCE_ANIM_TICK> allocator;
  /* this+0x4 */ struct FORCE_ANIM_TICK * _First;
  /* this+0x8 */ struct FORCE_ANIM_TICK * _Last;
  /* this+0xc */ struct FORCE_ANIM_TICK * _End;
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std:83de5b43 {
  /* this+0x0 */ class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<sdffb3b8a _Tr;
}

class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<se6a3b1b6 {
  /* this+0x0 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<s14b094fb * _Ptr;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > second;
}

struct TAG_CHARACTER_BLOCK_INFO {
  /* this+0x0 */ unsigned long GID;
  /* this+0x4 */ char[0x14] szExpireDate;
}

class std::vector<char const *,std::allocator<char const *> > {
  /* this+0x0 */ class std::allocator<char const *> allocator;
  /* this+0x4 */ const char * * _First;
  /* this+0x8 */ const char * * _Last;
  /* this+0xc */ const char * * _End;
}

class std::list<unsigned long,std::allocator<unsigned long> > {
  /* this+0x0 */ class std::allocator<unsigned long> allocator;
  /* this+0x4 */ struct std::list<unsigned long,std::allocator<unsigned long> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class XMLDocument {
  /* this+0x0 */ class XMLElement m_root;
  /* this+0x24 */ char * m_buf;
}

class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > {
  /* this+0x0 */ class std::allocator<ITEM_INFO> allocator;
  /* this+0x4 */ struct std::list<ITEM_INFO,std::allocator<ITEM_INFO> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<FRIEND_INFO,std::allocator<FRIEND_INFO> > {
  /* this+0x0 */ class std::allocator<FRIEND_INFO> allocator;
  /* this+0x4 */ struct std::list<FRIEND_INFO,std::allocator<FRIEND_INFO> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::vector<std::pair<char const *,enum TALKTYPE>,std::allocator<std::pair<char const *,enum TALKTYPE> > > {
  /* this+0x0 */ class std::allocator<std::pair<char const *,enum TALKTYPE> > allocator;
  /* this+0x4 */ struct std::pair<char const *,enum TALKTYPE> * _First;
  /* this+0x8 */ struct std::pair<char const *,enum TALKTYPE> * _Last;
  /* this+0xc */ struct std::pair<char const *,enum TALKTYPE> * _End;
}

class std::vector<std::pair<char const *,char const *>,std::allocator<std::pair<char const *,char const *> > > {
  /* this+0x0 */ class std::allocator<std::pair<char const *,char const *> > allocator;
  /* this+0x4 */ struct std::pair<char const *,char const *> * _First;
  /* this+0x8 */ struct std::pair<char const *,char const *> * _Last;
  /* this+0xc */ struct std::pair<char const *,char const *> * _End;
}

class std::vector<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator087911da {
  /* this+0x0 */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocabde66aac allocator;
  /* this+0x4 */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > * _First;
  /* this+0x8 */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > * _Last;
  /* this+0xc */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > * _End;
}

class std::vector<float,std::allocator<float> > {
  /* this+0x0 */ class std::allocator<float> allocator;
  /* this+0x4 */ float * _First;
  /* this+0x8 */ float * _Last;
  /* this+0xc */ float * _End;
}

class std::vector<std::pair<char const *,bool>,std::allocator<std::pair<char const *,bool> > > {
  /* this+0x0 */ class std::allocator<std::pair<char const *,bool> > allocator;
  /* this+0x4 */ struct std::pair<char const *,bool> * _First;
  /* this+0x8 */ struct std::pair<char const *,bool> * _Last;
  /* this+0xc */ struct std::pair<char const *,bool> * _End;
}

class std::vector<std::pair<int,enum TALKTYPE>,std::allocator<std::pair<int,enum TALKTYPE> > > {
  /* this+0x0 */ class std::allocator<std::pair<int,enum TALKTYPE> > allocator;
  /* this+0x4 */ struct std::pair<int,enum TALKTYPE> * _First;
  /* this+0x8 */ struct std::pair<int,enum TALKTYPE> * _Last;
  /* this+0xc */ struct std::pair<int,enum TALKTYPE> * _End;
}

class std::vector<std::pair<char const *,unsigned long>,std::allocator<std::pair<char const *,unsigned long> > > {
  /* this+0x0 */ class std::allocator<std::pair<char const *,unsigned long> > allocator;
  /* this+0x4 */ struct std::pair<char const *,unsigned long> * _First;
  /* this+0x8 */ struct std::pair<char const *,unsigned long> * _Last;
  /* this+0xc */ struct std::pair<char const *,unsigned long> * _End;
}

class std::vector<MAIL_LIST,std::allocator<MAIL_LIST> > {
  /* this+0x0 */ class std::allocator<MAIL_LIST> allocator;
  /* this+0x4 */ struct MAIL_LIST * _First;
  /* this+0x8 */ struct MAIL_LIST * _Last;
  /* this+0xc */ struct MAIL_LIST * _End;
}

struct MAIL_OPEN {
  /* this+0x0 */ unsigned long MailID;
  /* this+0x4 */ char[0x28] HEADER;
  /* this+0x2c */ char[0x18] FromName;
  /* this+0x44 */ long DeleteTime;
  /* this+0x48 */ unsigned long Money;
  /* this+0x4c */ int count;
  /* this+0x50 */ unsigned short ITID;
  /* this+0x52 */ unsigned short Type;
  /* this+0x54 */ unsigned char IsIdentified;
  /* this+0x55 */ unsigned char IsDamaged;
  /* this+0x56 */ unsigned char refiningLevel;
  /* this+0x57 */ struct EQUIPSLOTINFO slot;
}

struct MAIL_LIST {
  /* this+0x0 */ unsigned long MailID;
  /* this+0x4 */ char[0x28] HEADER;
  /* this+0x2c */ char isOpen;
  /* this+0x2d */ char[0x18] FromName;
  /* this+0x45 */ long DeleteTime;
}

class std::vector<AUCTION_ITEM_SEARCH_INFO,std::allocator<AUCTION_ITEM_SEARCH_INFO> > {
  /* this+0x0 */ class std::allocator<AUCTION_ITEM_SEARCH_INFO> allocator;
  /* this+0x4 */ struct AUCTION_ITEM_SEARCH_INFO * _First;
  /* this+0x8 */ struct AUCTION_ITEM_SEARCH_INFO * _Last;
  /* this+0xc */ struct AUCTION_ITEM_SEARCH_INFO * _End;
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MapPosInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<MapPosInfo> > {
  /* this+0x0 */ class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator9c63fa22 _Tr;
}

class std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> > {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> > _Tr;
}

struct CommonObject {
  /* this+0x0 */ class std::vector<char *,std::allocator<char *> > m_deleteList;
}

struct _SYSTEMTIME {
  /* this+0x0 */ unsigned short wYear;
  /* this+0x2 */ unsigned short wMonth;
  /* this+0x4 */ unsigned short wDayOfWeek;
  /* this+0x6 */ unsigned short wDay;
  /* this+0x8 */ unsigned short wHour;
  /* this+0xa */ unsigned short wMinute;
  /* this+0xc */ unsigned short wSecond;
  /* this+0xe */ unsigned short wMilliseconds;
}

struct HINSTANCE__ {
  /* this+0x0 */ int unused;
}

class CSkinMgr {
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_savedSkinName;
  /* this+0x14 */ int m_curSkinNum;
  /* this+0x18 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_skinNameList;
  /* this+0x28 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_skinFolderNameList;
  /* this+0x38 */ class std::vector<int,std::allocator<int> > m_isZipSkinExtractedList;
  /* this+0x48 */ class std::vector<int,std::allocator<int> > m_isZipSkinList;
}

class CFileMgr {
  /* this+0x0 */ class std::list<std::pair<CMemFile *,CGPak *>,std::allocator<std::pair<CMemFile *,CGPak *> > > m_pakList;
}

class std::list<std::pair<CMemFile *,CGPak *>,std::allocator<std::pair<CMemFile *,CGPak *> > > {
  /* this+0x0 */ class std::allocator<std::pair<CMemFile *,CGPak *> > allocator;
  /* this+0x4 */ struct std::list<std::pair<CMemFile *,CGPak *>,std::allocator<std::pair<CMemFile *,CGPak *> > >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class C3dDevice {
  /* this+0x0 */ struct HWND__ * m_hWnd;
  /* this+0x4 */ unsigned long m_dwRenderWidth;
  /* this+0x8 */ unsigned long m_dwRenderHeight;
  /* this+0xc */ struct tagRECT m_rcScreenRect;
  /* this+0x1c */ struct tagRECT m_rcViewportRect;
  /* this+0x2c */ struct IDirectDrawSurface7 * m_pddsFrontBuffer;
  /* this+0x30 */ struct IDirectDrawSurface7 * m_pddsBackBuffer;
  /* this+0x34 */ struct IDirectDrawSurface7 * m_pddsRenderTarget;
  /* this+0x38 */ struct IDirectDrawSurface7 * m_pddsZBuffer;
  /* this+0x3c */ struct IDirect3DDevice7 * m_pd3dDevice;
  /* this+0x40 */ struct IDirectDraw7 * m_pDD;
  /* this+0x44 */ struct IDirect3D7 * m_pD3D;
  /* this+0x48 */ struct _D3DDeviceDesc7 m_ddDeviceDesc;
  /* this+0x134 */ unsigned long m_dwDeviceMemType;
  /* this+0x138 */ struct _DDPIXELFORMAT m_ddpfZBuffer;
  /* this+0x158 */ struct _DDSURFACEDESC2 m_ddsdFrameBuffer;
  /* this+0x1d4 */ int m_bIsFullscreen;
  /* this+0x1d8 */ int m_bIsGDIObject;
  /* this+0x1dc */ int m_windowBitCount;
  /* this+0x1e0 */ struct IDirectDrawSurface7 * m_pddsRenderBackup;
  /* this+0x1e4 */ int m_pfRShiftR;
  /* this+0x1e8 */ int m_pfRShiftL;
  /* this+0x1ec */ int m_pfGShiftR;
  /* this+0x1f0 */ int m_pfGShiftL;
  /* this+0x1f4 */ int m_pfBShiftR;
  /* this+0x1f8 */ int m_pfBShiftL;
  /* this+0x1fc */ int m_pfAShiftR;
  /* this+0x200 */ int m_pfAShiftL;
  /* this+0x204 */ unsigned long m_pfBitCount;
  /* this+0x208 */ unsigned long m_pfRBitMask;
  /* this+0x20c */ unsigned long m_pfGBitMask;
  /* this+0x210 */ unsigned long m_pfBBitMask;
  /* this+0x214 */ unsigned long m_pfABitMask;
  /* this+0x218 */ unsigned long m_dwMinTextureWidth;
  /* this+0x21c */ unsigned long m_dwMinTextureHeight;
  /* this+0x220 */ unsigned long m_dwMaxTextureWidth;
  /* this+0x224 */ unsigned long m_dwMaxTextureHeight;
  /* this+0x228 */ unsigned long m_dwMaxTextureAspectRatio;
  /* this+0x22c */ unsigned char m_bSupportBltStretch;
  /* this+0x22d */ unsigned char m_bSupportTextureSurface;
  /* this+0x230 */ float m_fMaterialDiffuseR;
  /* this+0x234 */ float m_fMaterialDiffuseG;
  /* this+0x238 */ float m_fMaterialDiffuseB;
  /* this+0x23c */ float m_fMaterialAmbientR;
  /* this+0x240 */ float m_fMaterialAmbientG;
  /* this+0x244 */ float m_fMaterialAmbientB;
}

struct _DDSURFACEDESC2 {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ unsigned long dwHeight;
  /* this+0xc */ unsigned long dwWidth;
  /* this+0x10 */ long lPitch;
  /* this+0x10 */ unsigned long dwLinearSize;
  /* this+0x14 */ unsigned long dwBackBufferCount;
  /* this+0x14 */ unsigned long dwDepth;
  /* this+0x18 */ unsigned long dwMipMapCount;
  /* this+0x18 */ unsigned long dwRefreshRate;
  /* this+0x18 */ unsigned long dwSrcVBHandle;
  /* this+0x1c */ unsigned long dwAlphaBitDepth;
  /* this+0x20 */ unsigned long dwReserved;
  /* this+0x24 */ void * lpSurface;
  /* this+0x28 */ struct _DDCOLORKEY ddckCKDestOverlay;
  /* this+0x28 */ unsigned long dwEmptyFaceColor;
  /* this+0x30 */ struct _DDCOLORKEY ddckCKDestBlt;
  /* this+0x38 */ struct _DDCOLORKEY ddckCKSrcOverlay;
  /* this+0x40 */ struct _DDCOLORKEY ddckCKSrcBlt;
  /* this+0x48 */ struct _DDPIXELFORMAT ddpfPixelFormat;
  /* this+0x48 */ unsigned long dwFVF;
  /* this+0x68 */ struct _DDSCAPS2 ddsCaps;
  /* this+0x78 */ unsigned long dwTextureStage;
}

class CDC {
}

class CSurface {
  /* this+0x4 */ unsigned long m_w;
  /* this+0x8 */ unsigned long m_h;
  /* this+0xc */ struct IDirectDrawSurface7 * m_pddsSurface;
}

struct tagPALETTEENTRY {
  /* this+0x0 */ unsigned char peRed;
  /* this+0x1 */ unsigned char peGreen;
  /* this+0x2 */ unsigned char peBlue;
  /* this+0x3 */ unsigned char peFlags;
}

struct IDirectDraw7 {
}

struct IDirect3D7 {
}

struct IDirect3DDevice7 {
}

struct _D3DDeviceDesc7 {
  /* this+0x0 */ unsigned long dwDevCaps;
  /* this+0x4 */ struct _D3DPrimCaps dpcLineCaps;
  /* this+0x3c */ struct _D3DPrimCaps dpcTriCaps;
  /* this+0x74 */ unsigned long dwDeviceRenderBitDepth;
  /* this+0x78 */ unsigned long dwDeviceZBufferBitDepth;
  /* this+0x7c */ unsigned long dwMinTextureWidth;
  /* this+0x80 */ unsigned long dwMinTextureHeight;
  /* this+0x84 */ unsigned long dwMaxTextureWidth;
  /* this+0x88 */ unsigned long dwMaxTextureHeight;
  /* this+0x8c */ unsigned long dwMaxTextureRepeat;
  /* this+0x90 */ unsigned long dwMaxTextureAspectRatio;
  /* this+0x94 */ unsigned long dwMaxAnisotropy;
  /* this+0x98 */ float dvGuardBandLeft;
  /* this+0x9c */ float dvGuardBandTop;
  /* this+0xa0 */ float dvGuardBandRight;
  /* this+0xa4 */ float dvGuardBandBottom;
  /* this+0xa8 */ float dvExtentsAdjust;
  /* this+0xac */ unsigned long dwStencilCaps;
  /* this+0xb0 */ unsigned long dwFVFCaps;
  /* this+0xb4 */ unsigned long dwTextureOpCaps;
  /* this+0xb8 */ unsigned short wMaxTextureBlendStages;
  /* this+0xba */ unsigned short wMaxSimultaneousTextures;
  /* this+0xbc */ unsigned long dwMaxActiveLights;
  /* this+0xc0 */ float dvMaxVertexW;
  /* this+0xc4 */ struct _GUID deviceGUID;
  /* this+0xd4 */ unsigned short wMaxUserClipPlanes;
  /* this+0xd6 */ unsigned short wMaxVertexBlendMatrices;
  /* this+0xd8 */ unsigned long dwVertexProcessingCaps;
  /* this+0xdc */ unsigned long dwReserved1;
  /* this+0xe0 */ unsigned long dwReserved2;
  /* this+0xe4 */ unsigned long dwReserved3;
  /* this+0xe8 */ unsigned long dwReserved4;
}

struct tagRECT {
  /* this+0x0 */ long left;
  /* this+0x4 */ long top;
  /* this+0x8 */ long right;
  /* this+0xc */ long bottom;
}

struct _DDPIXELFORMAT {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ unsigned long dwFourCC;
  /* this+0xc */ unsigned long dwRGBBitCount;
  /* this+0xc */ unsigned long dwYUVBitCount;
  /* this+0xc */ unsigned long dwZBufferBitDepth;
  /* this+0xc */ unsigned long dwAlphaBitDepth;
  /* this+0xc */ unsigned long dwLuminanceBitCount;
  /* this+0xc */ unsigned long dwBumpBitCount;
  /* this+0xc */ unsigned long dwPrivateFormatBitCount;
  /* this+0x10 */ unsigned long dwRBitMask;
  /* this+0x10 */ unsigned long dwYBitMask;
  /* this+0x10 */ unsigned long dwStencilBitDepth;
  /* this+0x10 */ unsigned long dwLuminanceBitMask;
  /* this+0x10 */ unsigned long dwBumpDuBitMask;
  /* this+0x10 */ unsigned long dwOperations;
  /* this+0x14 */ unsigned long dwGBitMask;
  /* this+0x14 */ unsigned long dwUBitMask;
  /* this+0x14 */ unsigned long dwZBitMask;
  /* this+0x14 */ unsigned long dwBumpDvBitMask;
  /* this+0x14 */ struct _DDPIXELFORMAT::__unnamed::__unnamed MultiSampleCaps;
  /* this+0x18 */ unsigned long dwBBitMask;
  /* this+0x18 */ unsigned long dwVBitMask;
  /* this+0x18 */ unsigned long dwStencilBitMask;
  /* this+0x18 */ unsigned long dwBumpLuminanceBitMask;
  /* this+0x1c */ unsigned long dwRGBAlphaBitMask;
  /* this+0x1c */ unsigned long dwYUVAlphaBitMask;
  /* this+0x1c */ unsigned long dwLuminanceAlphaBitMask;
  /* this+0x1c */ unsigned long dwRGBZBitMask;
  /* this+0x1c */ unsigned long dwYUVZBitMask;
}

class CModeMgr {
  /* this+0x0 */ int m_loopCond;
  /* this+0x4 */ class CMode * m_curMode;
  /* this+0x8 */ char[0x28] m_curModeName;
  /* this+0x30 */ char[0x28] m_nextModeName;
  /* this+0x58 */ int m_curModeType;
  /* this+0x5c */ int m_nextModeType;
}

class CMode {
  /* this+0x4 */ int m_subMode;
  /* this+0x8 */ int m_subModeCnt;
  /* this+0xc */ int m_nextSubMode;
  /* this+0x10 */ int m_fadeInCount;
  /* this+0x14 */ int m_loopCond;
  /* this+0x18 */ int m_isConnected;
  /* this+0x1c */ class UITransBalloonText * m_helpBalloon;
  /* this+0x20 */ unsigned long m_helpBalloonTick;
  /* this+0x24 */ unsigned long m_mouseAnimStartTick;
  /* this+0x28 */ int m_isMouseLockOn;
  /* this+0x2c */ int m_screenShotNow;
  /* this+0x30 */ struct vector2d m_mouseSnapDiff;
  /* this+0x38 */ int m_cursorActNum;
  /* this+0x3c */ int m_cursorMotNum;
}

class CGameMode {
  /* this+0x4 */ int m_subMode;
  /* this+0x8 */ int m_subModeCnt;
  /* this+0xc */ int m_nextSubMode;
  /* this+0x10 */ int m_fadeInCount;
  /* this+0x14 */ int m_loopCond;
  /* this+0x18 */ int m_isConnected;
  /* this+0x1c */ class UITransBalloonText * m_helpBalloon;
  /* this+0x20 */ unsigned long m_helpBalloonTick;
  /* this+0x24 */ unsigned long m_mouseAnimStartTick;
  /* this+0x28 */ int m_isMouseLockOn;
  /* this+0x2c */ int m_screenShotNow;
  /* this+0x30 */ struct vector2d m_mouseSnapDiff;
  /* this+0x38 */ int m_cursorActNum;
  /* this+0x3c */ int m_cursorMotNum;
  /* this+0x40 */ int m_areaLeft;
  /* this+0x44 */ int m_areaRight;
  /* this+0x48 */ int m_areaTop;
  /* this+0x4c */ int m_areaBottom;
  /* this+0x50 */ char[0x28] m_rswName;
  /* this+0x78 */ char[0x3c] m_minimapBmpName;
  /* this+0xb4 */ class CWorld * m_world;
  /* this+0xb8 */ class CView * m_view;
  /* this+0xbc */ class CMousePointer * m_mousePointer;
  /* this+0xc0 */ unsigned long m_leftBtnClickTick;
        /* this+0xc4 */ int m_oldMouseX;
  /* this+0xc8 */ int m_oldMouseY;
  /* this+0xcc */ int m_rBtnClickX;
  /* this+0xd0 */ int m_rBtnClickY;
  /* this+0xd4 */ unsigned long m_lastPcGid;
  /* this+0xd8 */ unsigned long m_lastMonGid;
  /* this+0xdc */ unsigned long m_lastLockOnMonGid;
  /* this+0xe0 */ int m_isAutoMoveClickOn;
  /* this+0xe4 */ int m_isWaitingWhisperSetting;
  /* this+0xe8 */ int m_isWaitingEnterRoom;
  /* this+0xec */ int m_isWaitingAddExchangeItem;
  /* this+0xf0 */ unsigned long m_waitingWearEquipAck;
  /* this+0xf4 */ unsigned long m_waitingTakeoffEquipAck;
  /* this+0xf8 */ int m_isReqUpgradeSkillLevel;
  /* this+0xfc */ int m_exchangeItemCnt;
  /* this+0x100 */ int m_isWaitingCancelExchangeItem;
  /* this+0x104 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_refuseWhisperName;
  /* this+0x114 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_streamFileName;
  /* this+0x124 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_lastExchangeCharacterName;
  /* this+0x134 */ class std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> > m_actorNameList;
  /* this+0x144 */ class std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> > m_actorNameReqTimer;
  /* this+0x154 */ class std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> > m_actorNameListByGID;
  /* this+0x164 */ class std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> > m_actorNameByGIDReqTimer;
  /* this+0x174 */ class std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> > m_guildMemberStatusCache;
  /* this+0x184 */ class std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> > m_actorPosList;
  /* this+0x194 */ class std::list<unsigned long,std::allocator<unsigned long> > m_pickupReqItemNaidList;
  /* this+0x1a0 */ class std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> > m_aidList;
  /* this+0x1b0 */ class std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> > m_partyPosList;
  /* this+0x1c0 */ class std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> > m_guildPosList;
  /* this+0x1d0 */ class std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> > m_compassPosList;
  /* this+0x1e0 */ class std::vector<int,std::allocator<int> > m_menuIdList;
  /* this+0x1f0 */ class std::list<unsigned long,std::allocator<unsigned long> > m_visibleTrapList;
  /* this+0x1fc */ class std::list<unsigned long,std::allocator<unsigned long> > m_emblemReqGdidQueue;
  /* this+0x208 */ unsigned long m_lastEmblemReqTick;
  /* this+0x20c */ unsigned long m_lastNameWaitingListTick;
  /* this+0x210 */ class std::vector<PLAY_WAVE_INFO,std::allocator<PLAY_WAVE_INFO> > m_playWaveList;
  /* this+0x220 */ class std::vector<unsigned long,std::allocator<unsigned long> > m_KillerList;
  /* this+0x230 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_lastWhisperMenuCharacterName;
  /* this+0x240 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_lastWhisper;
  /* this+0x250 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_lastWhisperName;
  /* this+0x260 */ int m_noMove;
  /* this+0x264 */ unsigned long m_noMoveStartTick;
  /* this+0x268 */ int m_isOnQuest;
  /* this+0x26c */ int m_isPlayerDead;
  /* this+0x270 */ int m_canRotateView;
  /* this+0x274 */ int m_hasViewPoint;
  /* this+0x278 */ short[0x9] ViewPointData;
  /* this+0x28c */ int m_receiveSyneRequestTime;
  /* this+0x290 */ unsigned long m_syncRequestTime;
  /* this+0x294 */ unsigned long m_usedCachesUnloadTick;
  /* this+0x298 */ unsigned long m_reqEmotionTick;
  /* this+0x29c */ unsigned long m_reqTickChatRoom;
  /* this+0x2a0 */ unsigned long m_reqTickMerchantShop;
  /* this+0x2a4 */ int m_isReqEmotion;
  /* this+0x2a8 */ float m_fixedLongitude;
  /* this+0x2ac */ unsigned long m_lastCouplePacketAid;
  /* this+0x2b0 */ unsigned long m_lastCouplePacketGid;
  /* this+0x2b4 */ char[0x18] m_CoupleName;
  /* this+0x2cc */ class UINameBalloonText * m_nameBalloon;
  /* this+0x2d0 */ class UINameBalloonText * m_targetNameBalloon;
  /* this+0x2d4 */ class UITransBalloonText * m_broadcastBalloon;
  /* this+0x2d8 */ class UIPlayerGage * m_playerGage;
  /* this+0x2dc */ class UITransBalloonText * m_skillNameBalloon;
  /* this+0x2e0 */ class UITransBalloonText * m_skillMsgBalloon;
  /* this+0x2e4 */ class UITransBalloonText * m_skillUsedMsgBalloon;
  /* this+0x2e8 */ unsigned long m_skillUsedTick;
  /* this+0x2ec */ unsigned long m_broadCastTick;
  /* this+0x2f0 */ int m_nameDisplayed;
  /* this+0x2f4 */ int m_nameDisplayed2;
  /* this+0x2f8 */ int m_waitingUseItemAck;
  /* this+0x2fc */ int m_waitingItemThrowAck;
  /* this+0x300 */ int m_waitingReqStatusAck;
  /* this+0x304 */ unsigned long m_nameActorAid;
  /* this+0x308 */ unsigned long m_lastNaid;
  /* this+0x30c */ unsigned long m_menuTargetAID;
  /* this+0x310 */ int m_nameBalloonWidth;
  /* this+0x314 */ int m_nameBalloonHeight;
  /* this+0x318 */ int m_dragType;
  /* this+0x31c */ struct DRAG_INFO m_dragInfo;
  /* this+0x384 */ struct ChatRoomInfo m_lastChatroomInfo;
  /* this+0x3b4 */ struct SKILL_USE_INFO m_skillUseInfo;
  /* this+0x3c4 */ struct SHOW_IMAGE_INFO m_showImageInfo;
  /* this+0x3d8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_lastChat;
  /* this+0x3e8 */ int m_sameChatRepeatCnt;
  /* this+0x3ec */ int m_numNotifyTime;
  /* this+0x3f0 */ int m_isCheckGndAlpha;
  /* this+0x3f4 */ int m_lastCardItemIndex;
  /* this+0x3f8 */ int m_SkillBallonSkillId;
  /* this+0x3fc */ unsigned long m_nameBalloonType;
  /* this+0x400 */ unsigned long m_showTimeStartTick;
  /* this+0x404 */ int m_recordChatNum;
  /* this+0x408 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> >[0xb] m_recordChat;
  /* this+0x4b8 */ unsigned long[0xb] m_recordChatTime;
  /* this+0x4e4 */ int m_strikeNum;
  /* this+0x4e8 */ unsigned long[0x3] m_strikeTime;
  /* this+0x4f4 */ unsigned long[0x6] m_doritime;
  /* this+0x50c */ int m_isCtrlLock;
  /* this+0x510 */ int m_isUseYgdrasil;
  /* this+0x514 */ int m_isMakeYgdrasil;
  /* this+0x518 */ int m_autoSaveChatCnt;
  /* this+0x51c */ struct CellPos m_posOfBossMon;
  /* this+0x524 */ unsigned char m_isBossAlarm;
  /* this+0x525 */ unsigned char m_onCopyName;
  /* this+0x528 */ class CScheduler m_scheduler;
  /* this+0x53c */ unsigned char[0x6] m_SiyeonStatus;
  /* this+0x544 */ int m_MouseRollCount;
  /* this+0x548 */ int m_MouseRollMax;
}

class CLoginMode {
  /* this+0x4 */ int m_subMode;
  /* this+0x8 */ int m_subModeCnt;
  /* this+0xc */ int m_nextSubMode;
  /* this+0x10 */ int m_fadeInCount;
  /* this+0x14 */ int m_loopCond;
  /* this+0x18 */ int m_isConnected;
  /* this+0x1c */ class UITransBalloonText * m_helpBalloon;
  /* this+0x20 */ unsigned long m_helpBalloonTick;
  /* this+0x24 */ unsigned long m_mouseAnimStartTick;
  /* this+0x28 */ int m_isMouseLockOn;
  /* this+0x2c */ int m_screenShotNow;
  /* this+0x30 */ struct vector2d m_mouseSnapDiff;
  /* this+0x38 */ int m_cursorActNum;
  /* this+0x3c */ int m_cursorMotNum;
  /* this+0x40 */ int[0x8] m_charParam;
  /* this+0x60 */ char[0x40] m_makingCharName;
  /* this+0xa0 */ char[0x80] m_emaiAddress;
  /* this+0x120 */ char[0x40] m_userPassword;
  /* this+0x160 */ char[0x40] m_userId;
  /* this+0x1a0 */ int m_numServer;
  /* this+0x1a4 */ int m_serverSelected;
  /* this+0x1a8 */ int m_numChar;
  /* this+0x1ac */ unsigned long m_subModeStartTime;
  /* this+0x1b0 */ struct SERVER_ADDR[0x64] m_serverInfo;
  /* this+0xe30 */ struct CHARACTER_INFO[0xc] m_charInfo;
  /* this+0x1340 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_wallPaperBmpName;
  /* this+0x1350 */ struct BILLING_INFO m_billingInfo;
  /* this+0x1364 */ unsigned long m_syncRequestTime;
  /* this+0x1368 */ class UIWaitWnd * m_wndWait;
  /* this+0x136c */ class std::vector<accountInfo,std::allocator<accountInfo> > m_accountInfo;
  /* this+0x137c */ class std::vector<accountInfo,std::allocator<accountInfo> > m_accountInfo2;
  /* this+0x138c */ unsigned char m_multiLang;
  /* this+0x1390 */ int m_nSelectedAccountNo;
  /* this+0x1394 */ int m_nSelectedAccountNo2;
  /* this+0x1398 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strErrorInfo;
}

class CMouse {
  /* this+0x0 */ struct IDirectInputA * m_lpdi;
  /* this+0x4 */ struct IDirectInputDeviceA * m_pMouse;
  /* this+0x8 */ void * m_hevtMouse;
  /* this+0xc */ int m_xDelta;
  /* this+0x10 */ int m_yDelta;
  /* this+0x14 */ int m_xPos;
  /* this+0x18 */ int m_yPos;
  /* this+0x1c */ int m_wheel;
  /* this+0x20 */ int[0x3] m_oldBtnState;
  /* this+0x2c */ enum EBtnState[0x3] m_btnState;
  /* this+0x38 */ int[0x3] m_dblclkCnt;
  /* this+0x44 */ int m_dblclkTime;
  /* this+0x48 */ int m_bSwapButton;
}

struct IDirectInputA {
}

struct IDirectInputDeviceA {
}

class C3dGrannyBoneRes {
  /* this+0x0 */ float m_ProjectZ;
  /* this+0x4 */ struct GrannyScene m_Scene;
  /* this+0x280 */ struct granny_animation *[0x14][0x64] m_Animation;
}

struct granny_animation {
  /* this+0x0 */ char * Name;
  /* this+0x4 */ float Duration;
  /* this+0x8 */ float TimeStep;
  /* this+0xc */ int TrackGroupCount;
  /* this+0x10 */ struct granny_track_group * * TrackGroups;
}

struct GrannyScene {
  /* this+0x0 */ struct granny_camera Camera;
  /* this+0x14c */ struct granny_file * LoadedFile;
  /* this+0x150 */ int TextureCount;
  /* this+0x154 */ struct GrannyTexture * Textures;
  /* this+0x158 */ int ModelCount;
  /* this+0x15c */ struct GrannyModel * Model;
  /* this+0x160 */ int MaxBoneCount;
  /* this+0x164 */ struct granny_local_pose * SharedLocalPose;
  /* this+0x168 */ int MaxMutableVertexBufferSize;
  /* this+0x16c */ int MaxMutableVertexBufferCount;
  /* this+0x170 */ int MutableVertexBufferIndex;
  /* this+0x174 */ struct granny_pnt332_vertex * MatVer;
  /* this+0x178 */ char[0x104] BaseFileName;
}

struct GrannyModel {
  /* this+0x0 */ struct granny_model_instance * GrannyInstance;
  /* this+0x4 */ struct granny_world_pose * WorldPose;
  /* this+0x8 */ int MeshCount;
  /* this+0xc */ struct GrannyMesh * Meshes;
}

struct granny_model {
  /* this+0x0 */ char * Name;
  /* this+0x4 */ struct granny_skeleton * Skeleton;
  /* this+0x8 */ struct granny_transform InitialPlacement;
  /* this+0x4c */ int MeshBindingCount;
  /* this+0x50 */ struct granny_model_mesh_binding * MeshBindings;
}

struct GrannyMesh {
  /* this+0x0 */ struct granny_mesh * Mesh;
  /* this+0x4 */ struct granny_mesh_binding * Binding;
  /* this+0x8 */ struct granny_mesh_deformer * Deformer;
  /* this+0xc */ unsigned short * VerIdx;
  /* this+0x10 */ unsigned char * Vertices;
  /* this+0x14 */ int TextureCount;
  /* this+0x18 */ struct GrannyTexture * * TextureReferences;
}

struct granny_mesh {
  /* this+0x0 */ char * Name;
  /* this+0x4 */ struct granny_vertex_data * PrimaryVertexData;
  /* this+0x8 */ int MorphTargetCount;
  /* this+0xc */ struct granny_morph_target * MorphTargets;
  /* this+0x10 */ struct granny_tri_topology * PrimaryTopology;
  /* this+0x14 */ int MaterialBindingCount;
  /* this+0x18 */ struct granny_material_binding * MaterialBindings;
  /* this+0x1c */ int BoneBindingCount;
  /* this+0x20 */ struct granny_bone_binding * BoneBindings;
  /* this+0x24 */ struct granny_variant ExtendedData;
}

struct granny_model_instance {
}

struct granny_file {
  /* this+0x0 */ unsigned char IsByteReversed;
  /* this+0x4 */ struct granny_grn_file_header * Header;
  /* this+0x8 */ int SectionCount;
  /* this+0xc */ void * * Sections;
  /* this+0x10 */ unsigned char * Marshalled;
  /* this+0x14 */ void * ConversionBuffer;
}

class UIWindowMgr {
  /* this+0x4 */ int m_chatWndX;
  /* this+0x8 */ int m_chatWndY;
  /* this+0xc */ int m_chatWndHeight;
  /* this+0x10 */ int m_chatWndShow;
  /* this+0x14 */ int m_gronMsnWndShow;
  /* this+0x18 */ int m_gronMsgWndShow;
  /* this+0x1c */ int m_chatWndStatus;
  /* this+0x20 */ float m_miniMapZoomFactor;
  /* this+0x24 */ unsigned long m_miniMapArgb;
  /* this+0x28 */ int m_isDrawCompass;
  /* this+0x2c */ int m_isDragAll;
  /* this+0x30 */ int m_conversionMode;
  /* this+0x34 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x40 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_quitWindow;
  /* this+0x4c */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_nameWaitingList;
  /* this+0x58 */ class std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> > m_snapInfo;
  /* this+0x68 */ class UIWindow * m_captureWindow;
  /* this+0x6c */ class UIWindow * m_editWindow;
  /* this+0x70 */ class UIWindow * m_modalWindow;
  /* this+0x74 */ class UIWindow * m_lastHitWindow;
  /* this+0x78 */ class UILoadingWnd * m_loadingWnd;
  /* this+0x7c */ class UIMinimapZoomWnd * m_minimapZoomWnd;
  /* this+0x80 */ class UIStatusWnd * m_statusWnd;
  /* this+0x84 */ class UINewChatWnd * m_chatWnd;
  /* this+0x88 */ class UILoginWnd * m_loginWnd;
  /* this+0x8c */ class UIItemWnd * m_itemWnd;
  /* this+0x90 */ class UIQuestWnd * m_questWnd;
  /* this+0x94 */ class UIBasicInfoWnd * m_basicInfoWnd;
  /* this+0x98 */ class UIEquipWnd * m_equipWnd;
  /* this+0x9c */ class UIOptionWnd * m_optionWnd;
  /* this+0xa0 */ class UIShortCutWnd * m_shortCutWnd;
  /* this+0xa4 */ class UIItemDropCntWnd * m_itemDropCntWnd;
  /* this+0xa8 */ class UISayDialogWnd * m_sayDialogWnd;
  /* this+0xac */ class UIChooseWnd * m_chooseWnd;
  /* this+0xb0 */ class UIItemIdentifyWnd * m_itemIdentifyWnd;
  /* this+0xb4 */ class UIItemRepairWnd * m_itemRepairWnd;
  /* this+0xb8 */ class UIWeaponRefineWnd * m_weaponRefineWnd;
  /* this+0xbc */ class UIItemCompositionWnd * m_itemCompositionWnd;
  /* this+0xc0 */ class UIChooseWarpWnd * m_chooseWarpWnd;
  /* this+0xc4 */ class UIMenuWnd * m_menu;
  /* this+0xc8 */ class UIComboBoxWnd * m_comboBoxWnd;
  /* this+0xcc */ class UIItemCollectionWnd * m_itemCollectionWnd;
  /* this+0xd0 */ class UICombinedCardItemCollectionWnd * m_combinedCardItemCollectionWnd;
  /* this+0xd4 */ class UIItemParamChangeDisplayWnd * m_itemParamChangeDisplayWnd;
  /* this+0xd8 */ class UISkillDescribeWnd * m_skillDescribeWnd;
  /* this+0xdc */ class UIQuestDetailWnd * m_questDetailWnd;
  /* this+0xe0 */ class UIQuitWnd * m_quitWnd;
  /* this+0xe4 */ class UIRestartWnd * m_restartWnd;
  /* this+0xe8 */ class UICardItemIllustWnd * m_cardItemIllustWnd;
  /* this+0xec */ class UINotifyLevelUpWnd * m_notifyLevelUpWnd;
  /* this+0xf0 */ class UINotifyJobLevelUpWnd * m_notifyJobLevelUpWnd;
  /* this+0xf4 */ class UINotifyQuestWnd * m_notifyQuestWnd;
  /* this+0xf8 */ class UIItemShopWnd * m_itemShopWnd;
  /* this+0xfc */ class UIItemPurchaseWnd * m_itemPurchaseWnd;
  /* this+0x100 */ class UIItemSellWnd * m_itemSellWnd;
  /* this+0x104 */ class UIChooseSellBuyWnd * m_chooseSellBuyWnd;
  /* this+0x108 */ class UIChatRoomMakeWnd * m_chatRoomMakeWnd;
  /* this+0x10c */ class UIChatRoomChangeWnd * m_chatRoomChangeWnd;
  /* this+0x110 */ class UIChatRoomWnd * m_chatRoomWnd;
  /* this+0x114 */ class UIPasswordWnd * m_passwordWnd;
  /* this+0x118 */ class UIExchangeWnd * m_exchangeWnd;
  /* this+0x11c */ class UIExchangeAcceptWnd * m_exchangeAcceptWnd;
  /* this+0x120 */ class UIItemStoreWnd * m_itemStoreWnd;
  /* this+0x124 */ class UISkillListWnd * m_skillListWnd;
  /* this+0x128 */ class UIMessengerGroupWnd * m_messengerGroupWnd;
  /* this+0x12c */ class UIJoinPartyAcceptWnd * m_joinPartyAcceptWnd;
  /* this+0x130 */ class UICoupleAcceptWnd * m_CoupleAcceptWnd;
  /* this+0x134 */ class UIStarPlaceAcceptWnd * m_StarPlaceAcceptWnd;
  /* this+0x138 */ class UIYourItemWnd * m_YourItemWnd;
  /* this+0x13c */ class UIBabyAcceptWnd * m_BabyAcceptWnd;
  /* this+0x140 */ class UIBabyAcceptWnd2 * m_BabyAcceptWnd2;
  /* this+0x144 */ class UIJoinGuildAcceptWnd * m_joinGuildAcceptWnd;
  /* this+0x148 */ class UIAllyGuildAcceptWnd * m_allyGuildAcceptWnd;
  /* this+0x14c */ class UITipOfTheDayWnd * m_tipOfTheDayWnd;
  /* this+0x150 */ class UIMerchantItemWnd * m_merchantItemWnd;
  /* this+0x154 */ class UIMerchantMirrorItemWnd * m_merchantMirrorItemWnd;
  /* this+0x158 */ class UIMerchantShopMakeWnd * m_merchantShopMakeWnd;
  /* this+0x15c */ class UIMerchantItemShopWnd * m_merchantItemShopWnd;
  /* this+0x160 */ class UIMerchantItemMyShopWnd * m_merchantItemMyShopWnd;
  /* this+0x164 */ class UIMerchantItemPurchaseWnd * m_merchantItemPurchaseWnd;
  /* this+0x168 */ class UIPartySettingWnd * m_partySettingWnd;
  /* this+0x16c */ class UISkillNameChangeWnd * m_skillNameChangeWnd;
  /* this+0x170 */ class UINpcEditDialogWnd * m_npcEditDialogWnd;
  /* this+0x174 */ class UINpcTextEditDialogWnd * m_npcTextEditDialogWnd;
  /* this+0x178 */ class UIDetailLevelWnd * m_detailLevelWnd;
  /* this+0x17c */ class UINotifyItemObtainWnd * m_notifyItemObtainWnd;
  /* this+0x180 */ class UIGuildInfoManageWnd * m_guildInfoManageWnd;
  /* this+0x184 */ class UIGuildMemberManageWnd * m_guildMemberManageWnd;
  /* this+0x188 */ class UIGuildPositionManageWnd * m_guildPositionManageWnd;
  /* this+0x18c */ class UIGuildSkillWnd * m_guildSkillWnd;
  /* this+0x190 */ class UIGuildBanishedMemberWnd * m_guildBanishedMemberWnd;
  /* this+0x194 */ class UIGuildNoticeWnd * m_guildNoticeWnd;
  /* this+0x198 */ class UIGuildTotalInfoWnd * m_guildTotalInfoWnd;
  /* this+0x19c */ class UIFriendOptionWnd * m_friendOptionWnd;
  /* this+0x1a0 */ class UIGuildLeaveReasonDescWnd * m_guildLeaveReasonDescWnd;
  /* this+0x1a4 */ class UIGuildBanReasonDescWnd * m_guildBanReasonDescWnd;
  /* this+0x1a8 */ class UIIllustWnd * m_illustWnd;
  /* this+0x1ac */ class UIMakeTargetListWnd * m_metalListWnd;
  /* this+0x1b0 */ class UIMakeTargetProcessWnd * m_metalProcessWnd;
  /* this+0x1b4 */ class UIMakeTargetResultWnd * m_metalResultWnd;
  /* this+0x1b8 */ class UIEmotionWnd * m_emotionWnd;
  /* this+0x1bc */ class UIEmotionListWnd * m_emotionListWnd;
  /* this+0x1c0 */ class UIProhibitListWnd * m_prohibitListWnd;
  /* this+0x1c4 */ class UIPetInfoWnd * m_petInfoWnd;
  /* this+0x1c8 */ class UIPetEggListWnd * m_selectPetEggWnd;
  /* this+0x1cc */ class UIPetTamingDeceiveWnd * m_petTamingDeceiveWnd;
  /* this+0x1d0 */ class UIMakingArrowListWnd * m_makingArrowListWnd;
  /* this+0x1d4 */ class UISelectCartWnd * m_selectCartWnd;
  /* this+0x1d8 */ class UISpellListWnd * m_spellListWnd;
  /* this+0x1dc */ class UICandidateWnd * m_candidateWnd;
  /* this+0x1e0 */ class UICompositionWnd * m_compositionWnd;
  /* this+0x1e4 */ class UIKeyStrokeWnd * m_keyStrokeWnd;
  /* this+0x1e8 */ class UIBookWnd * m_bookWnd;
  /* this+0x1ec */ class UIJoinFriendAcceptWnd * m_joinFriendAcceptWnd;
  /* this+0x1f0 */ class UICommandListWnd * m_commandListWnd;
  /* this+0x1f4 */ class UIHomunInfoWnd * m_homunInfoWnd;
  /* this+0x1f8 */ class UISkillListWnd * m_homunSkillListWnd;
  /* this+0x1fc */ class UIMerInfoWnd * m_merInfoWnd;
  /* this+0x200 */ class UISkillListWnd * m_merSkillListWnd;
  /* this+0x204 */ class UIAutoMessageWnd * m_autoMessageWnd;
  /* this+0x208 */ class UIMailListWnd * m_mailListWnd;
  /* this+0x20c */ class UIMailViewWnd * m_mailViewWnd;
  /* this+0x210 */ class UIAuctionWnd * m_auctionWnd;
  /* this+0x214 */ class UIAuctionMsgWnd * m_auctionMsgWnd;
  /* this+0x218 */ class UIImgMenuWnd * m_imgMenuWnd;
  /* this+0x21c */ class UISelectCharWnd * m_selectCharWnd;
  /* this+0x220 */ class UISelCharForUServerWnd * m_selCharForUServerWnd;
  /* this+0x224 */ class UIChangeNameWnd * m_changeNameWnd;
  /* this+0x228 */ class UIRebirthWnd * m_rebirthWnd;
  /* this+0x22c */ class UISubChatHisWnd * m_subChatWndST;
  /* this+0x230 */ class UISubChatHisWnd * m_subChatWndBT;
  /* this+0x234 */ class UIBattleMsgOptionWnd * m_battleMsgOpionWnd;
  /* this+0x238 */ class UISubChatMiniWnd * m_subChatMiniWnd;
  /* this+0x23c */ unsigned char m_chatWndStickOn;
  /* this+0x23d */ unsigned char m_onStSubChat;
  /* this+0x23e */ unsigned char m_onBtSubChat;
  /* this+0x240 */ class UIMemorialDunWnd * m_memorialDunWnd;
  /* this+0x244 */ class UIEquipWnd * m_otherUserEquipWnd;
  /* this+0x248 */ class UIRoMapWnd * m_roMapWnd;
  /* this+0x24c */ int m_lastMouseX;
  /* this+0x250 */ int m_lastMouseY;
  /* this+0x254 */ int m_modalResult;
  /* this+0x258 */ class CSurface * m_wallpaperSurface;
  /* this+0x25c */ int m_w;
  /* this+0x260 */ int m_h;
  /* this+0x264 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_wallPaperBmpName;
  /* this+0x274 */ short T_Logo_X;
  /* this+0x276 */ short T_Logo_Y;
  /* this+0x278 */ short T_Char_X;
  /* this+0x27a */ short T_Char_Y;
  /* this+0x27c */ short T_Tape_Y;
  /* this+0x27e */ short T_12Age_X;
  /* this+0x280 */ short T_12Age_Y;
  /* this+0x282 */ short T_Grav_X;
  /* this+0x284 */ short T_Grav_Y;
  /* this+0x286 */ short T_Intel_X;
  /* this+0x288 */ short T_Intel_Y;
  /* this+0x28a */ char T_CLICK;
  /* this+0x28c */ class std::list<StringAndColor,std::allocator<StringAndColor> > m_chatWndHistory;
  /* this+0x298 */ class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_chatWndMyTalk;
  /* this+0x2a4 */ class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_chatWndWhisper;
  /* this+0x2b0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_chatMsg;
  /* this+0x2c0 */ int m_chatWndCurHis;
  /* this+0x2c4 */ int m_chatWndWhisperCurHis;
  /* this+0x2c8 */ int m_isInvalidatedByForce;
  /* this+0x2cc */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UIWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<UIWindow *> > m_whisperNameWindow;
  /* this+0x2dc */ struct BasicInfoWndInfo basicInfoWndInfo;
  /* this+0x2ec */ struct ItemWndInfo itemWndInfo;
  /* this+0x314 */ struct QuestWndInfo questWndInfo;
  /* this+0x330 */ struct StatusWndInfo statusWndInfo;
  /* this+0x348 */ struct EquipWndInfo equipWndInfo;
  /* this+0x360 */ struct OptionWndInfo optionWndInfo;
  /* this+0x378 */ struct ShortenItemWndInfo shortenItemWndInfo;
  /* this+0x38c */ struct ShortenSkillWndInfo shortenSkillWndInfo;
  /* this+0x39c */ struct SayDialogWndInfo sayDialogWndInfo;
  /* this+0x3ac */ struct ChooseWndInfo chooseWndInfo;
  /* this+0x3bc */ struct ChatRoomWndInfo chatRoomWndInfo;
  /* this+0x3cc */ struct ItemStoreWndInfo itemStoreWndInfo;
  /* this+0x3dc */ struct ItemShopWndInfo itemShopWndInfo;
  /* this+0x3ec */ struct ItemSellWndInfo itemSellWndInfo;
  /* this+0x3fc */ struct ItemPurchaseWndInfo itemPurchaseWndInfo;
  /* this+0x40c */ struct MessengerGroupWndInfo messengerGroupWndInfo;
  /* this+0x424 */ struct ShortCutWndInfo shortCutWndInfo;
  /* this+0x438 */ struct ExchangeAcceptWndInfo exchangeAcceptWndInfo;
  /* this+0x448 */ struct SkillListWndInfo skillListWndInfo;
  /* this+0x45c */ struct MerchantItemWndInfo merchantItemWndInfo;
  /* this+0x470 */ struct MerchantMirrorItemWndInfo merchantMirrorItemWndInfo;
  /* this+0x480 */ struct MerchantShopMakeWndInfo merchantShopMakeWndInfo;
  /* this+0x490 */ struct MerchantItemShopWndInfo merchantItemShopWndInfo;
  /* this+0x4a0 */ struct MerchantItemMyShopWndInfo merchantItemMyShopWndInfo;
  /* this+0x4b0 */ struct MerchantItemPurchaseWndInfo merchantItemPurchaseWndInfo;
  /* this+0x4c0 */ struct ItemCollectionWndInfo itemCollectionWndInfo;
  /* this+0x4d0 */ struct CombinedCardItemCollectionWndInfo combinedCardItemCollectionWndInfo;
  /* this+0x4e0 */ struct ItemParamChangeDisplayWndInfo itemParamChangeDisplayWndInfo;
  /* this+0x4f0 */ struct PartySettingWndInfo partySettingWndInfo;
  /* this+0x500 */ struct DetailLevelWndInfo detailLevelWndInfo;
  /* this+0x510 */ struct GuildWndInfo guildWndInfo;
  /* this+0x524 */ struct WhisperWndInfo whisperWndInfo;
  /* this+0x534 */ struct WhisperListWndInfo whisperListWndInfo;
  /* this+0x548 */ struct FriendOptionWndInfo friendOptionWndInfo;
  /* this+0x558 */ struct ItemCompositionWndInfo itemCompositionWndInfo;
  /* this+0x568 */ struct ItemIdentifyWndInfo itemIdentifyWndInfo;
  /* this+0x578 */ struct EmotionWndInfo emotionWndInfo;
  /* this+0x588 */ struct EmotionListWndInfo emotionListWndInfo;
  /* this+0x598 */ struct PetInfoWndInfo petInfoWndInfo;
  /* this+0x5a8 */ struct HomunInfoWndInfo homunInfoWndInfo;
  /* this+0x5b8 */ struct SkillListWndInfo homunSkillListWndInfo;
  /* this+0x5cc */ struct MerInfoWndInfo merInfoWndInfo;
  /* this+0x5dc */ struct SkillListWndInfo merSkillListWndInfo;
  /* this+0x5f0 */ struct SubChatWndInfo subChatWndStInfo;
  /* this+0x600 */ struct SubChatWndInfo subChatWndBtInfo;
}

class UIWindow {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
}

class CBitmapRes {
  /* this+0x4 */ int m_lockCnt;
  /* this+0x8 */ unsigned long m_timeStamp;
  /* this+0xc */ int m_extIndex;
  /* this+0x10 */ class CHash m_fName;
  /* this+0x110 */ int m_isAlpha;
  /* this+0x114 */ int m_width;
  /* this+0x118 */ int m_height;
  /* this+0x11c */ unsigned long * m_data;
}

struct DRAG_INFO {
  /* this+0x0 */ enum ENUM_DRAGTYPE m_dragType;
  /* this+0x4 */ int m_dragItemIndex;
  /* this+0x8 */ int m_dragItemPrice;
  /* this+0xc */ int m_dragItemRealPrice;
  /* this+0x10 */ int m_numDragItem;
  /* this+0x14 */ int m_slotNum;
  /* this+0x18 */ int m_dragItemType;
  /* this+0x1c */ int m_refiningLevel;
  /* this+0x20 */ unsigned char m_isIdentified;
  /* this+0x24 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_dragSprName;
  /* this+0x34 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_dragItemName;
  /* this+0x44 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_skillName;
  /* this+0x54 */ int m_skillUseLevel;
  /* this+0x58 */ int[0x4] m_slot;
}

class UIFrameWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
}

class UISayDialogWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UITextViewer * m_textViewer;
  /* this+0x64 */ class std::list<UIBitmapButton *,std::allocator<UIBitmapButton *> > m_buttonList;
  /* this+0x70 */ class std::list<UIBitmapButton *,std::allocator<UIBitmapButton *> > m_buttonListDeleted;
  /* this+0x7c */ int m_target;
  /* this+0x80 */ unsigned long m_naid;
  /* this+0x84 */ struct SayDialogWndInfo * m_info;
  /* this+0x88 */ int m_bClearTextViewer;
}

class UIChooseWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_index;
  /* this+0x64 */ class std::vector<int,std::allocator<int> > m_itemIndex;
  /* this+0x74 */ class UIListBox * m_choostList;
  /* this+0x78 */ unsigned long m_naid;
  /* this+0x7c */ struct ChooseWndInfo * m_info;
}

class UIItemIdentifyWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIScrollBar * m_scrollBar;
  /* this+0x64 */ int m_viewOffset;
  /* this+0x68 */ int m_curItem;
  /* this+0x6c */ int m_itemHorzNum;
  /* this+0x70 */ int m_itemVertNum;
  /* this+0x74 */ int m_vertScrEnabled;
  /* this+0x78 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemInfoList;
  /* this+0x84 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_title;
  /* this+0x94 */ struct ItemIdentifyWndInfo * m_itemIdentifyWndInfo;
}

class UIItemRepairWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIListBox * m_metalList;
  /* this+0x64 */ class std::vector<int,std::allocator<int> > m_metalListId;
  /* this+0x74 */ class std::vector<int,std::allocator<int> > m_metalListIndex;
  /* this+0x84 */ class std::list<REPAIRITEM_INFO,std::allocator<REPAIRITEM_INFO> > m_repairItemList;
}

class UIWeaponRefineWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIListBox * m_metalList;
  /* this+0x64 */ class std::vector<int,std::allocator<int> > m_metalListId;
  /* this+0x74 */ class std::vector<int,std::allocator<int> > m_metalListIndex;
}

class UIItemCompositionWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIScrollBar * m_scrollBar;
  /* this+0x64 */ int m_viewOffset;
  /* this+0x68 */ int m_curItem;
  /* this+0x6c */ int m_itemHorzNum;
  /* this+0x70 */ int m_itemVertNum;
  /* this+0x74 */ int m_vertScrEnabled;
  /* this+0x78 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemInfoList;
  /* this+0x84 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_title;
  /* this+0x94 */ struct ItemIdentifyWndInfo * m_itemIdentifyWndInfo;
  /* this+0x98 */ struct ItemCompositionWndInfo * m_itemCompositionWndInfo;
  /* this+0x9c */ int m_cardItemIndex;
}

class UIStatusWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIBitmapButton *[0x6] m_incArrowButton;
  /* this+0x78 */ int m_orgHeight;
  /* this+0x7c */ struct StatusWndInfo * m_info;
}

class UIBasicInfoWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIStaticText * m_name;
  /* this+0x64 */ struct BasicInfoWndInfo * m_info;
  /* this+0x68 */ class UIBitmapButton *[0x8] m_buttons;
  /* this+0x88 */ class UIBarGraphPlayerHp * m_hpGraph;
  /* this+0x8c */ class UIBarGraphPlayerSp * m_spGraph;
  /* this+0x90 */ class UIBarGraph4 * m_expGraph;
  /* this+0x94 */ class UIBarGraph4 * m_jobexpGraph;
}

class UIItemShopWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_drawNumItem;
  /* this+0x64 */ int m_isBasket;
  /* this+0x68 */ class UIResizer * m_resizer;
  /* this+0x6c */ class UIScrollBar * m_scrollBar;
  /* this+0x70 */ class UIBitmapButton *[0x2] m_button;
  /* this+0x78 */ int m_viewOffset;
  /* this+0x7c */ int m_itemVertNum;
  /* this+0x80 */ int m_itemHorzNum;
  /* this+0x84 */ int m_vertScrEnabled;
  /* this+0x88 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemList;
  /* this+0x94 */ class UIStaticText * m_titleText;
  /* this+0x98 */ class UICheckBox * m_dragAllCheckBox;
  /* this+0x9c */ int m_isSellMode;
  /* this+0xa0 */ struct ItemShopWndInfo * m_info;
  /* this+0xa4 */ int m_curItem;
  /* this+0xa8 */ int m_barHeight;
  /* this+0xac */ int m_barHeight2;
  /* this+0xb0 */ int m_isPointShop;
}

class UIItemPurchaseWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_drawNumItem;
  /* this+0x64 */ int m_isBasket;
  /* this+0x68 */ class UIResizer * m_resizer;
  /* this+0x6c */ class UIScrollBar * m_scrollBar;
  /* this+0x70 */ class UIBitmapButton *[0x2] m_button;
  /* this+0x78 */ int m_viewOffset;
  /* this+0x7c */ int m_itemVertNum;
  /* this+0x80 */ int m_itemHorzNum;
  /* this+0x84 */ int m_vertScrEnabled;
  /* this+0x88 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemList;
  /* this+0x94 */ class UIStaticText * m_priceText;
  /* this+0x98 */ struct ItemPurchaseWndInfo * m_info;
  /* this+0x9c */ int m_curItem;
  /* this+0xa0 */ int m_isPointShop;
  /* this+0xa4 */ class UIEditCtrl * m_freePoint;
}

class UIItemSellWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_drawNumItem;
  /* this+0x64 */ int m_isBasket;
  /* this+0x68 */ class UIResizer * m_resizer;
  /* this+0x6c */ class UIScrollBar * m_scrollBar;
  /* this+0x70 */ class UIBitmapButton *[0x2] m_button;
  /* this+0x78 */ int m_viewOffset;
  /* this+0x7c */ int m_itemVertNum;
  /* this+0x80 */ int m_itemHorzNum;
  /* this+0x84 */ int m_vertScrEnabled;
  /* this+0x88 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemList;
  /* this+0x94 */ class UIStaticText * m_priceText;
  /* this+0x98 */ struct ItemSellWndInfo * m_info;
  /* this+0x9c */ int m_curItem;
}

class UIComboBoxWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIComboBox * m_comboBox;
}

class UIChatRoomWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct ChatRoomInfo m_roomInfo;
  /* this+0x90 */ class UIResizer * m_resizer;
  /* this+0x94 */ class UIChatEditCtrl * m_chatEdit;
  /* this+0x98 */ class UIChatHisBox2 * m_listBox;
  /* this+0x9c */ class UIChatHisBox2 * m_memberListBox;
  /* this+0xa0 */ class UIBitmapButton * m_sysButton;
  /* this+0xa4 */ class UIStaticText * m_title;
  /* this+0xa8 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<unsigned long> > m_memberList;
  /* this+0xb8 */ class std::vector<StringId,std::allocator<StringId> > m_menuItems;
  /* this+0xc8 */ struct ChatRoomWndInfo * m_info;
}

class UIExchangeWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIBitmapButton *[0x3] m_buttons;
  /* this+0x6c */ class UIEditCtrl * m_editCtrl;
  /* this+0x70 */ int m_IsMyDragClosed;
  /* this+0x74 */ int m_IsOtherDragClosed;
  /* this+0x78 */ int m_okPushed;
  /* this+0x7c */ int m_exchangePushed;
  /* this+0x80 */ int m_cancelPushed;
  /* this+0x84 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_myItemList;
  /* this+0x90 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_otherItemList;
  /* this+0x9c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_exchangeCharacterName;
  /* this+0xac */ int m_exchangeCharacterID;
  /* this+0xb0 */ short m_exchangeCharacterLV;
}

class UIExchangeAcceptWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ unsigned long m_naid;
  /* this+0x64 */ class UITextViewer * m_textViewer;
  /* this+0x68 */ struct ExchangeAcceptWndInfo * m_info;
}

class UIEquipWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_typeWnd;
  /* this+0x64 */ int[0x3] m_highlightMode;
  /* this+0x70 */ int m_orgHeight;
  /* this+0x74 */ struct EquipWndInfo * m_info;
  /* this+0x78 */ class UIBitmapButton * m_optionOffButton;
  /* this+0x7c */ class UIBitmapButton * m_optionOpenButton;
  /* this+0x80 */ unsigned long m_stateStartTick;
  /* this+0x84 */ int m_barHeight;
  /* this+0x88 */ class UICheckBox * m_openEquipWndCheckBox;
}

class UINewChatWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIEditCtrl * m_lastFocusChat;
  /* this+0x64 */ class UIResizer * m_resizer;
  /* this+0x68 */ class UIChatEditCtrl * m_commonChat;
  /* this+0x6c */ class UIWhisperEditCtrl * m_whisperChat;
  /* this+0x70 */ struct BOXINFO m_boxInfo;
  /* this+0x8c */ class UIBitmapButton *[0x4] m_buttons;
  /* this+0x9c */ int m_comboMode;
  /* this+0xa0 */ class UIChatHisBox * m_listBox;
  /* this+0xa4 */ class UIChatHisBox * m_cmdListBox;
  /* this+0xa8 */ int m_tab;
  /* this+0xac */ int m_saveState;
  /* this+0xb0 */ int m_titleHeight;
  /* this+0xb4 */ int m_titleWidth;
  /* this+0xb8 */ int m_chatEditHeight;
  /* this+0xbc */ class UIBitmapButton * m_btnStickOff;
  /* this+0xc0 */ class UIBitmapButton * m_btnOption;
  /* this+0xc4 */ unsigned long m_colorTab1;
  /* this+0xc8 */ unsigned long m_colorTab2;
}

class UIItemStoreWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_drawNumItem;
  /* this+0x64 */ int m_isBasket;
  /* this+0x68 */ class UIResizer * m_resizer;
  /* this+0x6c */ class UIScrollBar * m_scrollBar;
  /* this+0x70 */ class UIBitmapButton *[0x2] m_button;
  /* this+0x78 */ int m_viewOffset;
  /* this+0x7c */ int m_itemVertNum;
  /* this+0x80 */ int m_itemHorzNum;
  /* this+0x84 */ int m_vertScrEnabled;
  /* this+0x88 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemList;
  /* this+0x94 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_countInfoText;
  /* this+0xa4 */ class UIStaticText * m_titleText;
  /* this+0xa8 */ struct ItemStoreWndInfo * m_info;
  /* this+0xac */ class UITab * m_tab;
  /* this+0xb0 */ int[0x3] m_curRadioBtn;
  /* this+0xbc */ int m_curTab;
}

class UISkillListWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIResizer * m_resizer;
  /* this+0x64 */ class UIScrollBar * m_scrollBar;
  /* this+0x68 */ class UIBitmapButton *[0x2] m_button;
  /* this+0x70 */ class UIBitmapButton *[0x7] m_incArrowButton;
  /* this+0x8c */ class UIBitmapButton *[0x7] m_lvlSelectDnButton;
  /* this+0xa8 */ class UIBitmapButton *[0x7] m_lvlSelectUpButton;
  /* this+0xc4 */ int m_curItem;
  /* this+0xc8 */ int m_viewOffset;
  /* this+0xcc */ int m_itemHorzNum;
  /* this+0xd0 */ int m_itemVertNum;
  /* this+0xd4 */ int m_vertScrEnabled;
  /* this+0xd8 */ class std::list<SKILL_INFO,std::allocator<SKILL_INFO> > m_itemList;
  /* this+0xe4 */ struct SkillListWndInfo * m_info;
  /* this+0xe8 */ class std::vector<StringId,std::allocator<StringId> > m_menuItems;
  /* this+0xf8 */ int m_typeWnd;
}

class UIItemWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_drawNumItem;
  /* this+0x64 */ int m_isBasket;
  /* this+0x68 */ class UIResizer * m_resizer;
  /* this+0x6c */ class UIScrollBar * m_scrollBar;
  /* this+0x70 */ class UIBitmapButton *[0x2] m_button;
  /* this+0x78 */ int m_viewOffset;
  /* this+0x7c */ int m_itemVertNum;
  /* this+0x80 */ int m_itemHorzNum;
  /* this+0x84 */ int m_vertScrEnabled;
  /* this+0x88 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemList;
  /* this+0x94 */ struct ItemWndInfo * m_info;
  /* this+0x98 */ class UITab * m_tab;
  /* this+0x9c */ class UIBitmapButton *[0x3] m_sysButtons;
  /* this+0xa8 */ int[0x3] m_curRadioBtn;
  /* this+0xb4 */ int m_curTab;
  /* this+0xb8 */ int m_orgHeight;
}

class UIQuestWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_drawNumItem;
  /* this+0x64 */ int m_isBasket;
  /* this+0x68 */ class UIResizer * m_resizer;
  /* this+0x6c */ class UIScrollBar * m_scrollBar;
  /* this+0x70 */ class UIBitmapButton *[0x2] m_button;
  /* this+0x78 */ int m_viewOffset;
  /* this+0x7c */ int m_itemVertNum;
  /* this+0x80 */ int m_itemHorzNum;
  /* this+0x84 */ int m_vertScrEnabled;
  /* this+0x88 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemList;
  /* this+0x94 */ struct QuestWndInfo * m_info;
  /* this+0x98 */ class UITab * m_tab;
  /* this+0x9c */ class UIBitmapButton *[0x3] m_sysButtons;
  /* this+0xa8 */ class UIBitmapButton *[0x2] m_button;
  /* this+0xb0 */ int m_curTab;
  /* this+0xb4 */ int m_orgHeight;
  /* this+0xb8 */ int m_curQuest;
}

class UIQuestDetailWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UITextViewer * m_textViewer;
  /* this+0x64 */ class UITextViewer * m_textViewer2;
  /* this+0x68 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_skillBmp;
  /* this+0x78 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_skillName;
  /* this+0x88 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_title;
  /* this+0x98 */ int m_questID;
  /* this+0x9c */ char m_mobCount;
  /* this+0x9d */ char m_mobCurrent;
  /* this+0xa0 */ int[0x3] m_mobID;
  /* this+0xac */ short[0x3] m_mobHunt;
  /* this+0xb2 */ short m_mobTime_Year;
  /* this+0xb4 */ short m_mobTime_Month;
  /* this+0xb6 */ short m_mobTime_Day;
  /* this+0xb8 */ short m_mobTime_Hour;
  /* this+0xba */ short m_mobTime_Minute;
  /* this+0xbc */ short m_Server_Hour;
  /* this+0xbe */ short m_Server_Minute;
  /* this+0xc0 */ class UIStaticText * m_classText;
  /* this+0xc4 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_classStringList;
  /* this+0xd4 */ class UIStaticText * m_classText2;
  /* this+0xd8 */ class UIStaticText * m_classText3;
}

class UIMessengerGroupWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct MessengerGroupWndInfo * m_info;
  /* this+0x64 */ class UIScrollBar * m_scrollBar;
  /* this+0x68 */ class UIRadioBtn *[0x2] m_radioBtns;
  /* this+0x70 */ class UIBitmapButton * m_sysButton;
  /* this+0x74 */ class UIBitmapButton *[0x5] m_button;
  /* this+0x88 */ class UIResizer * m_resizer;
  /* this+0x8c */ class UIStaticText * m_titleText;
  /* this+0x90 */ class std::list<FRIEND_INFO,std::allocator<FRIEND_INFO> > m_itemList;
  /* this+0x9c */ class std::vector<StringId,std::allocator<StringId> > m_menuItems;
  /* this+0xac */ int m_vertScrEnabled;
  /* this+0xb0 */ int m_viewOffset;
  /* this+0xb4 */ int m_itemHorzNum;
  /* this+0xb8 */ int m_itemVertNum;
  /* this+0xbc */ int m_curItem;
  /* this+0xc0 */ int m_itemHeight;
  /* this+0xc4 */ class UIPcGage *[0x28] m_gageList;
  /* this+0x164 */ int m_curRadioBtn;
}

class UIMenuWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ enum WINDOWID m_callerWid;
  /* this+0x64 */ int m_curMenuIndex;
  /* this+0x68 */ int m_menuItemSpacing;
  /* this+0x6c */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_menuItems;
}

class UIItemDropCntWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIEditCtrl * m_editCtrl;
  /* this+0x64 */ class UIStaticText * m_newText;
}

class UIMerchantItemWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_drawNumItem;
  /* this+0x64 */ int m_isBasket;
  /* this+0x68 */ class UIResizer * m_resizer;
  /* this+0x6c */ class UIScrollBar * m_scrollBar;
  /* this+0x70 */ class UIBitmapButton *[0x2] m_button;
  /* this+0x78 */ int m_viewOffset;
  /* this+0x7c */ int m_itemVertNum;
  /* this+0x80 */ int m_itemHorzNum;
  /* this+0x84 */ int m_vertScrEnabled;
  /* this+0x88 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemList;
  /* this+0x94 */ struct MerchantItemWndInfo * m_info;
  /* this+0x98 */ class UIBitmapButton *[0x1] m_sysButtons;
  /* this+0x9c */ class UIStaticText * m_supplyText;
}

class UIMerchantShopMakeWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_title;
  /* this+0x70 */ class UIEditCtrl * m_shopTitle;
  /* this+0x74 */ class UIBitmapButton * m_upButton;
  /* this+0x78 */ class UIBitmapButton * m_downButton;
  /* this+0x7c */ class UIEditCtrl *[0xd] m_itemCountEdit;
  /* this+0xb0 */ int m_numItemCountEdit;
  /* this+0xb4 */ class UIScrollBar * m_scrollBar;
  /* this+0xb8 */ int m_viewOffset;
  /* this+0xbc */ int m_itemHorzNum;
  /* this+0xc0 */ int m_itemVertNum;
  /* this+0xc4 */ int m_vertScrEnabled;
  /* this+0xc8 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemList;
  /* this+0xd4 */ struct MerchantShopMakeWndInfo * m_info;
}

class UIMerchantMirrorItemWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_drawNumItem;
  /* this+0x64 */ int m_isBasket;
  /* this+0x68 */ class UIResizer * m_resizer;
  /* this+0x6c */ class UIScrollBar * m_scrollBar;
  /* this+0x70 */ class UIBitmapButton *[0x2] m_button;
  /* this+0x78 */ int m_viewOffset;
  /* this+0x7c */ int m_itemVertNum;
  /* this+0x80 */ int m_itemHorzNum;
  /* this+0x84 */ int m_vertScrEnabled;
  /* this+0x88 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemList;
  /* this+0x94 */ struct MerchantMirrorItemWndInfo * m_info;
}

class UIMerchantItemShopWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_drawNumItem;
  /* this+0x64 */ int m_isBasket;
  /* this+0x68 */ class UIResizer * m_resizer;
  /* this+0x6c */ class UIScrollBar * m_scrollBar;
  /* this+0x70 */ class UIBitmapButton *[0x2] m_button;
  /* this+0x78 */ int m_viewOffset;
  /* this+0x7c */ int m_itemVertNum;
  /* this+0x80 */ int m_itemHorzNum;
  /* this+0x84 */ int m_vertScrEnabled;
  /* this+0x88 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemList;
  /* this+0x94 */ class UIStaticText * m_titleText;
  /* this+0x98 */ struct MerchantItemShopWndInfo * m_info;
  /* this+0x9c */ int m_curItem;
  /* this+0xa0 */ int m_aid;
}

class UIMerchantItemMyShopWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_drawNumItem;
  /* this+0x64 */ int m_isBasket;
  /* this+0x68 */ class UIResizer * m_resizer;
  /* this+0x6c */ class UIScrollBar * m_scrollBar;
  /* this+0x70 */ class UIBitmapButton *[0x2] m_button;
  /* this+0x78 */ int m_viewOffset;
  /* this+0x7c */ int m_itemVertNum;
  /* this+0x80 */ int m_itemHorzNum;
  /* this+0x84 */ int m_vertScrEnabled;
  /* this+0x88 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemList;
  /* this+0x94 */ class UIStaticText * m_titleText;
  /* this+0x98 */ struct MerchantItemMyShopWndInfo * m_info;
}

class UIMerchantItemPurchaseWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_drawNumItem;
  /* this+0x64 */ int m_isBasket;
  /* this+0x68 */ class UIResizer * m_resizer;
  /* this+0x6c */ class UIScrollBar * m_scrollBar;
  /* this+0x70 */ class UIBitmapButton *[0x2] m_button;
  /* this+0x78 */ int m_viewOffset;
  /* this+0x7c */ int m_itemVertNum;
  /* this+0x80 */ int m_itemHorzNum;
  /* this+0x84 */ int m_vertScrEnabled;
  /* this+0x88 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemList;
  /* this+0x94 */ class UIStaticText * m_priceText;
  /* this+0x98 */ unsigned long m_aid;
  /* this+0x9c */ struct MerchantItemPurchaseWndInfo * m_info;
  /* this+0xa0 */ int m_curItem;
}

class UIShortCutWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct ShortCutWndInfo * m_info;
  /* this+0x64 */ struct ShortCutKey[0x1b] m_shortCutList;
  /* this+0x124 */ int m_maxSlot;
  /* this+0x128 */ int m_slot;
}

class UIRestartWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UITextViewer * m_textViewer;
}

class UIOptionWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_orgHeight;
  /* this+0x64 */ struct OptionWndInfo * m_info;
  /* this+0x68 */ class UIScrollBar * m_bgmVolumescrBar;
  /* this+0x6c */ class UIScrollBar * m_soundVolumescrBar;
  /* this+0x70 */ int m_soundVolume;
  /* this+0x74 */ int m_bgmVolume;
  /* this+0x78 */ class UICheckBox * m_soundOncheckBox;
  /* this+0x7c */ class UICheckBox * m_bgmOncheckBox;
  /* this+0x80 */ class UICheckBox * m_attackSnapCheckBox;
  /* this+0x84 */ class UICheckBox * m_skillSnapCheckBox;
  /* this+0x88 */ class UICheckBox * m_itemSnapCheckBox;
  /* this+0x8c */ class UICheckBox * m_noCtrlCheckBox;
  /* this+0x90 */ class UINoneVisibleButton * m_skinSelectButton;
}

class UIItemParamChangeDisplayWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_atk;
  /* this+0x64 */ int m_newAtk;
  /* this+0x68 */ int m_def;
  /* this+0x6c */ int m_newDef;
  /* this+0x70 */ int m_selectedAtk;
  /* this+0x74 */ int m_selectedDef;
  /* this+0x78 */ int m_sameSlotAtk;
  /* this+0x7c */ int m_sameSlotDef;
  /* this+0x80 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_itemName;
  /* this+0x90 */ int m_isIdentified;
  /* this+0x94 */ struct ItemParamChangeDisplayWndInfo * m_info;
}

class UICandidateWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> >[0x9] m_candidateList;
  /* this+0xf0 */ int m_selection;
  /* this+0xf4 */ int m_num_curPage;
  /* this+0xf8 */ int m_num_totalPage;
  /* this+0xfc */ int m_mun_item;
}

class UICompositionWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_compositionString;
}

class UIKeyStrokeWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
}

class UIPartySettingWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIRadioBtn *[0x2] m_radioExpDiv;
  /* this+0x68 */ int m_curExpDivBtn;
  /* this+0x6c */ class UIRadioBtn *[0x2] m_radioItemCollect;
  /* this+0x74 */ int m_curItemCollectBtn;
  /* this+0x78 */ class UIRadioBtn *[0x2] m_radioItemDiv;
  /* this+0x80 */ int m_curItemDivBtn;
  /* this+0x84 */ struct PartySettingWndInfo * m_info;
  /* this+0x88 */ int m_nYOffset;
  }

class UIFriendOptionWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct FriendOptionWndInfo * m_info;
  /* this+0x64 */ class UICheckBox * m_playWhisperOpenSoundCheckBox;
  /* this+0x68 */ class UICheckBox * m_showFriendWhisperWndCheckBox;
  /* this+0x6c */ class UICheckBox * m_showWhisperWndCheckBox;
  /* this+0x70 */ class UIBitmapButton * m_sysButton;
}

class UIMakeTargetProcessWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_targetItem;
  /* this+0x64 */ struct ITEM_INFO[0x3] m_propertyiteminfo;
}

class UIGuildInfoManageWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct GuildWndInfo * m_info;
  /* this+0x64 */ class UIStaticText *[0x6] m_tabText;
  /* this+0x7c */ class UIBitmapButton * m_emblemChangeButton;
  /* this+0x80 */ class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_emblemList;
  /* this+0x8c */ class std::vector<StringId,std::allocator<StringId> > m_menuItems;
  /* this+0x9c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_emblemResName;
  /* this+0xac */ char * m_compressedEmblemBitmapFileImage;
  /* this+0xb0 */ unsigned long m_compressedEmblemBitmapFileImageSize;
  /* this+0xb4 */ int m_gdid;
  /* this+0xb8 */ int m_emblemVersion;
  /* this+0xbc */ int m_curAllyGuild;
  /* this+0xc0 */ int m_curHostileGuild;
}

class UIGuildMemberManageWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct GuildWndInfo * m_info;
  /* this+0x64 */ class UIStaticText *[0x6] m_tabText;
  /* this+0x7c */ class UIStaticText *[0x5] m_memo;
  /* this+0x90 */ class UIStaticText *[0x5] m_memberName;
  /* this+0xa4 */ class UIStaticText *[0x5] m_positionName;
  /* this+0xb8 */ class UIStaticText *[0x5] m_jobName;
  /* this+0xcc */ class UIBitmapButton *[0x5] m_posComboButton;
  /* this+0xe0 */ class UIScrollBar * m_scrollBar;
  /* this+0xe4 */ class UIBitmapButton * m_applyButton;
  /* this+0xe8 */ class std::vector<StringId,std::allocator<StringId> > m_menuItems;
  /* this+0xf8 */ int m_viewOffset;
  /* this+0xfc */ int m_curItem;
  /* this+0x100 */ int m_itemHorzNum;
  /* this+0x104 */ int m_itemVertNum;
  /* this+0x108 */ int m_posComboSeq;
  /* this+0x10c */ int m_vertScrEnabled;
  /* this+0x110 */ class std::list<GUILD_MEMBER_INFORMATION,std::allocator<GUILD_MEMBER_INFORMATION> > m_memberInfoList;
  /* this+0x11c */ class std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> > m_memberPositionInfoListForChange;
}

class UIGuildPositionManageWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct GuildWndInfo * m_info;
  /* this+0x64 */ class UIStaticText *[0x6] m_tabText;
  /* this+0x7c */ class UICheckBox *[0xb] m_joinCheckBox;
  /* this+0xa8 */ class UICheckBox *[0xb] m_punishCheckBox;
  /* this+0xd4 */ class UIEditCtrlVarId *[0xb] m_payRateEdit;
  /* this+0x100 */ class UIEditCtrlVarId *[0xb] m_posNameEdit;
  /* this+0x12c */ class UIStaticText *[0xb] m_payRate;
  /* this+0x158 */ class UIStaticText *[0xb] m_posName;
  /* this+0x184 */ class UIScrollBar * m_scrollBar;
  /* this+0x188 */ class UIBitmapButton * m_applyButton;
  /* this+0x18c */ int m_viewOffset;
  /* this+0x190 */ int m_curItem;
  /* this+0x194 */ int m_itemHorzNum;
  /* this+0x198 */ int m_itemVertNum;
  /* this+0x19c */ int m_vertScrEnabled;
  /* this+0x1a0 */ class std::list<GUILD_POSITION_INFORMATION,std::allocator<GUILD_POSITION_INFORMATION> > m_posInfoList;
  /* this+0x1ac */ class std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> > m_changedPositionInfoList;
}

class UIGuildSkillWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct GuildWndInfo * m_info;
  /* this+0x64 */ class UIStaticText *[0x6] m_tabText;
  /* this+0x7c */ class UIResizer * m_resizer;
  /* this+0x80 */ class UIScrollBar * m_scrollBar;
  /* this+0x84 */ class UIBitmapButton *[0x2] m_button;
  /* this+0x8c */ class UIBitmapButton *[0x7] m_lvlSelectUpButton;
  /* this+0xa8 */ class UIBitmapButton *[0x7] m_lvlSelectDnButton;
  /* this+0xc4 */ class UIBitmapButton *[0x7] m_incArrowButton;
  /* this+0xe0 */ int m_curItem;
  /* this+0xe4 */ int m_viewOffset;
  /* this+0xe8 */ int m_itemHorzNum;
  /* this+0xec */ int m_itemVertNum;
  /* this+0xf0 */ int m_vertScrEnabled;
  /* this+0xf4 */ class std::list<SKILL_INFO,std::allocator<SKILL_INFO> > m_itemList;
  /* this+0x100 */ class std::vector<StringId,std::allocator<StringId> > m_menuItems;
}

class UIGuildBanishedMemberWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct GuildWndInfo * m_info;
  /* this+0x64 */ class UIStaticText *[0x6] m_tabText;
  /* this+0x7c */ class UIStaticText *[0xb] m_memberName;
  /* this+0xa8 */ class UIStaticText *[0xb] m_reason;
  /* this+0xd4 */ class UIScrollBar * m_scrollBar;
  /* this+0xd8 */ int m_viewOffset;
  /* this+0xdc */ int m_curItem;
  /* this+0xe0 */ int m_itemHorzNum;
  /* this+0xe4 */ int m_itemVertNum;
  /* this+0xe8 */ int m_vertScrEnabled;
}

class UIGuildNoticeWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct GuildWndInfo * m_info;
  /* this+0x64 */ class UIStaticText *[0x6] m_tabText;
  /* this+0x7c */ class UIEditCtrlVarId * m_noticeTitleEdit;
  /* this+0x80 */ class UIEditCtrlVarId *[0x9] m_noticeEdit;
  /* this+0xa4 */ class UIBitmapButton * m_sendButton;
  /* this+0xa8 */ int m_noticeTitleEdited;
  /* this+0xac */ int m_noticeEdited;
}

class UIGuildTotalInfoWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct GuildWndInfo * m_info;
  /* this+0x64 */ class UIStaticText *[0x6] m_tabText;
  /* this+0x7c */ class UIStaticText *[0xc] m_guildName;
  /* this+0xac */ class UIScrollBar * m_scrollBar;
  /* this+0xb0 */ int m_viewOffset;
  /* this+0xb4 */ int m_curItem;
  /* this+0xb8 */ int m_itemHorzNum;
  /* this+0xbc */ int m_itemVertNum;
  /* this+0xc0 */ int m_vertScrEnabled;
}

class UIEmotionWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_curIndex;
  /* this+0x64 */ class UIStaticText *[0xa] m_staticText;
  /* this+0x8c */ class UIEditCtrl *[0xa] m_UserDefineText;
  /* this+0xb4 */ struct EmotionWndInfo * m_info;
  /* this+0xb8 */ class UIBitmapButton * m_emotionListButton;
}

class UITipOfTheDayWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UITextViewer * m_textViewer;
  /* this+0x64 */ int m_indexOfTip;
  /* this+0x68 */ int m_showTipsAtStartup;
}

class UIPetInfoWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIEditCtrl2 * m_newName;
  /* this+0x64 */ struct PetInfoWndInfo * m_info;
  /* this+0x68 */ class UIBitmapButton * m_button;
  /* this+0x6c */ class UINoneVisibleButton * m_skinSelectButton;
}

class UIPetTamingDeceiveWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_delay;
  /* this+0x64 */ int m_curAct;
  /* this+0x68 */ int m_curMot;
  /* this+0x6c */ int m_monGID;
  /* this+0x70 */ int m_destPos;
  /* this+0x74 */ int m_maxDelay;
  /* this+0x78 */ unsigned long m_startTick;
  /* this+0x7c */ int m_isSelected;
}

class UIMakingArrowListWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIScrollBar * m_scrollBar;
  /* this+0x64 */ int m_viewOffset;
  /* this+0x68 */ int m_curItem;
  /* this+0x6c */ int m_itemHorzNum;
  /* this+0x70 */ int m_itemVertNum;
  /* this+0x74 */ int m_vertScrEnabled;
  /* this+0x78 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemInfoList;
  /* this+0x84 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_title;
  /* this+0x94 */ struct ItemIdentifyWndInfo * m_itemIdentifyWndInfo;
  /* this+0x98 */ short m_mkType;
}

class UISelectCartWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UISpriteButton *[0x5] m_sprButton;
}

class UIEmotionListWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_oldIndex;
  /* this+0x64 */ int m_curIndex;
  /* this+0x68 */ struct EmotionListWndInfo * m_info;
  /* this+0x6c */ class std::vector<char *,std::allocator<char *> > m_emotionName;
  /* this+0x7c */ class UISpriteButton *[0x31] m_emotionButton;
}

class UIChatRoomMakeWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_title;
  /* this+0x70 */ class UIEditCtrl * m_roomTitle;
  /* this+0x74 */ class UIEditCtrl * m_passWord;
  /* this+0x78 */ class UIRadioBtn *[0x2] m_radioBtns;
  /* this+0x80 */ class UIStaticText * m_numText;
  /* this+0x84 */ class UIStaticText * m_classText;
  /* this+0x88 */ class UIBitmapButton * m_sysButton;
  /* this+0x8c */ int m_curRadioBtn;
  /* this+0x90 */ int m_comboMode;
  /* this+0x94 */ int m_numPeople;
  /* this+0x98 */ int m_classMode;
  /* this+0x9c */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_numStringList;
  /* this+0xac */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_classStringList;
  /* this+0xbc */ class std::vector<int,std::allocator<int> > m_numList;
  /* this+0xcc */ class std::vector<int,std::allocator<int> > m_classModeList;
}

class UIIllustWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_isDrawTitle;
  /* this+0x64 */ int m_isMoveableWnd;
  /* this+0x68 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bitmapName;
}

class UICommandListWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UITab * m_tab;
  /* this+0x64 */ class UIScrollBar * m_scrollBar;
  /* this+0x68 */ int m_curItem;
  /* this+0x6c */ int m_itemHorzNum;
  /* this+0x70 */ int m_itemVertNum;
  /* this+0x74 */ int m_vertScrEnabled;
  /* this+0x78 */ int m_viewOffset;
}

class UIHomunInfoWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIEditCtrl2 * m_newName;
  /* this+0x64 */ class UIBitmapButton * m_button;
  /* this+0x68 */ class UIBarGraphPlayerHp * m_hpGraph;
  /* this+0x6c */ class UIBarGraphPlayerSp * m_spGraph;
  /* this+0x70 */ class UIBarGraph4 * m_expGraph;
  /* this+0x74 */ class UIBarGraph4 * m_hungryGraph;
  /* this+0x78 */ struct HomunInfoWndInfo * m_info;
}

class UIMerInfoWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIEditCtrl2 * m_newName;
  /* this+0x64 */ class UIBitmapButton * m_button;
  /* this+0x68 */ class UIBarGraphPlayerHp * m_hpGraph;
  /* this+0x6c */ class UIBarGraphPlayerSp * m_spGraph;
  /* this+0x70 */ struct MerInfoWndInfo * m_info;
}

class UIMailListWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UITextButton *[0x7] m_btnFromNameList;
  /* this+0x7c */ class UITextButton *[0x7] m_btnMailHeaderList;
  /* this+0x98 */ class UITextButton * m_prevBtn;
  /* this+0x9c */ class UITextButton * m_nextBtn;
  /* this+0xa0 */ class UIEditCtrl * m_receiveName;
  /* this+0xa4 */ class UIEditCtrl * m_MailHeader;
  /* this+0xa8 */ class UIEditCtrl * m_Zeny;
  /* this+0xac */ class UIEditCtrl3 * m_MailContent;
  /* this+0xb0 */ class UIBitmapButton * m_inputZenyBtn;
  /* this+0xb4 */ class UIBitmapButton * m_setZenyBtn;
  /* this+0xb8 */ class UIBitmapButton * m_sendBtn;
  /* this+0xbc */ class UIBitmapButton * m_cancelBtn;
  /* this+0xc0 */ class UIStaticText * m_Zeny2;
  /* this+0xc4 */ int m_type;
  /* this+0xc8 */ int m_type2;
  /* this+0xcc */ int m_page;
  /* this+0xd0 */ int m_maxPage;
  /* this+0xd4 */ int m_inputZeny;
  /* this+0xd8 */ struct ITEM_INFO m_item;
}

class UIMailViewWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIChatHisBox3 * m_MailContent;
  /* this+0x64 */ class UIBitmapButton * m_returnMailBtn;
  /* this+0x68 */ class UIBitmapButton * m_reMailBtn;
  /* this+0x6c */ class UIBitmapButton * m_delBtn;
  /* this+0x70 */ struct ITEM_INFO m_item;
  /* this+0xbc */ int m_zeny;
  /* this+0xc0 */ int r;
  /* this+0xc4 */ int g;
  /* this+0xc8 */ int b;
}

class UIAuctionWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIBitmapButton2 *[0x5] m_itemBmpList;
  /* this+0x74 */ class UITextButton *[0x5] m_btnItemNameList;
  /* this+0x88 */ class UITextButton *[0x5] m_sellerNameList;
  /* this+0x9c */ class UITextButton *[0x5] m_buyerNameList;
  /* this+0xb0 */ class UIBitmapButton2 * m_itemBmpBtn;
  /* this+0xb4 */ class UITextButton * m_itemNameBtn;
  /* this+0xb8 */ class UITextButton * m_userNameBtn;
  /* this+0xbc */ class UIEditCtrl * m_nowMoney;
  /* this+0xc0 */ class UIEditCtrl * m_maxMoney;
  /* this+0xc4 */ class UIEditCtrl * m_deleteHour;
  /* this+0xc8 */ class UIEditCtrl * m_search;
  /* this+0xcc */ class UIBitmapButton * m_addBtn;
  /* this+0xd0 */ class UIBitmapButton * m_cancelBtn;
  /* this+0xd4 */ class UIBitmapButton * m_finishBtn;
  /* this+0xd8 */ class UIBitmapButton * m_buyBtn;
  /* this+0xdc */ class UIBitmapButton * m_searchBtn;
  /* this+0xe0 */ class UITextButton * m_prevBtn;
  /* this+0xe4 */ class UITextButton * m_nextBtn;
  /* this+0xe8 */ class UIRadioBtn *[0x4] m_btnOrder;
  /* this+0xf8 */ class UIRadioBtn *[0x2] m_btnSearch;
  /* this+0x100 */ int m_type;
  /* this+0x104 */ int m_page;
  /* this+0x108 */ int m_maxPage;
  /* this+0x10c */ unsigned char m_searchAuction;
  /* this+0x110 */ int m_curItem;
  /* this+0x114 */ struct AUCTION_ITEM_SEARCH_INFO * m_curAuctionItem;
  /* this+0x118 */ int m_curOrderBtn;
  /* this+0x11c */ int m_curSearchBtn;
  /* this+0x120 */ struct ITEM_INFO m_item;
}

class UIAuctionMsgWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIBitmapButton * m_button;
  /* this+0x64 */ class UIEditCtrl * m_Money;
  /* this+0x68 */ int m_type;
  /* this+0x6c */ int m_price;
  /* this+0x70 */ int m_auctionID;
  /* this+0x74 */ char[0x19] itemName;
}

class UIImgMenuWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIImgMenu * m_imgMenu;
}

class UIChangeNameWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIBitmapButton * m_okButton;
  /* this+0x64 */ class UIBitmapButton * m_cancelButton;
  /* this+0x68 */ class UIBitmapEditCtrl * m_nameEditCtrl;
  /* this+0x6c */ struct CHARACTER_INFO * m_charInfo;
  /* this+0x70 */ struct CHARACTER_INFO g_charInfo;
}

class UISelectCharWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct viewSprite[0xc] m_viewChar;
  /* this+0xb70 */ int[0xc] m_isEmpty;
  /* this+0xba0 */ unsigned char[0xc] m_isAvailable;
  /* this+0xbac */ short[0xc] m_accessory_top;
  /* this+0xbc4 */ unsigned long m_stateStartTick;
  /* this+0xbc8 */ char m_dontmove;
  /* this+0xbcc */ int m_curPage;
  /* this+0xbd0 */ int m_curSlot;
  /* this+0xbd4 */ int m_pageCount;
  /* this+0xbd8 */ class UIBitmapButton * m_okButton;
  /* this+0xbdc */ class UIBitmapButton * m_makeButton;
  /* this+0xbe0 */ class UIBitmapButton * m_cancelButton;
  /* this+0xbe4 */ class UIBitmapButton * m_deleteButton;
  /* this+0xbe8 */ class UIBitmapButton * m_noticeButton;
  /* this+0xbec */ class UIBitmapButton * m_chargeButton;
  /* this+0xbf0 */ class UIStaticText *[0x16] m_text;
  /* this+0xc48 */ class UISlotBitmap *[0xd] m_slots;
  /* this+0xc7c */ class UIBitmapButton * m_changeNameBtn;
}

class UISubChatHisWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct SubChatWndInfo * m_info;
  /* this+0x64 */ class UIResizer * m_resizer;
  /* this+0x68 */ struct BOXINFO m_boxInfo;
  /* this+0x84 */ class UIChatHisBox * m_listBox;
  /* this+0x88 */ class UIBitmapButton * m_btnStickOn;
  /* this+0x8c */ class UIBitmapButton * m_btnOption;
  /* this+0x90 */ class UIBitmapButton * m_btnMini;
  /* this+0x94 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_chatHistory;
  /* this+0xa4 */ class std::vector<unsigned long,std::allocator<unsigned long> > m_colors;
  /* this+0xb4 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_talkerNameList;
  /* this+0xc4 */ int m_titleHeight;
  /* this+0xc8 */ int m_titleWidth;
  /* this+0xcc */ int m_barHeight;
}

class UISubChatMiniWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_num;
  /* this+0x64 */ int m_miniWidth;
  /* this+0x68 */ int m_miniHeight;
}

class UIMemorialDunWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIBitmapButton *[0x2] m_buttons;
}

class UIRoMapWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class CTexture * m_titleBarTexture;
  /* this+0x64 */ class CTexture * m_roMapTexture;
  /* this+0x68 */ class CTexture * m_miniMapTexture;
  /* this+0x6c */ class std::list<PartyMapInfo,std::allocator<PartyMapInfo> > m_partyPosList;
  /* this+0x78 */ struct PartyMapInfo * m_showThisPosInfo;
  /* this+0x7c */ struct PartyMapInfo * m_showMiniMap;
  /* this+0x80 */ struct MapPosInfo * m_thisPosInfo;
  /* this+0x84 */ struct MapPosInfo * m_miniMapInfo;
  /* this+0x88 */ unsigned char m_showAllMapName;
}

class std::list<UIWindow *,std::allocator<UIWindow *> > {
  /* this+0x0 */ class std::allocator<UIWindow *> allocator;
  /* this+0x4 */ struct std::list<UIWindow *,std::allocator<UIWindow *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> > {
  /* this+0x0 */ class std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> > _Tr;
}

class UILoadingWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIStaticText * m_waitMsg;
  /* this+0x64 */ class UIBarGraph2 * m_barGraph;
}

class UIMinimapZoomWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
}

class UILoginWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIEditCtrl * m_login;
  /* this+0x64 */ class UIEditCtrl * m_password;
  /* this+0x68 */ class UIBitmapButton * m_cancelButton;
  /* this+0x6c */ int m_isCheckOn;
  /* this+0x70 */ int m_isGravity;
  /* this+0x74 */ int m_isHangame;
  /* this+0x78 */ class UIStaticText * m_classText;
  /* this+0x7c */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_classStringList;
  /* this+0x8c */ int m_comboMode;
}

class UIChooseWarpWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIListBox * m_choostList;
  /* this+0x64 */ unsigned long m_skid;
  /* this+0x68 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_mapNameList;
}

class UIItemCollectionWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct ITEM_INFO m_itemInfo;
  /* this+0xac */ class UITextViewer * m_textViewer;
  /* this+0xb0 */ class UIBitmapButton * m_cardItemButton;
  /* this+0xb4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_itemBmp;
  /* this+0xc4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_itemName;
  /* this+0xd4 */ unsigned char m_isIdentified;
  /* this+0xd5 */ unsigned char m_hasSlot;
  /* this+0xd8 */ enum WINDOWID m_windowId;
  /* this+0xdc */ struct ItemCollectionWndInfo * m_info;
  /* this+0xe0 */ short m_petLevel;
  /* this+0xe2 */ short m_petFullness;
  /* this+0xe4 */ short m_petRelationship;
  /* this+0xe6 */ char[0x18] m_petName;
  /* this+0xfe */ unsigned short m_petITID;
  /* this+0x100 */ int m_isPetNameModified;
}

class UICombinedCardItemCollectionWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct ITEM_INFO m_itemInfo;
  /* this+0xac */ class UITextViewer * m_textViewer;
  /* this+0xb0 */ class UIBitmapButton * m_cardItemButton;
  /* this+0xb4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_itemBmp;
  /* this+0xc4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_itemName;
  /* this+0xd4 */ unsigned char m_isIdentified;
  /* this+0xd5 */ unsigned char m_hasSlot;
  /* this+0xd8 */ enum WINDOWID m_windowId;
  /* this+0xdc */ struct ItemCollectionWndInfo * m_info;
  /* this+0xe0 */ short m_petLevel;
  /* this+0xe2 */ short m_petFullness;
  /* this+0xe4 */ short m_petRelationship;
  /* this+0xe6 */ char[0x18] m_petName;
  /* this+0xfe */ unsigned short m_petITID;
  /* this+0x100 */ int m_isPetNameModified;
  /* this+0x104 */ struct CombinedCardItemCollectionWndInfo * m_combinedItemInfo;
}

class UISkillDescribeWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIBitmapButton * sysButton;
  /* this+0x64 */ class UITextViewer * m_textViewer;
  /* this+0x68 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_skillBmp;
  /* this+0x78 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_skillName;
  /* this+0x88 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_title;
}

class UIQuitWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
}

class UICardItemIllustWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_itemBmp;
  /* this+0x70 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_itemName;
  /* this+0x80 */ unsigned char m_isIdentified;
}

class UINotifyLevelUpWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
}

class UINotifyJobLevelUpWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
}

class UINotifyQuestWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
}

class UIChooseSellBuyWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ unsigned long m_naid;
  /* this+0x64 */ class UITextViewer * m_textViewer;
}

class UIChatRoomChangeWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_title;
  /* this+0x70 */ class UIEditCtrl * m_roomTitle;
  /* this+0x74 */ class UIEditCtrl * m_passWord;
  /* this+0x78 */ class UIRadioBtn *[0x2] m_radioBtns;
  /* this+0x80 */ class UIStaticText * m_numText;
  /* this+0x84 */ class UIStaticText * m_classText;
  /* this+0x88 */ class UIBitmapButton * m_sysButton;
  /* this+0x8c */ int m_curRadioBtn;
  /* this+0x90 */ int m_comboMode;
  /* this+0x94 */ int m_numPeople;
  /* this+0x98 */ int m_classMode;
  /* this+0x9c */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_numStringList;
  /* this+0xac */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_classStringList;
  /* this+0xbc */ class std::vector<int,std::allocator<int> > m_numList;
  /* this+0xcc */ class std::vector<int,std::allocator<int> > m_classModeList;
}

class UIPasswordWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIEditCtrl * m_editCtrl;
  /* this+0x64 */ class UIStaticText * m_newText;
  /* this+0x68 */ unsigned long m_roomId;
}

class UIJoinPartyAcceptWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ unsigned long m_naid;
  /* this+0x64 */ class UITextViewer * m_textViewer;
  /* this+0x68 */ struct ExchangeAcceptWndInfo * m_info;
}

class UICoupleAcceptWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ unsigned long m_naid;
  /* this+0x64 */ class UITextViewer * m_textViewer;
  /* this+0x68 */ struct ExchangeAcceptWndInfo * m_info;
}

class UIStarPlaceAcceptWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ unsigned long m_naid;
  /* this+0x64 */ class UITextViewer * m_textViewer;
  /* this+0x68 */ struct ExchangeAcceptWndInfo * m_info;
  /* this+0x6c */ char which;
}

class UIYourItemWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ unsigned long m_naid;
  /* this+0x64 */ class UITextViewer * m_textViewer;
  /* this+0x68 */ struct ExchangeAcceptWndInfo * m_info;
  /* this+0x6c */ int val_index;
  /* this+0x70 */ int val_wear;
}

class UIBabyAcceptWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ unsigned long m_naid;
  /* this+0x64 */ class UITextViewer * m_textViewer;
  /* this+0x68 */ struct ExchangeAcceptWndInfo * m_info;
}

class UIBabyAcceptWnd2 {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ unsigned long m_naid;
  /* this+0x64 */ class UITextViewer * m_textViewer;
  /* this+0x68 */ struct ExchangeAcceptWndInfo * m_info;
}

class UIJoinGuildAcceptWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ unsigned long m_naid;
  /* this+0x64 */ class UITextViewer * m_textViewer;
  /* this+0x68 */ struct ExchangeAcceptWndInfo * m_info;
}

class UIAllyGuildAcceptWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ unsigned long m_naid;
  /* this+0x64 */ class UITextViewer * m_textViewer;
  /* this+0x68 */ struct ExchangeAcceptWndInfo * m_info;
}

class UISkillNameChangeWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIEditCtrl * m_editCtrl;
  /* this+0x64 */ int m_skillId;
  /* this+0x68 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_skillName;
}

class UINpcEditDialogWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIEditCtrl * m_editCtrl;
  /* this+0x64 */ unsigned long m_naid;
}

class UINpcTextEditDialogWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIEditCtrl * m_editCtrl;
  /* this+0x64 */ unsigned long m_naid;
}

class UIDetailLevelWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_textureDetailLevel;
  /* this+0x64 */ int m_spriteDetailLevel;
  /* this+0x68 */ int m_trilinearFilter;
  /* this+0x6c */ class UIScrollBar * m_spriteDetailLevelScrbar;
  /* this+0x70 */ class UIScrollBar * m_textureDetailLevelScrbar;
  /* this+0x74 */ struct DetailLevelWndInfo * m_info;
  /* this+0x78 */ class UICheckBox * m_openDetailWindowCheckBox;
  /* this+0x7c */ class UICheckBox * m_trilinearCheckBox;
}

class UINotifyItemObtainWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_itemName;
  /* this+0x70 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_message;
  /* this+0x80 */ unsigned long m_madeTick;
  /* this+0x84 */ int m_isMoney;
  /* this+0x88 */ struct ITEM_INFO m_itemInfo;
  /* this+0xd4 */ unsigned char m_isIdentified;
}

class UIGuildLeaveReasonDescWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIEditCtrl * m_editCtrl;
  /* this+0x64 */ class UIStaticText * m_titleText;
}

class UIGuildBanReasonDescWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIEditCtrl * m_editCtrl;
  /* this+0x64 */ class UIStaticText * m_titleText;
  /* this+0x68 */ int[0x3] m_vars;
}

class UIMakeTargetListWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIListBox * m_metalList;
  /* this+0x64 */ class std::vector<int,std::allocator<int> > m_metalListId;
}

class UIMakeTargetResultWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_targetItem;
  /* this+0x64 */ unsigned char m_succeed;
}

class UIProhibitListWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_oldLogCnt;
  /* this+0x64 */ unsigned long m_AID;
}

class UIPetEggListWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIScrollBar * m_scrollBar;
  /* this+0x64 */ int m_viewOffset;
  /* this+0x68 */ int m_curItem;
  /* this+0x6c */ int m_itemHorzNum;
  /* this+0x70 */ int m_itemVertNum;
  /* this+0x74 */ int m_vertScrEnabled;
  /* this+0x78 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemInfoList;
  /* this+0x84 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_title;
  /* this+0x94 */ struct ItemIdentifyWndInfo * m_itemIdentifyWndInfo;
}

class UISpellListWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIScrollBar * m_scrollBar;
  /* this+0x64 */ int m_viewOffset;
  /* this+0x68 */ int m_curItem;
  /* this+0x6c */ int m_itemHorzNum;
  /* this+0x70 */ int m_itemVertNum;
  /* this+0x74 */ int m_vertScrEnabled;
  /* this+0x78 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemInfoList;
  /* this+0x84 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_title;
  /* this+0x94 */ struct ItemIdentifyWndInfo * m_itemIdentifyWndInfo;
  /* this+0x98 */ class std::vector<int,std::allocator<int> > m_spellList;
}

class UIBookWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UITextViewer * m_textViewer;
  /* this+0x64 */ class UITransBalloonText * m_bookcastBalloon;
  /* this+0x68 */ char[0x64] m_BookTitle;
  /* this+0xcc */ int m_BookTotalLine;
  /* this+0xd0 */ int m_BookTotalPage;
  /* this+0xd4 */ int m_PresentPage;
  /* this+0xd8 */ int m_PresentLine;
  /* this+0xdc */ int m_BookCastTick;
  /* this+0xe0 */ unsigned char m_bAutoReadBook;
  /* this+0xe4 */ unsigned long m_bgR;
  /* this+0xe8 */ unsigned long m_bgG;
  /* this+0xec */ unsigned long m_bgB;
  /* this+0xf0 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_bookContents;
  /* this+0x100 */ class UISpriteButton *[0x4] m_BookButton;
}

class UIJoinFriendAcceptWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ unsigned long m_naid;
  /* this+0x64 */ class UITextViewer * m_textViewer;
  /* this+0x68 */ struct ExchangeAcceptWndInfo * m_info;
  /* this+0x6c */ unsigned long m_nReqAID;
  /* this+0x70 */ unsigned long m_nReqGID;
}

class UIAutoMessageWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIEditCtrl * m_editCtrl;
}

class UISelCharForUServerWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct viewSprite[0xc] m_viewChar;
  /* this+0xb70 */ int[0xc] m_isEmpty;
  /* this+0xba0 */ short[0xc] m_accessory_top;
  /* this+0xbb8 */ unsigned long m_stateStartTick;
  /* this+0xbbc */ class UICheckBox *[0xc] m_checkBox;
  /* this+0xbec */ class UIBitmapButton * m_okButton;
  /* this+0xbf0 */ class UICharInfoBalloonText * m_charInfoBalloon;
  /* this+0xbf4 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_strings;
  /* this+0xc04 */ int m_selCharNum;
}

class UIRebirthWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
}

class UIBattleMsgOptionWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIScrollBar * m_scrollBar;
  /* this+0x64 */ int m_curItem;
  /* this+0x68 */ int m_itemVertNum;
  /* this+0x6c */ int m_vertScrEnabled;
  /* this+0x70 */ int m_viewOffset;
  /* this+0x74 */ class std::vector<char *,std::allocator<char *> > m_battleMsgOptionTable;
}

class std::list<StringAndColor,std::allocator<StringAndColor> > {
  /* this+0x0 */ class std::allocator<StringAndColor> allocator;
  /* this+0x4 */ struct std::list<StringAndColor,std::allocator<StringAndColor> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UIWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<UIWindow *> > {
  /* this+0x0 */ class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator64c72653 _Tr;
}

struct BasicInfoWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct ItemWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
  /* this+0x10 */ int orgHeight;
  /* this+0x14 */ int curTab;
  /* this+0x18 */ int curRadio1;
  /* this+0x1c */ int curRadio2;
  /* this+0x20 */ int curRadio3;
  /* this+0x24 */ int show;
}

struct QuestWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
  /* this+0x10 */ int orgHeight;
  /* this+0x14 */ int curTab;
  /* this+0x18 */ int show;
}

struct StatusWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
  /* this+0x10 */ int orgHeight;
  /* this+0x14 */ int show;
}

struct EquipWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
  /* this+0x10 */ int orgHeight;
  /* this+0x14 */ int show;
}

struct OptionWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
  /* this+0x10 */ int orgHeight;
  /* this+0x14 */ int show;
}

struct ShortenItemWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
  /* this+0x10 */ int show;
}

struct ShortenSkillWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct SayDialogWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct ChooseWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct ChatRoomWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct ItemStoreWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct ItemShopWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct ItemSellWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct ItemPurchaseWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct MessengerGroupWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
  /* this+0x10 */ int show;
  /* this+0x14 */ int radio;
}

struct ShortCutWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
  /* this+0x10 */ int show;
}

struct ExchangeAcceptWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct SkillListWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
  /* this+0x10 */ int show;
}

struct MerchantItemWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
  /* this+0x10 */ int show;
}

struct MerchantMirrorItemWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct MerchantShopMakeWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct MerchantItemShopWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct MerchantItemMyShopWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct MerchantItemPurchaseWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct ItemCollectionWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct CombinedCardItemCollectionWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct ItemParamChangeDisplayWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct PartySettingWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct DetailLevelWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct GuildWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
  /* this+0x10 */ int curTab;
}

struct WhisperWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct WhisperListWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
  /* this+0x10 */ int show;
}

struct FriendOptionWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct ItemCompositionWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct ItemIdentifyWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct EmotionWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct EmotionListWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct PetInfoWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct HomunInfoWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct MerInfoWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

struct SubChatWndInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int w;
  /* this+0xc */ int h;
}

class CWeather {
  /* this+0x0 */ unsigned char m_bNight;
  /* this+0x1 */ unsigned char m_bObjLight;
  /* this+0x4 */ class std::vector<WeatherInfo,std::allocator<WeatherInfo> > m_weatherInfo;
  /* this+0x14 */ class CPlayer * m_pPlayer;
  /* this+0x18 */ struct vector3d m_Diffuse;
  /* this+0x24 */ struct vector3d m_MaxDiffuse;
  /* this+0x30 */ struct vector3d m_Ambient;
  /* this+0x3c */ struct vector3d m_EnvDiff;
  /* this+0x48 */ class CRagEffect * m_Effect;
  /* this+0x4c */ struct _SYSTEMTIME m_st;
  /* this+0x5c */ int m_nDayCount;
}

struct vector3d {
  /* this+0x0 */ float x;
  /* this+0x4 */ float y;
  /* this+0x8 */ float z;
}

class std::vector<WeatherInfo,std::allocator<WeatherInfo> > {
  /* this+0x0 */ class std::allocator<WeatherInfo> allocator;
  /* this+0x4 */ struct WeatherInfo * _First;
  /* this+0x8 */ struct WeatherInfo * _Last;
  /* this+0xc */ struct WeatherInfo * _End;
}

class CPlayer {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ int m_efId;
  /* this+0xfc */ int m_Sk_Level;
  /* this+0x100 */ int m_isLoop;
  /* this+0x104 */ class std::list<CRagEffect *,std::allocator<CRagEffect *> > m_effectList;
  /* this+0x110 */ class CRagEffect * m_beginSpellEffect;
  /* this+0x114 */ class CRagEffect * m_magicTargetEffect;
  /* this+0x118 */ int m_moveDestX;
  /* this+0x11c */ int m_moveDestY;
  /* this+0x120 */ unsigned long m_speed;
  /* this+0x124 */ int m_isCounter;
  /* this+0x128 */ int m_isTrickDead;
  /* this+0x12c */ int m_isPlayHitWave;
  /* this+0x130 */ int m_isAsuraAttack;
  /* this+0x134 */ char * m_emblemWnd;
  /* this+0x138 */ char * m_WordDisplayWnd;
  /* this+0x13c */ char[0x80] m_hitWaveName;
  /* this+0x1bc */ unsigned long m_colorEndTick;
  /* this+0x1c0 */ short m_clevel;
  /* this+0x1c2 */ short m_MaxHp;
  /* this+0x1c4 */ short m_Hp;
  /* this+0x1c6 */ short m_MaxSp;
  /* this+0x1c8 */ short m_Sp;
  /* this+0x1cc */ int m_Exp;
  /* this+0x1d0 */ short m_Str;
  /* this+0x1d2 */ short m_Int;
  /* this+0x1d4 */ short m_Dex;
  /* this+0x1d6 */ short m_Vit;
  /* this+0x1d8 */ short m_Luk;
  /* this+0x1da */ short m_Agi;
  /* this+0x1dc */ struct vector3d m_accel;
  /* this+0x1e8 */ class CPathInfo m_path;
  /* this+0x204 */ unsigned long m_moveStartTime;
  /* this+0x208 */ unsigned char m_isNeverAnimation;
  /* this+0x20c */ int m_pathStartCell;
  /* this+0x210 */ float m_dist;
  /* this+0x214 */ unsigned long m_lastProcessStateTime;
  /* this+0x218 */ unsigned long m_lastServerTime;
  /* this+0x21c */ unsigned long m_chatTick;
  /* this+0x220 */ unsigned long m_targetGid;
  /* this+0x224 */ float m_attackMotion;
  /* this+0x228 */ int m_isBladeStop;
  /* this+0x22c */ unsigned long m_gid;
  /* this+0x230 */ int m_job;
  /* this+0x234 */ int m_sex;
  /* this+0x238 */ class UIBalloonText * m_balloon;
  /* this+0x23c */ class UIChatRoomTitle * m_chatTitle;
  /* this+0x240 */ class UIMerchantShopTitle * m_merchantShopTitle;
  /* this+0x244 */ class UIRechargeGage * m_skillRechargeGage;
  /* this+0x248 */ unsigned long m_freezeEndTick;
  /* this+0x24c */ unsigned long m_petEmotionStartTick;
  /* this+0x250 */ unsigned long m_skillRechargeEndTick;
  /* this+0x254 */ unsigned long m_skillRechargeStartTick;
  /* this+0x258 */ int m_chatWidth;
  /* this+0x25c */ int m_chatHeight;
  /* this+0x260 */ int m_nameWidth;
  /* this+0x264 */ int m_xSize;
  /* this+0x268 */ int m_ySize;
  /* this+0x26c */ int m_headType;
  /* this+0x270 */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackList;
  /* this+0x27c */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackedList;
  /* this+0x288 */ int m_willBeDead;
  /* this+0x28c */ int m_is99;
  /* this+0x290 */ char m_99;
  /* this+0x294 */ int m_bodyState;
  /* this+0x298 */ int m_effectState;
  /* this+0x29c */ int m_healthState;
  /* this+0x2a0 */ int m_pkState;
  /* this+0x2a4 */ float m_damageDestX;
  /* this+0x2a8 */ float m_damageDestZ;
  /* this+0x2ac */ unsigned long m_effectLaunchCnt;
  /* this+0x2b0 */ unsigned long m_vanishTime;
  /* this+0x2b4 */ int m_actorType;
  /* this+0x2b8 */ int m_bIsMemberAndVisible;
  /* this+0x2bc */ int m_gdid;
  /* this+0x2c0 */ int m_emblemVersion;
  /* this+0x2c4 */ class CMercenaryAI * m_homunAI;
  /* this+0x2c8 */ class CMercenaryAI * m_merAI;
  /* this+0x2cc */ unsigned char m_objectType;
  /* this+0x2d0 */ struct _MSG2AI m_homunMsg;
  /* this+0x2e8 */ struct _MSG2AI m_homunResMsg;
  /* this+0x300 */ struct _MSG2AI m_merMsg;
  /* this+0x318 */ struct _MSG2AI m_merResMsg;
  /* this+0x330 */ class CMsgEffect * m_birdEffect;
  /* this+0x334 */ class CMsgEffect * m_cartEffect;
  /* this+0x338 */ class CMsgEffect * m_pkEffect;
  /* this+0x33c */ class CMsgEffect * m_iceEffect;
  /* this+0x340 */ class CMsgEffect * m_curseEffect;
  /* this+0x344 */ class CMsgEffect * m_sleepEffect;
  /* this+0x348 */ class CMsgEffect * m_stunEffect;
  /* this+0x34c */ class CMsgEffect * m_silenceEffect;
  /* this+0x350 */ class CMsgEffect * m_angelusEffect;
  /* this+0x354 */ class CMsgEffect * m_crusisEffect;
  /* this+0x358 */ class CMsgEffect * m_chatProhibitEffect;
  /* this+0x35c */ class CMsgEffect * m_cursorEffect;
  /* this+0x360 */ class std::list<CMsgEffect *,std::allocator<CMsgEffect *> > m_msgEffectList;
  /* this+0x36c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_imfName;
  /* this+0x37c */ int m_honor;
  /* this+0x380 */ int m_virtue;
  /* this+0x384 */ int m_headDir;
  /* this+0x388 */ int m_head;
  /* this+0x38c */ int m_headPalette;
  /* this+0x390 */ int m_weapon;
  /* this+0x394 */ int m_accessory;
  /* this+0x398 */ int m_accessory2;
  /* this+0x39c */ int m_accessory3;
  /* this+0x3a0 */ int m_shield;
  /* this+0x3a4 */ int m_shoe;
  /* this+0x3a8 */ int m_shoe_count;
  /* this+0x3ac */ struct vector3d shoe_pos;
  /* this+0x3b8 */ int m_renderWithoutLayer;
  /* this+0x3bc */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_headPaletteName;
  /* this+0x3cc */ class UIPcGage * m_gage;
  /* this+0x3d0 */ long m_pk_rank;
  /* this+0x3d4 */ long m_pk_total;
  /* this+0x3d8 */ class std::vector<CSprRes *,std::allocator<CSprRes *> > m_sprResList;
  /* this+0x3e8 */ class std::vector<CActRes *,std::allocator<CActRes *> > m_actResList;
  /* this+0x3f8 */ int m_destCellX;
  /* this+0x3fc */ int m_destCellZ;
  /* this+0x400 */ unsigned long m_attackReqTime;
  /* this+0x404 */ unsigned long m_preMoveStartTick;
  /* this+0x408 */ enum PROCEEDTYPE m_proceedType;
  /* this+0x40c */ int m_preMoveOn;
  /* this+0x410 */ int m_attackMode;
  /* this+0x414 */ int m_isAttackRequest;
  /* this+0x418 */ int m_isWaitingMoveAck;
  /* this+0x41c */ int m_isPreengageStateOfMove;
  /* this+0x420 */ unsigned long m_proceedTargetGid;
  /* this+0x424 */ unsigned long m_totalAttackReqCnt;
  /* this+0x428 */ unsigned long m_tickOfMoveForAttack;
  /* this+0x42c */ unsigned long m_moveReqTick;
  /* this+0x430 */ unsigned long m_standTick;
  /* this+0x434 */ int m_skillId;
  /* this+0x438 */ int m_skillAttackRange;
  /* this+0x43c */ int m_skillUseLevel;
  /* this+0x440 */ int m_gSkillDx;
  /* this+0x444 */ int m_gSkillDy;
  /* this+0x448 */ int m_preengageXOfMove;
  /* this+0x44c */ int m_preengageYOfMove;
  /* this+0x450 */ class CRagEffect * m_statusEffect;
}

class CRagEffect {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ class CRenderObject * m_master;
  /* this+0xfc */ float[0x4] m_param;
  /* this+0x10c */ float m_longitude;
  /* this+0x110 */ float m_latitude;
  /* this+0x114 */ float m_tlvertX;
  /* this+0x118 */ float m_tlvertY;
  /* this+0x11c */ float m_tlvertZ;
  /* this+0x120 */ int m_defZ;
  /* this+0x124 */ int m_isDirection;
  /* this+0x128 */ int m_type;
  /* this+0x12c */ int m_level;
  /* this+0x130 */ int m_flag;
  /* this+0x134 */ int m_count;
  /* this+0x138 */ int m_stateCnt;
  /* this+0x13c */ int m_duration;
  /* this+0x140 */ struct vector3d m_deltaPos;
  /* this+0x14c */ struct vector3d m_deltaPos2;
  /* this+0x158 */ struct vector3d m_deltaPos3;
  /* this+0x164 */ class std::list<CEffectPrim *,std::allocator<CEffectPrim *> > m_primList;
  /* this+0x170 */ struct objectSegment[0x14] m_objSeg;
  /* this+0x7b0 */ class CEZeffectRes * m_ezEffectRes;
  /* this+0x7b4 */ struct KANICLIP * m_aniClips;
  /* this+0x7b8 */ struct KAC_XFORMDATA[0x80] m_actXformData;
  /* this+0x41b8 */ struct RPTriFace[0x200] m_rp;
  /* this+0x119b8 */ int m_iCurLayer;
  /* this+0x119bc */ int m_cEndLayer;
  /* this+0x119c0 */ unsigned char[0x80] m_isLayerDrawn;
  /* this+0x11a40 */ int[0x80] m_aiCurAniKey;
}

struct _OSVERSIONINFOEXA {
  /* this+0x0 */ unsigned long dwOSVersionInfoSize;
  /* this+0x4 */ unsigned long dwMajorVersion;
  /* this+0x8 */ unsigned long dwMinorVersion;
  /* this+0xc */ unsigned long dwBuildNumber;
  /* this+0x10 */ unsigned long dwPlatformId;
  /* this+0x14 */ char[0x80] szCSDVersion;
  /* this+0x94 */ unsigned short wServicePackMajor;
  /* this+0x96 */ unsigned short wServicePackMinor;
  /* this+0x98 */ unsigned short[0x2] wReserved;
}

struct tagPROCESSENTRY32 {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long cntUsage;
  /* this+0x8 */ unsigned long th32ProcessID;
  /* this+0xc */ unsigned long th32DefaultHeapID;
  /* this+0x10 */ unsigned long th32ModuleID;
  /* this+0x14 */ unsigned long cntThreads;
  /* this+0x18 */ unsigned long th32ParentProcessID;
  /* this+0x1c */ long pcPriClassBase;
  /* this+0x20 */ unsigned long dwFlags;
  /* this+0x24 */ char[0x104] szExeFile;
}

struct tagPOINT {
  /* this+0x0 */ long x;
  /* this+0x4 */ long y;
}

struct tagMSG {
  /* this+0x0 */ struct HWND__ * hwnd;
  /* this+0x4 */ unsigned int message;
  /* this+0x8 */ unsigned int wParam;
  /* this+0xc */ long lParam;
  /* this+0x10 */ unsigned long time;
  /* this+0x14 */ struct tagPOINT pt;
}

struct HICON__ {
  /* this+0x0 */ int unused;
}

struct HBRUSH__ {
  /* this+0x0 */ int unused;
}

struct tagWNDCLASSA {
  /* this+0x0 */ unsigned int style;
  /* this+0x4 */ function  * lpfnWndProc;
  /* this+0x8 */ int cbClsExtra;
  /* this+0xc */ int cbWndExtra;
  /* this+0x10 */ struct HINSTANCE__ * hInstance;
  /* this+0x14 */ struct HICON__ * hIcon;
  /* this+0x18 */ struct HICON__ * hCursor;
  /* this+0x1c */ struct HBRUSH__ * hbrBackground;
  /* this+0x20 */ const char * lpszMenuName;
  /* this+0x24 */ const char * lpszClassName;
}

struct HKEY__ {
  /* this+0x0 */ int unused;
}

struct _DDCOLORKEY {
  /* this+0x0 */ unsigned long dwColorSpaceLowValue;
  /* this+0x4 */ unsigned long dwColorSpaceHighValue;
}

struct _DDSCAPS2 {
  /* this+0x0 */ unsigned long dwCaps;
  /* this+0x4 */ unsigned long dwCaps2;
  /* this+0x8 */ unsigned long dwCaps3;
  /* this+0xc */ unsigned long dwCaps4;
  /* this+0xc */ unsigned long dwVolumeDepth;
}

struct _STARTUPINFOA {
  /* this+0x0 */ unsigned long cb;
  /* this+0x4 */ char * lpReserved;
  /* this+0x8 */ char * lpDesktop;
  /* this+0xc */ char * lpTitle;
  /* this+0x10 */ unsigned long dwX;
  /* this+0x14 */ unsigned long dwY;
  /* this+0x18 */ unsigned long dwXSize;
  /* this+0x1c */ unsigned long dwYSize;
  /* this+0x20 */ unsigned long dwXCountChars;
  /* this+0x24 */ unsigned long dwYCountChars;
  /* this+0x28 */ unsigned long dwFillAttribute;
  /* this+0x2c */ unsigned long dwFlags;
  /* this+0x30 */ unsigned short wShowWindow;
  /* this+0x32 */ unsigned short cbReserved2;
  /* this+0x34 */ unsigned char * lpReserved2;
  /* this+0x38 */ void * hStdInput;
  /* this+0x3c */ void * hStdOutput;
  /* this+0x40 */ void * hStdError;
}

struct _PROCESS_INFORMATION {
  /* this+0x0 */ void * hProcess;
  /* this+0x4 */ void * hThread;
  /* this+0x8 */ unsigned long dwProcessId;
  /* this+0xc */ unsigned long dwThreadId;
}

struct timecaps_tag {
  /* this+0x0 */ unsigned int wPeriodMin;
  /* this+0x4 */ unsigned int wPeriodMax;
}

class CActorPickNode {
  /* this+0x4 */ struct tagRECT m_region;
  /* this+0x14 */ class CActorPickNode *[0x4] m_child;
  /* this+0x24 */ class std::list<CActorPickInfo *,std::allocator<CActorPickInfo *> > m_pickInfoList;
}

class std::list<CActorPickInfo *,std::allocator<CActorPickInfo *> > {
  /* this+0x0 */ class std::allocator<CActorPickInfo *> allocator;
  /* this+0x4 */ struct std::list<CActorPickInfo *,std::allocator<CActorPickInfo *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class CActorPickInfo {
  /* this+0x0 */ struct vector3d[0x2] m_vectors;
  /* this+0x18 */ unsigned long m_gid;
  /* this+0x1c */ int m_job;
  /* this+0x20 */ int m_classType;
  /* this+0x24 */ int m_isPkState;
}

struct vector2d {
  /* this+0x0 */ float x;
  /* this+0x4 */ float y;
}

class CSkill {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ int m_efId;
  /* this+0xfc */ int m_Sk_Level;
  /* this+0x100 */ int m_isLoop;
  /* this+0x104 */ class std::list<CRagEffect *,std::allocator<CRagEffect *> > m_effectList;
  /* this+0x110 */ class CRagEffect * m_beginSpellEffect;
  /* this+0x114 */ class CRagEffect * m_magicTargetEffect;
  /* this+0x118 */ int m_moveDestX;
  /* this+0x11c */ int m_moveDestY;
  /* this+0x120 */ unsigned long m_speed;
  /* this+0x124 */ int m_isCounter;
  /* this+0x128 */ int m_isTrickDead;
  /* this+0x12c */ int m_isPlayHitWave;
  /* this+0x130 */ int m_isAsuraAttack;
  /* this+0x134 */ char * m_emblemWnd;
  /* this+0x138 */ char * m_WordDisplayWnd;
  /* this+0x13c */ char[0x80] m_hitWaveName;
  /* this+0x1bc */ unsigned long m_colorEndTick;
  /* this+0x1c0 */ short m_clevel;
  /* this+0x1c2 */ short m_MaxHp;
  /* this+0x1c4 */ short m_Hp;
  /* this+0x1c6 */ short m_MaxSp;
  /* this+0x1c8 */ short m_Sp;
  /* this+0x1cc */ int m_Exp;
  /* this+0x1d0 */ short m_Str;
  /* this+0x1d2 */ short m_Int;
  /* this+0x1d4 */ short m_Dex;
  /* this+0x1d6 */ short m_Vit;
  /* this+0x1d8 */ short m_Luk;
  /* this+0x1da */ short m_Agi;
  /* this+0x1dc */ struct vector3d m_accel;
  /* this+0x1e8 */ class CPathInfo m_path;
  /* this+0x204 */ unsigned long m_moveStartTime;
  /* this+0x208 */ unsigned char m_isNeverAnimation;
  /* this+0x20c */ int m_pathStartCell;
  /* this+0x210 */ float m_dist;
  /* this+0x214 */ unsigned long m_lastProcessStateTime;
  /* this+0x218 */ unsigned long m_lastServerTime;
  /* this+0x21c */ unsigned long m_chatTick;
  /* this+0x220 */ unsigned long m_targetGid;
  /* this+0x224 */ float m_attackMotion;
  /* this+0x228 */ int m_isBladeStop;
  /* this+0x22c */ unsigned long m_gid;
  /* this+0x230 */ int m_job;
  /* this+0x234 */ int m_sex;
  /* this+0x238 */ class UIBalloonText * m_balloon;
  /* this+0x23c */ class UIChatRoomTitle * m_chatTitle;
  /* this+0x240 */ class UIMerchantShopTitle * m_merchantShopTitle;
  /* this+0x244 */ class UIRechargeGage * m_skillRechargeGage;
  /* this+0x248 */ unsigned long m_freezeEndTick;
  /* this+0x24c */ unsigned long m_petEmotionStartTick;
  /* this+0x250 */ unsigned long m_skillRechargeEndTick;
  /* this+0x254 */ unsigned long m_skillRechargeStartTick;
  /* this+0x258 */ int m_chatWidth;
  /* this+0x25c */ int m_chatHeight;
  /* this+0x260 */ int m_nameWidth;
  /* this+0x264 */ int m_xSize;
  /* this+0x268 */ int m_ySize;
  /* this+0x26c */ int m_headType;
  /* this+0x270 */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackList;
  /* this+0x27c */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackedList;
  /* this+0x288 */ int m_willBeDead;
  /* this+0x28c */ int m_is99;
  /* this+0x290 */ char m_99;
  /* this+0x294 */ int m_bodyState;
  /* this+0x298 */ int m_effectState;
  /* this+0x29c */ int m_healthState;
  /* this+0x2a0 */ int m_pkState;
  /* this+0x2a4 */ float m_damageDestX;
  /* this+0x2a8 */ float m_damageDestZ;
  /* this+0x2ac */ unsigned long m_effectLaunchCnt;
  /* this+0x2b0 */ unsigned long m_vanishTime;
  /* this+0x2b4 */ int m_actorType;
  /* this+0x2b8 */ int m_bIsMemberAndVisible;
  /* this+0x2bc */ int m_gdid;
  /* this+0x2c0 */ int m_emblemVersion;
  /* this+0x2c4 */ class CMercenaryAI * m_homunAI;
  /* this+0x2c8 */ class CMercenaryAI * m_merAI;
  /* this+0x2cc */ unsigned char m_objectType;
  /* this+0x2d0 */ struct _MSG2AI m_homunMsg;
  /* this+0x2e8 */ struct _MSG2AI m_homunResMsg;
  /* this+0x300 */ struct _MSG2AI m_merMsg;
  /* this+0x318 */ struct _MSG2AI m_merResMsg;
  /* this+0x330 */ class CMsgEffect * m_birdEffect;
  /* this+0x334 */ class CMsgEffect * m_cartEffect;
  /* this+0x338 */ class CMsgEffect * m_pkEffect;
  /* this+0x33c */ class CMsgEffect * m_iceEffect;
  /* this+0x340 */ class CMsgEffect * m_curseEffect;
  /* this+0x344 */ class CMsgEffect * m_sleepEffect;
  /* this+0x348 */ class CMsgEffect * m_stunEffect;
  /* this+0x34c */ class CMsgEffect * m_silenceEffect;
  /* this+0x350 */ class CMsgEffect * m_angelusEffect;
  /* this+0x354 */ class CMsgEffect * m_crusisEffect;
  /* this+0x358 */ class CMsgEffect * m_chatProhibitEffect;
  /* this+0x35c */ class CMsgEffect * m_cursorEffect;
  /* this+0x360 */ class std::list<CMsgEffect *,std::allocator<CMsgEffect *> > m_msgEffectList;
  /* this+0x36c */ unsigned long m_launchCnt;
  /* this+0x370 */ unsigned long m_SkillStartTime;
  /* this+0x374 */ unsigned long m_aid;
  /* this+0x378 */ class C3dActor * m_3dactor;
  /* this+0x37c */ class CRagEffect * m_LoopEffect;
  /* this+0x380 */ int m_effectId;
}

struct RENDER_INFO_RECT {
  /* this+0x0 */ float left;
  /* this+0x4 */ float top;
  /* this+0x8 */ float right;
  /* this+0xc */ float bottom;
  /* this+0x10 */ float oow;
}

struct matrix {
  /* this+0x0 */ float v11;
  /* this+0x4 */ float v12;
  /* this+0x8 */ float v13;
  /* this+0xc */ float v21;
  /* this+0x10 */ float v22;
  /* this+0x14 */ float v23;
  /* this+0x18 */ float v31;
  /* this+0x1c */ float v32;
  /* this+0x20 */ float v33;
  /* this+0x24 */ float v41;
  /* this+0x28 */ float v42;
  /* this+0x2c */ float v43;
}

struct RPSprite {
  /* this+0x0 */ float top;
  /* this+0x4 */ float left;
  /* this+0x8 */ float bottom;
  /* this+0xc */ float right;
  /* this+0x10 */ float oow;
  /* this+0x14 */ float oowup;
  /* this+0x18 */ unsigned long rgba;
  /* this+0x1c */ float angle;
  /* this+0x20 */ int cacheTexNum;
  /* this+0x24 */ float u;
  /* this+0x28 */ float v;
  /* this+0x2c */ struct SprImg * spr;
}

class CGameObject {
}

struct WBA {
  /* this+0x0 */ int message;
  /* this+0x4 */ int damage;
  /* this+0x8 */ unsigned long time;
  /* this+0xc */ unsigned long targetGid;
  /* this+0x10 */ int tCellX;
  /* this+0x14 */ int tCellY;
  /* this+0x18 */ int effectId1;
  /* this+0x1c */ int effectId2;
  /* this+0x20 */ int effectLevel;
  /* this+0x24 */ float attackedSpeedFactor;
}

class CGraffiSkill {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ int m_efId;
  /* this+0xfc */ int m_Sk_Level;
  /* this+0x100 */ int m_isLoop;
  /* this+0x104 */ class std::list<CRagEffect *,std::allocator<CRagEffect *> > m_effectList;
  /* this+0x110 */ class CRagEffect * m_beginSpellEffect;
  /* this+0x114 */ class CRagEffect * m_magicTargetEffect;
  /* this+0x118 */ int m_moveDestX;
  /* this+0x11c */ int m_moveDestY;
  /* this+0x120 */ unsigned long m_speed;
  /* this+0x124 */ int m_isCounter;
  /* this+0x128 */ int m_isTrickDead;
  /* this+0x12c */ int m_isPlayHitWave;
  /* this+0x130 */ int m_isAsuraAttack;
  /* this+0x134 */ char * m_emblemWnd;
  /* this+0x138 */ char * m_WordDisplayWnd;
  /* this+0x13c */ char[0x80] m_hitWaveName;
  /* this+0x1bc */ unsigned long m_colorEndTick;
  /* this+0x1c0 */ short m_clevel;
  /* this+0x1c2 */ short m_MaxHp;
  /* this+0x1c4 */ short m_Hp;
  /* this+0x1c6 */ short m_MaxSp;
  /* this+0x1c8 */ short m_Sp;
  /* this+0x1cc */ int m_Exp;
  /* this+0x1d0 */ short m_Str;
  /* this+0x1d2 */ short m_Int;
  /* this+0x1d4 */ short m_Dex;
  /* this+0x1d6 */ short m_Vit;
  /* this+0x1d8 */ short m_Luk;
  /* this+0x1da */ short m_Agi;
  /* this+0x1dc */ struct vector3d m_accel;
  /* this+0x1e8 */ class CPathInfo m_path;
  /* this+0x204 */ unsigned long m_moveStartTime;
  /* this+0x208 */ unsigned char m_isNeverAnimation;
  /* this+0x20c */ int m_pathStartCell;
  /* this+0x210 */ float m_dist;
  /* this+0x214 */ unsigned long m_lastProcessStateTime;
  /* this+0x218 */ unsigned long m_lastServerTime;
  /* this+0x21c */ unsigned long m_chatTick;
  /* this+0x220 */ unsigned long m_targetGid;
  /* this+0x224 */ float m_attackMotion;
  /* this+0x228 */ int m_isBladeStop;
  /* this+0x22c */ unsigned long m_gid;
  /* this+0x230 */ int m_job;
  /* this+0x234 */ int m_sex;
  /* this+0x238 */ class UIBalloonText * m_balloon;
  /* this+0x23c */ class UIChatRoomTitle * m_chatTitle;
  /* this+0x240 */ class UIMerchantShopTitle * m_merchantShopTitle;
  /* this+0x244 */ class UIRechargeGage * m_skillRechargeGage;
  /* this+0x248 */ unsigned long m_freezeEndTick;
  /* this+0x24c */ unsigned long m_petEmotionStartTick;
  /* this+0x250 */ unsigned long m_skillRechargeEndTick;
  /* this+0x254 */ unsigned long m_skillRechargeStartTick;
  /* this+0x258 */ int m_chatWidth;
  /* this+0x25c */ int m_chatHeight;
  /* this+0x260 */ int m_nameWidth;
  /* this+0x264 */ int m_xSize;
  /* this+0x268 */ int m_ySize;
  /* this+0x26c */ int m_headType;
  /* this+0x270 */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackList;
  /* this+0x27c */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackedList;
  /* this+0x288 */ int m_willBeDead;
  /* this+0x28c */ int m_is99;
  /* this+0x290 */ char m_99;
  /* this+0x294 */ int m_bodyState;
  /* this+0x298 */ int m_effectState;
  /* this+0x29c */ int m_healthState;
  /* this+0x2a0 */ int m_pkState;
  /* this+0x2a4 */ float m_damageDestX;
  /* this+0x2a8 */ float m_damageDestZ;
  /* this+0x2ac */ unsigned long m_effectLaunchCnt;
  /* this+0x2b0 */ unsigned long m_vanishTime;
  /* this+0x2b4 */ int m_actorType;
  /* this+0x2b8 */ int m_bIsMemberAndVisible;
  /* this+0x2bc */ int m_gdid;
  /* this+0x2c0 */ int m_emblemVersion;
  /* this+0x2c4 */ class CMercenaryAI * m_homunAI;
  /* this+0x2c8 */ class CMercenaryAI * m_merAI;
  /* this+0x2cc */ unsigned char m_objectType;
  /* this+0x2d0 */ struct _MSG2AI m_homunMsg;
  /* this+0x2e8 */ struct _MSG2AI m_homunResMsg;
  /* this+0x300 */ struct _MSG2AI m_merMsg;
  /* this+0x318 */ struct _MSG2AI m_merResMsg;
  /* this+0x330 */ class CMsgEffect * m_birdEffect;
  /* this+0x334 */ class CMsgEffect * m_cartEffect;
  /* this+0x338 */ class CMsgEffect * m_pkEffect;
  /* this+0x33c */ class CMsgEffect * m_iceEffect;
  /* this+0x340 */ class CMsgEffect * m_curseEffect;
  /* this+0x344 */ class CMsgEffect * m_sleepEffect;
  /* this+0x348 */ class CMsgEffect * m_stunEffect;
  /* this+0x34c */ class CMsgEffect * m_silenceEffect;
  /* this+0x350 */ class CMsgEffect * m_angelusEffect;
  /* this+0x354 */ class CMsgEffect * m_crusisEffect;
  /* this+0x358 */ class CMsgEffect * m_chatProhibitEffect;
  /* this+0x35c */ class CMsgEffect * m_cursorEffect;
  /* this+0x360 */ class std::list<CMsgEffect *,std::allocator<CMsgEffect *> > m_msgEffectList;
  /* this+0x36c */ unsigned long m_launchCnt;
  /* this+0x370 */ unsigned long m_SkillStartTime;
  /* this+0x374 */ unsigned long m_aid;
  /* this+0x378 */ class C3dActor * m_3dactor;
  /* this+0x37c */ class CRagEffect * m_LoopEffect;
  /* this+0x380 */ int m_effectId;
  /* this+0x384 */ int m_master_gid;
  /* this+0x388 */ int m_ground_pos_x;
  /* this+0x38c */ int m_ground_pos_y;
  /* this+0x390 */ int m_lastingTime;
  /* this+0x394 */ class CTexture * m_tex;
  /* this+0x398 */ class CTexture * m_fontTex;
  /* this+0x39c */ char[0x100] m_strMsg;
  /* this+0x49c */ int m_offsX;
  /* this+0x4a0 */ int m_offsY;
  /* this+0x4a4 */ float m_rot;
}

class C3dGround {
  /* this+0x4 */ class C3dAttr * m_attr;
  /* this+0x8 */ int m_width;
  /* this+0xc */ int m_height;
  /* this+0x10 */ float m_zoom;
  /* this+0x14 */ class CLightmapMgr m_lightmapMgr;
  /* this+0x3c */ int m_numSurfaces;
  /* this+0x40 */ float m_waterLevel;
  /* this+0x44 */ int m_texAnimCycle;
  /* this+0x48 */ int m_wavePitch;
  /* this+0x4c */ int m_waveSpeed;
  /* this+0x50 */ int m_waterSet;
  /* this+0x54 */ float m_waveHeight;
  /* this+0x58 */ class CTexture * m_waterTex;
  /* this+0x5c */ class CTexture * m_pBumpMap;
  /* this+0x60 */ int m_waterCnt;
  /* this+0x64 */ int m_waterOffset;
  /* this+0x68 */ int m_isNewVer;
}

class CMsgEffect {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ int m_efId;
  /* this+0xfc */ int m_Sk_Level;
  /* this+0x100 */ int m_isLoop;
  /* this+0x104 */ class std::list<CRagEffect *,std::allocator<CRagEffect *> > m_effectList;
  /* this+0x110 */ class CRagEffect * m_beginSpellEffect;
  /* this+0x114 */ class CRagEffect * m_magicTargetEffect;
  /* this+0x118 */ class CGameActor * m_masterActor;
  /* this+0x11c */ struct vector3d m_destPos;
  /* this+0x128 */ struct vector3d m_targetPos;
  /* this+0x134 */ struct vector3d m_destPos2;
  /* this+0x140 */ unsigned long m_masterGid;
  /* this+0x144 */ int m_isDisappear;
  /* this+0x148 */ float m_dist;
  /* this+0x14c */ float m_orgPosY;
  /* this+0x150 */ float m_orgPosX;
  /* this+0x154 */ float m_orgZoom;
  /* this+0x158 */ float m_moveDist;
  /* this+0x15c */ int m_stateCnt;
  /* this+0x160 */ int m_oldAction;
  /* this+0x164 */ int m_msgEffectType;
  /* this+0x168 */ int m_orgSprShift;
  /* this+0x16c */ int m_isAttackTarget;
  /* this+0x170 */ int m_isAnimation;
}

class CWorld {
  /* this+0x4 */ class CMode * m_curMode;
  /* this+0x8 */ class std::list<CGameObject *,std::allocator<CGameObject *> > m_gameObjectList;
  /* this+0x14 */ class std::list<CGameActor *,std::allocator<CGameActor *> > m_actorList;
  /* this+0x20 */ class std::list<CItem *,std::allocator<CItem *> > m_itemList;
  /* this+0x2c */ class std::list<CSkill *,std::allocator<CSkill *> > m_skillList;
  /* this+0x38 */ class C3dGround * m_ground;
  /* this+0x3c */ class CPlayer * m_player;
  /* this+0x40 */ class C3dAttr * m_attr;
  /* this+0x44 */ class std::vector<C3dActor *,std::allocator<C3dActor *> > m_bgObjList;
  /* this+0x54 */ long m_bgObjCount;
  /* this+0x58 */ long m_bgObjThread;
  /* this+0x5c */ int m_isPKZone;
  /* this+0x60 */ int m_isSiegeMode;
  /* this+0x64 */ int m_isBattleFieldMode;
  /* this+0x68 */ int m_isEventPVPMode;
  /* this+0x6c */ struct SceneGraphNode m_rootNode;
  /* this+0xec */ struct SceneGraphNode * m_Calculated;
}

class CEffectMaker {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ int m_efId;
  /* this+0xfc */ int m_Sk_Level;
  /* this+0x100 */ int m_isLoop;
  /* this+0x104 */ class std::list<CRagEffect *,std::allocator<CRagEffect *> > m_effectList;
  /* this+0x110 */ class CRagEffect * m_beginSpellEffect;
  /* this+0x114 */ class CRagEffect * m_magicTargetEffect;
  /* this+0x118 */ unsigned long m_processCnt;
  /* this+0x11c */ unsigned long m_emitSpeed;
  /* this+0x120 */ int m_type;
  /* this+0x124 */ float[0x4] m_param;
}

class CMandraAttackEffect {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ float m_hideTime;
}

class CArrowEffect {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ struct vector3d m_sPos;
  /* this+0x104 */ struct vector3d m_moveSpeed;
  /* this+0x110 */ struct vector3d m_tPos;
  /* this+0x11c */ float m_fastFactor;
  /* this+0x120 */ float m_hideTime;
  /* this+0x124 */ unsigned long m_targetGid;
  /* this+0x128 */ int m_process;
}

class CDummyEffectLauncher {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ int m_efId;
  /* this+0xfc */ int m_Sk_Level;
  /* this+0x100 */ int m_isLoop;
  /* this+0x104 */ class std::list<CRagEffect *,std::allocator<CRagEffect *> > m_effectList;
  /* this+0x110 */ class CRagEffect * m_beginSpellEffect;
  /* this+0x114 */ class CRagEffect * m_magicTargetEffect;
  /* this+0x118 */ int m_lastCnt;
}

class CGroundScope {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ int m_efId;
  /* this+0xfc */ int m_Sk_Level;
  /* this+0x100 */ int m_isLoop;
  /* this+0x104 */ class std::list<CRagEffect *,std::allocator<CRagEffect *> > m_effectList;
  /* this+0x110 */ class CRagEffect * m_beginSpellEffect;
  /* this+0x114 */ class CRagEffect * m_magicTargetEffect;
  /* this+0x118 */ int m_master_gid;
  /* this+0x11c */ int m_ground_pos_x;
  /* this+0x120 */ int m_ground_pos_y;
  /* this+0x124 */ unsigned long m_lastingTime;
  /* this+0x128 */ int m_scope_size;
  /* this+0x12c */ float m_rot;
  /* this+0x130 */ float m_rot_speed;
}

class std::allocator<int> {
}

class std::reverse_iterator<int const *,int,int const &,int const *,int> {
}

class std::reverse_iterator<int *,int,int &,int *,int> {
}

struct HP_Damage_Moment {
  /* this+0x0 */ unsigned long DamageTime;
  /* this+0x4 */ int DamageChar;
  /* this+0x8 */ int DamageNum;
  /* this+0xc */ char DamageEnd;
}

class std::vector<char *,std::allocator<char *> > {
  /* this+0x0 */ class std::allocator<char *> allocator;
  /* this+0x4 */ char * * _First;
  /* this+0x8 */ char * * _Last;
  /* this+0xc */ char * * _End;
}

class std::allocator<char *> {
}

class std::reverse_iterator<char * const *,char *,char * const &,char * const *,int> {
}

class std::reverse_iterator<char * *,char *,char * &,char * *,int> {
}

class XMLElement {
  /* this+0x0 */ const char * m_name;
  /* this+0x4 */ const char * m_start;
  /* this+0x8 */ const char * m_end;
  /* this+0xc */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_contents;
  /* this+0x1c */ class XMLElement * m_next;
  /* this+0x20 */ class XMLElement * m_child;
}

struct NamePair {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > cName;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > pName;
  /* this+0x20 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > gName;
  /* this+0x30 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > rName;
}

struct FORCE_ANIM_TICK {
  /* this+0x0 */ unsigned long AID;
  /* this+0x4 */ unsigned long tick;
}

struct CHAT_PROHIBIT_LOG {
  /* this+0x0 */ unsigned long AID;
  /* this+0x4 */ unsigned long GID;
  /* this+0x8 */ unsigned long prohibitTime;
  /* this+0xc */ unsigned long logDate;
  /* this+0x10 */ unsigned long logTime;
  /* this+0x14 */ char[0x20] accountName;
  /* this+0x34 */ char[0x20] charName;
  /* this+0x54 */ char[0x20] serverName;
}

struct REQ_ACCOUNTNAME_INFO {
  /* this+0x0 */ unsigned long AID;
  /* this+0x4 */ unsigned long reqTime;
}

class GuildInfo {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_guildName;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_masterName;
  /* this+0x20 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_subjectName;
  /* this+0x30 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_noticeName;
  /* this+0x40 */ int m_guildLevel;
  /* this+0x44 */ int m_numMember;
  /* this+0x48 */ int m_numOnMember;
  /* this+0x4c */ int m_numMaxMember;
  /* this+0x50 */ int m_memberAvgLevel;
  /* this+0x54 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_manageLand;
  /* this+0x64 */ int m_exp;
  /* this+0x68 */ int m_nextExp;
  /* this+0x6c */ int m_emblem;
  /* this+0x70 */ int m_point;
  /* this+0x74 */ int m_honor;
  /* this+0x78 */ int m_virtue;
  /* this+0x7c */ unsigned long m_zeny;
  /* this+0x80 */ int m_guildTabBitmask;
  /* this+0x84 */ int m_gdid;
  /* this+0x88 */ int m_emblemVersion;
  /* this+0x8c */ int m_rightJoin;
  /* this+0x90 */ int m_rightPunish;
  /* this+0x94 */ int m_amIMaster;
  /* this+0x98 */ int[0x5] m_isRequestInfo;
  /* this+0xac */ class std::list<GUILD_POSITION_INFORMATION,std::allocator<GUILD_POSITION_INFORMATION> > m_posInfoList;
  /* this+0xb8 */ class std::list<GUILD_MEMBER_INFORMATION,std::allocator<GUILD_MEMBER_INFORMATION> > m_memberInfoList;
  /* this+0xc4 */ class std::list<RELATED_GUILD_INFORMATION,std::allocator<RELATED_GUILD_INFORMATION> > m_relatedGuildInfoList;
  /* this+0xd0 */ class std::list<SGUILD_BANISH_INFO,std::allocator<SGUILD_BANISH_INFO> > m_banishList;
  /* this+0xdc */ class std::list<SGUILD_INFO,std::allocator<SGUILD_INFO> > m_guildList;
  /* this+0xe8 */ class std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_positionIdNameMap;
  /* this+0xf8 */ class std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> > m_memberPositionInfoListForChange;
  /* this+0x108 */ class std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> > m_changedPositionInfoList;
}

struct GUILD_MEMBER_INFORMATION {
  /* this+0x0 */ unsigned long AID;
  /* this+0x4 */ unsigned long GID;
  /* this+0x8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CharName;
  /* this+0x18 */ int HeadType;
  /* this+0x1c */ int HeadPalette;
  /* this+0x20 */ int Job;
  /* this+0x24 */ int Sex;
  /* this+0x28 */ int GPositionID;
  /* this+0x2c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GPositionName;
  /* this+0x3c */ int Level;
  /* this+0x40 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > Memo;
  /* this+0x50 */ float Service;
  /* this+0x54 */ int MemberExp;
  /* this+0x58 */ int CurrentState;
}

class std::list<GUILD_MEMBER_INFORMATION,std::allocator<GUILD_MEMBER_INFORMATION> > {
  /* this+0x0 */ class std::allocator<GUILD_MEMBER_INFORMATION> allocator;
  /* this+0x4 */ struct std::list<GUILD_MEMBER_INFORMATION,std::allocator<GUILD_MEMBER_INFORMATION> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

struct SGUILD_BANISH_INFO {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > MemberName;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > MemberAccount;
  /* this+0x20 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > Reason;
}

struct GUILD_POSITION_INFORMATION {
  /* this+0x0 */ int ranking;
  /* this+0x4 */ int positionID;
  /* this+0x8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > posName;
  /* this+0x18 */ int rightOfJoin;
  /* this+0x1c */ int rightOfPunish;
  /* this+0x20 */ int payRate;
}

class std::list<GUILD_POSITION_INFORMATION,std::allocator<GUILD_POSITION_INFORMATION> > {
  /* this+0x0 */ class std::allocator<GUILD_POSITION_INFORMATION> allocator;
  /* this+0x4 */ struct std::list<GUILD_POSITION_INFORMATION,std::allocator<GUILD_POSITION_INFORMATION> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<RELATED_GUILD_INFORMATION,std::allocator<RELATED_GUILD_INFORMATION> > {
  /* this+0x0 */ class std::allocator<RELATED_GUILD_INFORMATION> allocator;
  /* this+0x4 */ struct std::list<RELATED_GUILD_INFORMATION,std::allocator<RELATED_GUILD_INFORMATION> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<SGUILD_BANISH_INFO,std::allocator<SGUILD_BANISH_INFO> > {
  /* this+0x0 */ class std::allocator<SGUILD_BANISH_INFO> allocator;
  /* this+0x4 */ struct std::list<SGUILD_BANISH_INFO,std::allocator<SGUILD_BANISH_INFO> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<SGUILD_INFO,std::allocator<SGUILD_INFO> > {
  /* this+0x0 */ class std::allocator<SGUILD_INFO> allocator;
  /* this+0x4 */ struct std::list<SGUILD_INFO,std::allocator<SGUILD_INFO> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<char,std::21423d8b _Tr;
}

class std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> > {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> > _Tr;
}

class std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> > {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> > _Tr;
}

class CMssVariables {
  /* this+0x0 */ struct _DIG_DRIVER * hDigital;
  /* this+0x4 */ struct _STREAM * hDigitalStream;
  /* this+0x8 */ struct _SAMPLE *[0x30] hSamples;
  /* this+0xc8 */ int streamVolume;
  /* this+0xcc */ int digital2DVolume;
  /* this+0xd0 */ int digital3DVolume;
  /* this+0xd4 */ char[0x100] streamFileName;
  /* this+0x1d4 */ int volumeMaxDist;
  /* this+0x1d8 */ int volumeMinDist;
  /* this+0x1dc */ int digitalrate;
  /* this+0x1e0 */ int digitalbits;
  /* this+0x1e4 */ int digitalchannels;
  /* this+0x1e8 */ int numSamples;
  /* this+0x1ec */ char *[0x40] provider_names;
  /* this+0x2ec */ unsigned long[0x40] provider_handles;
  /* this+0x3ec */ unsigned long provider_default;
  /* this+0x3f0 */ unsigned long enum3D;
  /* this+0x3f4 */ struct h3DPOBJECT *[0x30] h3DSamples;
  /* this+0x4b4 */ struct h3DPOBJECT * hListener;
  /* this+0x4b8 */ int usingEAX;
  /* this+0x4bc */ int roomType;
  /* this+0x4c0 */ int num3DSamples;
}

struct _DIG_DRIVER {
  /* this+0x0 */ char[0x4] tag;
  /* this+0x4 */ long backgroundtimer;
  /* this+0x8 */ long quiet;
  /* this+0xc */ long n_active_samples;
  /* this+0x10 */ long master_volume;
  /* this+0x14 */ long DMA_rate;
  /* this+0x18 */ long hw_format;
  /* this+0x1c */ unsigned long hw_mode_flags;
  /* this+0x20 */ long channels_per_sample;
  /* this+0x24 */ long bytes_per_channel;
  /* this+0x28 */ long channels_per_buffer;
  /* this+0x2c */ long samples_per_buffer;
  /* this+0x30 */ long playing;
  /* this+0x34 */ struct _SAMPLE * samples;
  /* this+0x38 */ long n_samples;
  /* this+0x3c */ long build_size;
  /* this+0x40 */ long * build_buffer;
  /* this+0x44 */ long[0x8] system_data;
  /* this+0x64 */ long buffer_size;
  /* this+0x68 */ struct HWAVEOUT__ * hWaveOut;
  /* this+0x6c */ unsigned long reset_works;
  /* this+0x70 */ unsigned long request_reset;
  /* this+0x74 */ struct wavehdr_tag * first;
  /* this+0x78 */ long n_buffers;
  /* this+0x7c */ struct wavehdr_tag * volatile * return_list;
  /* this+0x80 */ volatile long return_head;
  /* this+0x84 */ volatile long return_tail;
  /* this+0x88 */ unsigned long deviceid;
  /* this+0x8c */ struct pcmwaveformat_tag wformat;
  /* this+0x9c */ unsigned long guid;
  /* this+0xa0 */ void * pDS;
  /* this+0xa4 */ unsigned long ds_priority;
  /* this+0xa8 */ long emulated_ds;
  /* this+0xac */ void * lppdsb;
  /* this+0xb0 */ unsigned long dsHwnd;
  /* this+0xb4 */ void * * lpbufflist;
  /* this+0xb8 */ struct _SAMPLE * * samp_list;
  /* this+0xbc */ long * sec_format;
  /* this+0xc0 */ long max_buffs;
  /* this+0xc4 */ long released;
  /* this+0xc8 */ unsigned long foreground_timer;
  /* this+0xcc */ struct _DIG_DRIVER * next;
  /* this+0xd0 */ long callingCT;
  /* this+0xd4 */ long callingDS;
  /* this+0xd8 */ long DS_initialized;
  /* this+0xdc */ void * DS_sec_buff;
  /* this+0xe0 */ void * DS_out_buff;
  /* this+0xe4 */ long DS_buffer_size;
  /* this+0xe8 */ long DS_frag_cnt;
  /* this+0xec */ long DS_frag_size;
  /* this+0xf0 */ long DS_last_frag;
  /* this+0xf4 */ long DS_last_write;
  /* this+0xf8 */ long DS_last_timer;
  /* this+0xfc */ long DS_skip_time;
  /* this+0x100 */ long DS_use_default_format;
  /* this+0x104 */ long use_MMX;
  /* this+0x108 */ void * decode_buffer;
  /* this+0x10c */ long decode_buffer_size;
  /* this+0x110 */ unsigned long us_count;
  /* this+0x114 */ unsigned long ms_count;
  /* this+0x118 */ unsigned long last_ms_polled;
  /* this+0x11c */ unsigned long last_percent;
  /* this+0x120 */ struct DPINFO[0x4] pipeline;
  /* this+0x2c0 */ long * reverb_buffer;
  /* this+0x2c4 */ long reverb_buffer_size;
  /* this+0x2c8 */ long reverb_buffer_position;
  /* this+0x2cc */ long no_wom_done;
  /* this+0x2d0 */ unsigned long wom_done_buffers;
}

struct _STREAM {
  /* this+0x0 */ long block_oriented;
  /* this+0x4 */ long using_ASI;
  /* this+0x8 */ struct ASISTAGE * ASI;
  /* this+0xc */ struct _SAMPLE * samp;
  /* this+0x10 */ unsigned long fileh;
  /* this+0x14 */ unsigned char *[0x3] bufs;
  /* this+0x20 */ unsigned long[0x3] bufsizes;
  /* this+0x2c */ long[0x3] reset_ASI;
  /* this+0x38 */ long[0x3] bufstart;
  /* this+0x44 */ void *[0x3] asyncs;
  /* this+0x50 */ long[0x2] loadedbufstart;
  /* this+0x58 */ long[0x2] loadedorder;
  /* this+0x60 */ long loadorder;
  /* this+0x64 */ long bufsize;
  /* this+0x68 */ long readsize;
  /* this+0x6c */ unsigned long buf1;
  /* this+0x70 */ long size1;
  /* this+0x74 */ unsigned long buf2;
  /* this+0x78 */ long size2;
  /* this+0x7c */ unsigned long buf3;
  /* this+0x80 */ long size3;
  /* this+0x84 */ unsigned long datarate;
  /* this+0x88 */ long filerate;
  /* this+0x8c */ long filetype;
  /* this+0x90 */ unsigned long fileflags;
  /* this+0x94 */ long totallen;
  /* this+0x98 */ long substart;
  /* this+0x9c */ long sublen;
  /* this+0xa0 */ long subpadding;
  /* this+0xa4 */ unsigned long blocksize;
  /* this+0xa8 */ long padding;
  /* this+0xac */ long padded;
  /* this+0xb0 */ long loadedsome;
  /* this+0xb4 */ unsigned long startpos;
  /* this+0xb8 */ unsigned long totalread;
  /* this+0xbc */ unsigned long loopsleft;
  /* this+0xc0 */ unsigned long error;
  /* this+0xc4 */ long preload;
  /* this+0xc8 */ unsigned long preloadpos;
  /* this+0xcc */ long noback;
  /* this+0xd0 */ long alldone;
  /* this+0xd4 */ long primeamount;
  /* this+0xd8 */ long readatleast;
  /* this+0xdc */ long playcontrol;
  /* this+0xe0 */ function  * callback;
  /* this+0xe4 */ long[0x8] user_data;
  /* this+0x104 */ void * next;
  /* this+0x108 */ long autostreaming;
  /* this+0x10c */ long cb_IsWin32s;
  /* this+0x110 */ long docallback;
}

struct _SAMPLE {
  /* this+0x0 */ char[0x4] tag;
  /* this+0x4 */ struct _DIG_DRIVER * driver;
  /* this+0x8 */ unsigned long status;
  /* this+0xc */ const void *[0x2] start;
  /* this+0x14 */ unsigned long[0x2] len;
  /* this+0x1c */ unsigned long[0x2] pos;
  /* this+0x24 */ unsigned long[0x2] done;
  /* this+0x2c */ long[0x2] reset_ASI;
  /* this+0x34 */ unsigned long src_fract;
  /* this+0x38 */ long left_val;
  /* this+0x3c */ long right_val;
  /* this+0x40 */ long current_buffer;
  /* this+0x44 */ long last_buffer;
  /* this+0x48 */ long starved;
  /* this+0x4c */ long loop_count;
  /* this+0x50 */ long loop_start;
  /* this+0x54 */ long loop_end;
  /* this+0x58 */ long format;
  /* this+0x5c */ unsigned long flags;
  /* this+0x60 */ long playback_rate;
  /* this+0x64 */ long volume;
  /* this+0x68 */ long pan;
  /* this+0x6c */ long left_scale;
  /* this+0x70 */ long right_scale;
  /* this+0x74 */ long service_type;
  /* this+0x78 */ function  * SOB;
  /* this+0x7c */ function  * EOB;
  /* this+0x80 */ function  * EOS;
  /* this+0x84 */ long[0x8] user_data;
  /* this+0xa4 */ long[0x8] system_data;
  /* this+0xc4 */ struct _ADPCMDATATAG adpcm;
  /* this+0x10c */ long SOB_IsWin32s;
  /* this+0x110 */ long EOB_IsWin32s;
  /* this+0x114 */ long EOS_IsWin32s;
  /* this+0x118 */ long secondary_buffer;
  /* this+0x11c */ long service_interval;
  /* this+0x120 */ long service_tick;
  /* this+0x124 */ long buffer_segment_size;
  /* this+0x128 */ long prev_segment;
  /* this+0x12c */ long prev_cursor;
  /* this+0x130 */ long bytes_remaining;
  /* this+0x134 */ long direct_control;
  /* this+0x138 */ long doeob;
  /* this+0x13c */ long dosob;
  /* this+0x140 */ long doeos;
  /* this+0x144 */ struct DPINFO[0x3] pipeline;
  /* this+0x27c */ float reverb_level;
  /* this+0x280 */ float reverb_reflect_time;
  /* this+0x284 */ float reverb_decay_time;
  /* this+0x288 */ long base_scale;
}

struct h3DPOBJECT {
  /* this+0x0 */ unsigned long junk;
}

struct std::nothrow_t {
}

struct _tagWebFont {
  /* this+0x0 */ void * hWebFont;
  /* this+0x4 */ char[0x100] WebFontName;
}

class CInsultFilter {
  /* this+0x0 */ class std::vector<Insult,std::allocator<Insult> > m_insult;
}

class std::vector<Insult,std::allocator<Insult> > {
  /* this+0x0 */ class std::allocator<Insult> allocator;
  /* this+0x4 */ struct Insult * _First;
  /* this+0x8 */ struct Insult * _Last;
  /* this+0xc */ struct Insult * _End;
}

struct _MEMORYSTATUS {
  /* this+0x0 */ unsigned long dwLength;
  /* this+0x4 */ unsigned long dwMemoryLoad;
  /* this+0x8 */ unsigned long dwTotalPhys;
  /* this+0xc */ unsigned long dwAvailPhys;
  /* this+0x10 */ unsigned long dwTotalPageFile;
  /* this+0x14 */ unsigned long dwAvailPageFile;
  /* this+0x18 */ unsigned long dwTotalVirtual;
  /* this+0x1c */ unsigned long dwAvailVirtual;
}

struct ITEM_DESC {
  /* this+0x0 */ const char * identifiedDisplayName;
  /* this+0x4 */ const char * identifiedResourceName;
  /* this+0x8 */ class std::vector<char const *,std::allocator<char const *> > identifiedDescriptionName;
  /* this+0x18 */ const char * unidentifiedDisplayName;
  /* this+0x1c */ const char * unidentifiedResourceName;
  /* this+0x20 */ class std::vector<char const *,std::allocator<char const *> > unidentifiedDescriptionName;
  /* this+0x30 */ unsigned long slot;
  /* this+0x34 */ int slotCount;
  /* this+0x38 */ class std::vector<int,std::allocator<int> > parameter;
}

struct CARD_DESC {
  /* this+0x0 */ const char * illustName;
  /* this+0x4 */ const char * prefix;
  /* this+0x8 */ const char * postfix;
}

struct QUEST_DESC {
  /* this+0x0 */ const char * questName;
  /* this+0x4 */ const char * iconName;
  /* this+0x8 */ const char * detailBmp;
  /* this+0xc */ const char * summaryTXT;
  /* this+0x10 */ const char * objectTXT;
}

class std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> > {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> > _Tr;
}

class std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> > {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> > _Tr;
}

class std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char const *> > > > {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char const *> c8ac75d7 _Tr;
}

class std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> > {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> > _Tr;
}

class std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> > {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> > _Tr;
}

class std::list<FRIEND_INFO,std::allocator<FRIEND_INFO> >::const_iterator {
  /* this+0x0 */ struct std::list<FRIEND_INFO,std::allocator<FRIEND_INFO> >::_Node * _Ptr;
}

class std::list<FRIEND_INFO,std::allocator<FRIEND_INFO> >::iterator {
  /* this+0x0 */ struct std::list<FRIEND_INFO,std::allocator<FRIEND_INFO> >::_Node * _Ptr;
}

struct std::list<FRIEND_INFO,std::allocator<FRIEND_INFO> >::_Node {
  /* this+0x0 */ struct std::list<FRIEND_INFO,std::allocator<FRIEND_INFO> >::_Node * _Next;
  /* this+0x4 */ struct std::list<FRIEND_INFO,std::allocator<FRIEND_INFO> >::_Node * _Prev;
  /* this+0x8 */ struct FRIEND_INFO _Value;
}

class std::reverse_iterator<char const *,char,char const &,char const *,int> {
}

class std::reverse_iterator<char *,char,char &,char *,int> {
}

class std::allocator<char> {
}

struct std::char_traits<char> {
}

struct std::list<GUILD_MEMBER_INFORMATION,std::allocator<GUILD_MEMBER_INFORMATION> >::_Node {
  /* this+0x0 */ struct std::list<GUILD_MEMBER_INFORMATION,std::allocator<GUILD_MEMBER_INFORMATION> >::_Node * _Next;
  /* this+0x4 */ struct std::list<GUILD_MEMBER_INFORMATION,std::allocator<GUILD_MEMBER_INFORMATION> >::_Node * _Prev;
  /* this+0x8 */ struct GUILD_MEMBER_INFORMATION _Value;
}

struct std::list<GUILD_MEMBER_INFORMATION,std::allocator<GUILD_MEMBER_INFORMATION> >::_Acc {
}

class std::allocator<GUILD_MEMBER_INFORMATION> {
}

class std::list<GUILD_MEMBER_INFORMATION,std::allocator<GUILD_MEMBER_INFORMATION> >::iterator {
  /* this+0x0 */ struct std::list<GUILD_MEMBER_INFORMATION,std::allocator<GUILD_MEMBER_INFORMATION> >::_Node * _Ptr;
}

class std::list<GUILD_MEMBER_INFORMATION,std::allocator<GUILD_MEMBER_INFORMATION> >::const_iterator {
  /* this+0x0 */ struct std::list<GUILD_MEMBER_INFORMATION,std::allocator<GUILD_MEMBER_INFORMATION> >::_Node * _Ptr;
}

class std::reverse_bidirectional_iterator<std::list<GUILD_MEMBER_INFORMATION,std::allocator<GUILD_MEMBER_INFORMATION> >::iterator,GUILD_MEMBER_INFORMATION,GUILD_MEMBER_INFORMATION &,GUILD_MEMBER_INFORMATION *,int> {
}

class std::reverse_bidirectional_iterator<std::list<GUILD_MEMBER_INFORMATION,std::allocator<GUILD_MEMBER_INFORMATION> >::const_iterator,GUILD_MEMBER_INFORMATION,GUILD_MEMBER_INFORMATION const &,GUILD_MEMBER_INFORMATION const *,int> {
}

class std::binder2nd<std::not_equal_to<GUILD_MEMBER_INFORMATION> > {
  /* this+0x0 */ struct std::not_equal_to<GUILD_MEMBER_INFORMATION> op;
  /* this+0x4 */ struct GUILD_MEMBER_INFORMATION value;
}

struct std::not_equal_to<GUILD_MEMBER_INFORMATION> {
}

struct std::greater<GUILD_MEMBER_INFORMATION> {
}

class CTokenizer {
  /* this+0x0 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_token;
}

class std::istrstream {
  /* this+0x4 */ int _Chcount;
  /* this+0x8 */ class std::strstreambuf _Sb;
}

class std::allocator<char const *> {
}

class std::reverse_iterator<char const * const *,char const *,char const * const &,char const * const *,int> {
}

class std::reverse_iterator<char const * *,char const *,char const * &,char const * *,int> {
}

class std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
}

class std::reverse_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,st9193da3f {
}

class std::reverse_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,std::basic_str57b33a99 {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > * current;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x10 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > second;
}

class CSprRes {
  /* this+0x4 */ int m_lockCnt;
  /* this+0x8 */ unsigned long m_timeStamp;
  /* this+0xc */ int m_extIndex;
  /* this+0x10 */ class CHash m_fName;
  /* this+0x110 */ unsigned long[0x100] m_pal;
  /* this+0x510 */ class std::vector<SprImg *,std::allocator<SprImg *> >[0x2] m_sprites;
  /* this+0x530 */ int m_count;
}

struct std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node {
  /* this+0x0 */ struct std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node * _Next;
  /* this+0x4 */ struct std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node * _Prev;
  /* this+0x8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Value;
}

struct std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Acc {
}

class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::iterator {
  /* this+0x0 */ struct std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node * _Ptr;
}

class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::const_iterator {
  /* this+0x0 */ struct std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node * _Ptr;
}

class std::reverse_bidirectional_iterator<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::iterator,std::basic_string<char,std::char_t78b2c464 {
}

class std::reverse_bidirectional_iterator<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::const_iterator,std::basic_string<char,std::f0b973fe {
}

class std::binder2nd<std::not_equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > {
  /* this+0x0 */ struct std::not_equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > op;
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > value;
}

struct std::not_equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
}

struct std::greater<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
}

class std::vector<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<int,std::allocator<int> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<int,std::a41195551 {
  /* this+0x0 */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<int,std::allocator<int> > > > allocator;
  /* this+0x4 */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<int,std::allocator<int> > > * _First;
  /* this+0x8 */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<int,std::allocator<int> > > * _Last;
  /* this+0xc */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<int,std::allocator<int> > > * _End;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<int,std::allocator<int> > > {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x10 */ class std::vector<int,std::allocator<int> > second;
}

class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,std::char_traits<char>,std::allocatorc2526a97 {
  /* this+0x0 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,std::char_traits<char>,std::allocatord2975fe1 * _Ptr;
}

class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator7a162c38 {
  /* this+0x0 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,std::char_traits<char>,std::allocatord2975fe1 * _Ptr;
}

struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,std::char_traits<char>,std::allocatord2975fe1 {
  /* this+0x0 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,std::char_traits<char>,std::allocatord2975fe1 * _Left;
  /* this+0x4 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,std::char_traits<char>,std::allocatord2975fe1 * _Parent;
  /* this+0x8 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,std::char_traits<char>,std::allocatord2975fe1 * _Right;
  /* this+0xc */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo> _Value;
  /* this+0x2c */ enum std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator163764e2 _Color;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x10 */ struct MapPosInfo second;
}

struct std::pair<char const *,enum TALKTYPE> {
  /* this+0x0 */ const char * first;
  /* this+0x4 */ enum TALKTYPE second;
}

class std::list<ITEM_INFO,std::allocator<ITEM_INFO> >::iterator {
  /* this+0x0 */ struct std::list<ITEM_INFO,std::allocator<ITEM_INFO> >::_Node * _Ptr;
}

class std::list<ITEM_INFO,std::allocator<ITEM_INFO> >::const_iterator {
  /* this+0x0 */ struct std::list<ITEM_INFO,std::allocator<ITEM_INFO> >::_Node * _Ptr;
}

struct std::list<ITEM_INFO,std::allocator<ITEM_INFO> >::_Node {
  /* this+0x0 */ struct std::list<ITEM_INFO,std::allocator<ITEM_INFO> >::_Node * _Next;
  /* this+0x4 */ struct std::list<ITEM_INFO,std::allocator<ITEM_INFO> >::_Node * _Prev;
  /* this+0x8 */ struct ITEM_INFO _Value;
}

struct std::pair<char const *,unsigned long> {
  /* this+0x0 */ const char * first;
  /* this+0x4 */ unsigned long second;
}

struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
}

class std::allocator<MapPosInfo> {
}

class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator9c63fa22 {
      /* this+0x0 */ class std::allocator<MapPosInfo> allocator;
  /* this+0x1 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > key_compare;
  /* this+0x4 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,std::char_traits<char>,std::allocatord2975fe1 * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class std::_Lockit {
}

class std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> > {
      /* this+0x0 */ class std::allocator<MapPosInfo> allocator;
  /* this+0x1 */ struct std::less<int> key_compare;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

struct std::list<QUEST_INFO,std::allocator<QUEST_INFO> >::_Node {
  /* this+0x0 */ struct std::list<QUEST_INFO,std::allocator<QUEST_INFO> >::_Node * _Next;
  /* this+0x4 */ struct std::list<QUEST_INFO,std::allocator<QUEST_INFO> >::_Node * _Prev;
  /* this+0x8 */ struct QUEST_INFO _Value;
}

struct REQ_ACCOUNT_AID {
  /* this+0x0 */ unsigned long AID;
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > accountName;
}

struct std::pair<char const *,char const *> {
  /* this+0x0 */ const char * first;
  /* this+0x4 */ const char * second;
}

struct std::pair<char const *,bool> {
  /* this+0x0 */ const char * first;
  /* this+0x4 */ unsigned char second;
}

struct std::pair<int,enum TALKTYPE> {
  /* this+0x0 */ int first;
  /* this+0x4 */ enum TALKTYPE second;
}

struct AUCTION_ITEM_SEARCH_INFO {
  /* this+0x0 */ unsigned long AuctionID;
  /* this+0x4 */ char[0x18] SellerName;
  /* this+0x1c */ unsigned short ITID;
  /* this+0x1e */ int Type;
  /* this+0x22 */ short count;
  /* this+0x24 */ unsigned char IsIdentified;
  /* this+0x25 */ unsigned char IsDamaged;
  /* this+0x26 */ unsigned char refiningLevel;
  /* this+0x27 */ struct EQUIPSLOTINFO slot;
  /* this+0x2f */ int NowPrice;
  /* this+0x33 */ int MaxPrice;
  /* this+0x37 */ char[0x18] BuyerName;
  /* this+0x4f */ long DeleteTime;
}

struct std::pair<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,std::char_traits<char>,std:3ce24f73 {
  /* this+0x0 */ class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator7a162c38 first;
  /* this+0x4 */ unsigned char second;
}

struct std::pair<std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

struct std::pair<int const ,MapPosInfo> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ struct MapPosInfo second;
}

class std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> >::iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> >::_Node * _Ptr;
}

class std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> >::_Node * _Ptr;
}

struct std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> >::_Node {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,MapPosInfo> _Value;
  /* this+0x20 */ enum std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> >::_Redbl _Color;
}

class DComp {
}

struct std::iterator<std::output_iterator_tag,void,void> {
}

class std::_Temp_iterator<std::pair<char const *,enum TALKTYPE> > {
  /* this+0x0 */ struct std::_Temp_iterator<std::pair<char const *,enum TALKTYPE> >::_Bufpar _Buf;
  /* this+0x10 */ struct std::_Temp_iterator<std::pair<char const *,enum TALKTYPE> >::_Bufpar * _Pb;
}

struct std::_Temp_iterator<std::pair<char const *,enum TALKTYPE> >::_Bufpar {
  /* this+0x0 */ struct std::pair<char const *,enum TALKTYPE> * _Begin;
  /* this+0x4 */ struct std::pair<char const *,enum TALKTYPE> * _Cur;
  /* this+0x8 */ struct std::pair<char const *,enum TALKTYPE> * _Hiwater;
  /* this+0xc */ int _Len;
}

class SListComp {
}

class IListComp {
}

class SComp {
}

class IListComp2 {
}

class LPCSTRComp {
}

struct rotKeyframe {
  /* this+0x0 */ int frame;
  /* this+0x4 */ float qx;
  /* this+0x8 */ float qy;
  /* this+0xc */ float qz;
  /* this+0x10 */ float qw;
}

class CEffectPrim {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ int m_isChangeProcessed;
  /* this+0xfc */ class CRagEffect * m_master;
  /* this+0x100 */ class CTexture * * m_texture;
  /* this+0x104 */ char * m_playWaveName;
  /* this+0x108 */ int m_isHit;
  /* this+0x10c */ int m_chSpeed;
  /* this+0x110 */ int m_AlphaShow;
  /* this+0x114 */ int m_chRadiSpeed;
  /* this+0x118 */ int m_isDisappear;
  /* this+0x11c */ struct matrix m_matrix;
  /* this+0x14c */ struct matrix m_rotMat;
  /* this+0x17c */ unsigned long m_argb;
  /* this+0x180 */ unsigned long m_renderFlag;
  /* this+0x184 */ int m_any;
  /* this+0x188 */ int m_type;
  /* this+0x18c */ int m_count;
  /* this+0x190 */ int m_chCnt;
  /* this+0x194 */ int m_pattern;
  /* this+0x198 */ int m_stateCnt;
  /* this+0x19c */ int m_duration;
  /* this+0x1a0 */ int m_animSpeed;
  /* this+0x1a4 */ int m_fadeInCnt;
  /* this+0x1a8 */ int m_fadeOutCnt;
  /* this+0x1ac */ int m_numSegment;
  /* this+0x1b0 */ int m_validAngle;
  /* this+0x1b4 */ int m_RGBCycleCnt;
  /* this+0x1b8 */ int m_ChangePoint;
  /* this+0x1bc */ int m_totalTexture;
  /* this+0x1c0 */ int m_playWaveType;
  /* this+0x1c4 */ int[0xa] m_notifyCnt;
  /* this+0x1ec */ int m_RGBCycleDelay;
  /* this+0x1f0 */ int m_commonPattern;
  /* this+0x1f4 */ int m_red;
  /* this+0x1f8 */ int m_green;
  /* this+0x1fc */ int m_blue;
  /* this+0x200 */ int m_redSpeed;
  /* this+0x204 */ int m_greenSpeed;
  /* this+0x208 */ int m_blueSpeed;
  /* this+0x20c */ unsigned char m_repeatAnim;
  /* this+0x210 */ class std::vector<float,std::allocator<float> > m_chPoint;
  /* this+0x220 */ class std::vector<float,std::allocator<float> > m_chVal1;
  /* this+0x230 */ class std::vector<float,std::allocator<float> > m_chVal2;
  /* this+0x240 */ class std::vector<float,std::allocator<float> > m_chVal3;
  /* this+0x250 */ float m_arcAngle;
  /* this+0x254 */ float m_minRadius;
  /* this+0x258 */ float[0x3] m_rotAxis;
  /* this+0x264 */ float m_ChangeSpeed;
  /* this+0x268 */ float m_ChangeAccel;
  /* this+0x26c */ float m_ChangeSpeedx;
  /* this+0x270 */ float m_ChangeSpeedy;
  /* this+0x274 */ float m_ChangeSpeedz;
  /* this+0x278 */ float m_ChangeAccelx;
  /* this+0x27c */ float m_ChangeAccely;
  /* this+0x280 */ float m_ChangeAccelz;
  /* this+0x284 */ float m_speed;
  /* this+0x288 */ float m_accel;
  /* this+0x28c */ float m_ChangeWidthAccel;
  /* this+0x290 */ float m_ChangeWidthSpeed;
  /* this+0x294 */ float m_ChangeHeightSpeed;
  /* this+0x298 */ float m_ChangeHeightAccel;
  /* this+0x29c */ float m_maxAlpha;
  /* this+0x2a0 */ float m_minAlpha;
  /* this+0x2a4 */ float m_u1;
  /* this+0x2a8 */ float m_u2;
  /* this+0x2ac */ float m_v1;
  /* this+0x2b0 */ float m_v2;
  /* this+0x2b4 */ float m_gravSpeed;
  /* this+0x2b8 */ float m_gravAccel;
  /* this+0x2bc */ float m_innerSize;
  /* this+0x2c0 */ float m_outerSize;
  /* this+0x2c4 */ float m_innerSpeed;
  /* this+0x2c8 */ float m_outerSpeed;
  /* this+0x2cc */ float m_innerAccel;
  /* this+0x2d0 */ float m_outerAccel;
  /* this+0x2d4 */ float m_longitude;
  /* this+0x2d8 */ float m_latitude;
  /* this+0x2dc */ float m_roll;
  /* this+0x2e0 */ float m_size;
  /* this+0x2e4 */ float m_sizeSpeed;
  /* this+0x2e8 */ float m_sizeAccel;
  /* this+0x2ec */ float m_alpha;
  /* this+0x2f0 */ float m_alphaSpeed;
  /* this+0x2f4 */ float m_alphaDelta;
  /* this+0x2f8 */ float m_longSpeed;
  /* this+0x2fc */ float m_latiSpeed;
  /* this+0x300 */ float m_rollSpeed;
  /* this+0x304 */ float m_longAccel;
  /* this+0x308 */ float m_latiAccel;
  /* this+0x30c */ float m_rollAccel;
  /* this+0x310 */ float m_radius;
  /* this+0x314 */ float m_radiusSpeed;
  /* this+0x318 */ float m_radiusAccel;
  /* this+0x31c */ float m_widthSize;
  /* this+0x320 */ float m_widthSpeed;
  /* this+0x324 */ float m_widthAccel;
  /* this+0x328 */ float m_heightSize;
  /* this+0x32c */ float m_heightSpeed;
  /* this+0x330 */ float m_heightAccel;
  /* this+0x334 */ float m_maxHeightSize;
  /* this+0x338 */ struct vector3d m_speed3d;
  /* this+0x344 */ struct vector3d m_orgPos;
  /* this+0x350 */ struct vector3d m_deltaPos;
  /* this+0x35c */ struct vector3d m_deltaPos2;
  /* this+0x368 */ struct vector3d m_deltaPos3;
  /* this+0x374 */ struct vector3d m_deltaPosAccel;
  /* this+0x380 */ struct vector3d[0x4] m_segPos;
  /* this+0x3b0 */ struct TeiEffect[0x4] m_GI;
  /* this+0x680 */ struct PrimSegment[0x32] m_segment;
  /* this+0x21d8 */ struct RPTriFace[0x200] m_rp;
}

class CActRes {
  /* this+0x4 */ int m_lockCnt;
  /* this+0x8 */ unsigned long m_timeStamp;
  /* this+0xc */ int m_extIndex;
  /* this+0x10 */ class CHash m_fName;
  /* this+0x110 */ class std::vector<CAction,std::allocator<CAction> > actions;
  /* this+0x120 */ int numMaxClipPerMotion;
  /* this+0x124 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_events;
  /* this+0x134 */ class std::vector<float,std::allocator<float> > m_delay;
}

struct CMotion {
  /* this+0x0 */ struct tagRECT range1;
  /* this+0x10 */ struct tagRECT range2;
  /* this+0x20 */ class std::vector<CSprClip,std::allocator<CSprClip> > sprClips;
  /* this+0x30 */ int numClips;
  /* this+0x34 */ int m_eventId;
  /* this+0x38 */ class std::vector<CAttachPointInfo,std::allocator<CAttachPointInfo> > attachInfo;
  /* this+0x48 */ int attachCnt;
}

struct SprImg {
  /* this+0x0 */ short width;
  /* this+0x2 */ short height;
  /* this+0x4 */ short isHalfW;
  /* this+0x6 */ short isHalfH;
  /* this+0x8 */ class CTexture * tex;
  /* this+0xc */ unsigned char * m_8bitImage;
}

struct WeatherInfo {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > map;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > weather;
}

class CPc {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ int m_efId;
  /* this+0xfc */ int m_Sk_Level;
  /* this+0x100 */ int m_isLoop;
  /* this+0x104 */ class std::list<CRagEffect *,std::allocator<CRagEffect *> > m_effectList;
  /* this+0x110 */ class CRagEffect * m_beginSpellEffect;
  /* this+0x114 */ class CRagEffect * m_magicTargetEffect;
  /* this+0x118 */ int m_moveDestX;
  /* this+0x11c */ int m_moveDestY;
  /* this+0x120 */ unsigned long m_speed;
  /* this+0x124 */ int m_isCounter;
  /* this+0x128 */ int m_isTrickDead;
  /* this+0x12c */ int m_isPlayHitWave;
  /* this+0x130 */ int m_isAsuraAttack;
  /* this+0x134 */ char * m_emblemWnd;
  /* this+0x138 */ char * m_WordDisplayWnd;
  /* this+0x13c */ char[0x80] m_hitWaveName;
  /* this+0x1bc */ unsigned long m_colorEndTick;
  /* this+0x1c0 */ short m_clevel;
  /* this+0x1c2 */ short m_MaxHp;
  /* this+0x1c4 */ short m_Hp;
  /* this+0x1c6 */ short m_MaxSp;
  /* this+0x1c8 */ short m_Sp;
  /* this+0x1cc */ int m_Exp;
  /* this+0x1d0 */ short m_Str;
  /* this+0x1d2 */ short m_Int;
  /* this+0x1d4 */ short m_Dex;
  /* this+0x1d6 */ short m_Vit;
  /* this+0x1d8 */ short m_Luk;
  /* this+0x1da */ short m_Agi;
  /* this+0x1dc */ struct vector3d m_accel;
  /* this+0x1e8 */ class CPathInfo m_path;
  /* this+0x204 */ unsigned long m_moveStartTime;
  /* this+0x208 */ unsigned char m_isNeverAnimation;
  /* this+0x20c */ int m_pathStartCell;
  /* this+0x210 */ float m_dist;
  /* this+0x214 */ unsigned long m_lastProcessStateTime;
  /* this+0x218 */ unsigned long m_lastServerTime;
  /* this+0x21c */ unsigned long m_chatTick;
  /* this+0x220 */ unsigned long m_targetGid;
  /* this+0x224 */ float m_attackMotion;
  /* this+0x228 */ int m_isBladeStop;
  /* this+0x22c */ unsigned long m_gid;
  /* this+0x230 */ int m_job;
  /* this+0x234 */ int m_sex;
  /* this+0x238 */ class UIBalloonText * m_balloon;
  /* this+0x23c */ class UIChatRoomTitle * m_chatTitle;
  /* this+0x240 */ class UIMerchantShopTitle * m_merchantShopTitle;
  /* this+0x244 */ class UIRechargeGage * m_skillRechargeGage;
  /* this+0x248 */ unsigned long m_freezeEndTick;
  /* this+0x24c */ unsigned long m_petEmotionStartTick;
  /* this+0x250 */ unsigned long m_skillRechargeEndTick;
  /* this+0x254 */ unsigned long m_skillRechargeStartTick;
  /* this+0x258 */ int m_chatWidth;
  /* this+0x25c */ int m_chatHeight;
  /* this+0x260 */ int m_nameWidth;
  /* this+0x264 */ int m_xSize;
  /* this+0x268 */ int m_ySize;
  /* this+0x26c */ int m_headType;
  /* this+0x270 */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackList;
  /* this+0x27c */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackedList;
  /* this+0x288 */ int m_willBeDead;
  /* this+0x28c */ int m_is99;
  /* this+0x290 */ char m_99;
  /* this+0x294 */ int m_bodyState;
  /* this+0x298 */ int m_effectState;
  /* this+0x29c */ int m_healthState;
  /* this+0x2a0 */ int m_pkState;
  /* this+0x2a4 */ float m_damageDestX;
  /* this+0x2a8 */ float m_damageDestZ;
  /* this+0x2ac */ unsigned long m_effectLaunchCnt;
  /* this+0x2b0 */ unsigned long m_vanishTime;
  /* this+0x2b4 */ int m_actorType;
  /* this+0x2b8 */ int m_bIsMemberAndVisible;
  /* this+0x2bc */ int m_gdid;
  /* this+0x2c0 */ int m_emblemVersion;
  /* this+0x2c4 */ class CMercenaryAI * m_homunAI;
  /* this+0x2c8 */ class CMercenaryAI * m_merAI;
  /* this+0x2cc */ unsigned char m_objectType;
  /* this+0x2d0 */ struct _MSG2AI m_homunMsg;
  /* this+0x2e8 */ struct _MSG2AI m_homunResMsg;
  /* this+0x300 */ struct _MSG2AI m_merMsg;
  /* this+0x318 */ struct _MSG2AI m_merResMsg;
  /* this+0x330 */ class CMsgEffect * m_birdEffect;
  /* this+0x334 */ class CMsgEffect * m_cartEffect;
  /* this+0x338 */ class CMsgEffect * m_pkEffect;
  /* this+0x33c */ class CMsgEffect * m_iceEffect;
  /* this+0x340 */ class CMsgEffect * m_curseEffect;
  /* this+0x344 */ class CMsgEffect * m_sleepEffect;
  /* this+0x348 */ class CMsgEffect * m_stunEffect;
  /* this+0x34c */ class CMsgEffect * m_silenceEffect;
  /* this+0x350 */ class CMsgEffect * m_angelusEffect;
  /* this+0x354 */ class CMsgEffect * m_crusisEffect;
  /* this+0x358 */ class CMsgEffect * m_chatProhibitEffect;
  /* this+0x35c */ class CMsgEffect * m_cursorEffect;
  /* this+0x360 */ class std::list<CMsgEffect *,std::allocator<CMsgEffect *> > m_msgEffectList;
  /* this+0x36c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_imfName;
  /* this+0x37c */ int m_honor;
  /* this+0x380 */ int m_virtue;
  /* this+0x384 */ int m_headDir;
  /* this+0x388 */ int m_head;
  /* this+0x38c */ int m_headPalette;
  /* this+0x390 */ int m_weapon;
  /* this+0x394 */ int m_accessory;
  /* this+0x398 */ int m_accessory2;
  /* this+0x39c */ int m_accessory3;
  /* this+0x3a0 */ int m_shield;
  /* this+0x3a4 */ int m_shoe;
  /* this+0x3a8 */ int m_shoe_count;
  /* this+0x3ac */ struct vector3d shoe_pos;
  /* this+0x3b8 */ int m_renderWithoutLayer;
  /* this+0x3bc */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_headPaletteName;
  /* this+0x3cc */ class UIPcGage * m_gage;
  /* this+0x3d0 */ long m_pk_rank;
  /* this+0x3d4 */ long m_pk_total;
  /* this+0x3d8 */ class std::vector<CSprRes *,std::allocator<CSprRes *> > m_sprResList;
  /* this+0x3e8 */ class std::vector<CActRes *,std::allocator<CActRes *> > m_actResList;
}

class CRenderObject {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
}

struct KAC_LAYER {
  /* this+0x0 */ int cTex;
  /* this+0x4 */ int iCurAniFrame;
  /* this+0x8 */ class CTexture *[0x6e] m_tex;
  /* this+0x1c0 */ const char *[0x6e] m_texName;
  /* this+0x378 */ int cAniKey;
  /* this+0x37c */ struct KAC_KEYFRAME * aAniKey;
}

struct KAC_XFORMDATA {
  /* this+0x0 */ float x;
  /* this+0x4 */ float y;
  /* this+0x8 */ float u;
  /* this+0xc */ float v;
  /* this+0x10 */ float us;
  /* this+0x14 */ float vs;
  /* this+0x18 */ float u2;
  /* this+0x1c */ float v2;
  /* this+0x20 */ float us2;
  /* this+0x24 */ float vs2;
  /* this+0x28 */ float[0x4] ax;
  /* this+0x38 */ float[0x4] ay;
  /* this+0x48 */ float aniframe;
  /* this+0x4c */ unsigned long anitype;
  /* this+0x50 */ float anidelta;
  /* this+0x54 */ float rz;
  /* this+0x58 */ float crR;
  /* this+0x5c */ float crG;
  /* this+0x60 */ float crB;
  /* this+0x64 */ float crA;
  /* this+0x68 */ unsigned long srcalpha;
  /* this+0x6c */ unsigned long destalpha;
  /* this+0x70 */ unsigned long mtpreset;
}

struct RPFace {
  /* this+0x0 */ struct tlvertex3d * verts;
  /* this+0x4 */ int numVerts;
  /* this+0x8 */ class CTexture * tex;
  /* this+0xc */ unsigned short * indices;
  /* this+0x10 */ unsigned long numIndices;
  /* this+0x14 */ unsigned long srcAlphaMode;
  /* this+0x18 */ unsigned long destAlphaMode;
  /* this+0x1c */ unsigned long mtPreset;
  /* this+0x20 */ enum _D3DPRIMITIVETYPE primType;
}

class std::list<CEffectPrim *,std::allocator<CEffectPrim *> > {
  /* this+0x0 */ class std::allocator<CEffectPrim *> allocator;
  /* this+0x4 */ struct std::list<CEffectPrim *,std::allocator<CEffectPrim *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<CEffectPrim *,std::allocator<CEffectPrim *> >::iterator {
  /* this+0x0 */ struct std::list<CEffectPrim *,std::allocator<CEffectPrim *> >::_Node * _Ptr;
}

struct MOVESTRUCT {
  /* this+0x0 */ unsigned long startTime;
  /* this+0x4 */ int sx;
  /* this+0x8 */ int sy;
  /* this+0xc */ int cellX;
  /* this+0x10 */ int cellY;
  /* this+0x14 */ int dx;
  /* this+0x18 */ int dy;
}

class CImfRes {
  /* this+0x4 */ int m_lockCnt;
  /* this+0x8 */ unsigned long m_timeStamp;
  /* this+0xc */ int m_extIndex;
  /* this+0x10 */ class CHash m_fName;
  /* this+0x110 */ class std::vector<std::vector<ImfData,std::allocator<ImfData> >,std::allocator<std::vector<ImfData,std::allocator<ImfData> > > > m_ImfData;
  /* this+0x120 */ int[0xf] m_maxAction;
  /* this+0x15c */ int[0x68][0xf] m_maxMotion;
}

class CGrannyPc {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ int m_efId;
  /* this+0xfc */ int m_Sk_Level;
  /* this+0x100 */ int m_isLoop;
  /* this+0x104 */ class std::list<CRagEffect *,std::allocator<CRagEffect *> > m_effectList;
  /* this+0x110 */ class CRagEffect * m_beginSpellEffect;
  /* this+0x114 */ class CRagEffect * m_magicTargetEffect;
  /* this+0x118 */ int m_moveDestX;
  /* this+0x11c */ int m_moveDestY;
  /* this+0x120 */ unsigned long m_speed;
  /* this+0x124 */ int m_isCounter;
  /* this+0x128 */ int m_isTrickDead;
  /* this+0x12c */ int m_isPlayHitWave;
  /* this+0x130 */ int m_isAsuraAttack;
  /* this+0x134 */ char * m_emblemWnd;
  /* this+0x138 */ char * m_WordDisplayWnd;
  /* this+0x13c */ char[0x80] m_hitWaveName;
  /* this+0x1bc */ unsigned long m_colorEndTick;
  /* this+0x1c0 */ short m_clevel;
  /* this+0x1c2 */ short m_MaxHp;
  /* this+0x1c4 */ short m_Hp;
  /* this+0x1c6 */ short m_MaxSp;
  /* this+0x1c8 */ short m_Sp;
  /* this+0x1cc */ int m_Exp;
  /* this+0x1d0 */ short m_Str;
  /* this+0x1d2 */ short m_Int;
  /* this+0x1d4 */ short m_Dex;
  /* this+0x1d6 */ short m_Vit;
  /* this+0x1d8 */ short m_Luk;
  /* this+0x1da */ short m_Agi;
  /* this+0x1dc */ struct vector3d m_accel;
  /* this+0x1e8 */ class CPathInfo m_path;
  /* this+0x204 */ unsigned long m_moveStartTime;
  /* this+0x208 */ unsigned char m_isNeverAnimation;
  /* this+0x20c */ int m_pathStartCell;
  /* this+0x210 */ float m_dist;
  /* this+0x214 */ unsigned long m_lastProcessStateTime;
  /* this+0x218 */ unsigned long m_lastServerTime;
  /* this+0x21c */ unsigned long m_chatTick;
  /* this+0x220 */ unsigned long m_targetGid;
  /* this+0x224 */ float m_attackMotion;
  /* this+0x228 */ int m_isBladeStop;
  /* this+0x22c */ unsigned long m_gid;
  /* this+0x230 */ int m_job;
  /* this+0x234 */ int m_sex;
  /* this+0x238 */ class UIBalloonText * m_balloon;
  /* this+0x23c */ class UIChatRoomTitle * m_chatTitle;
  /* this+0x240 */ class UIMerchantShopTitle * m_merchantShopTitle;
  /* this+0x244 */ class UIRechargeGage * m_skillRechargeGage;
  /* this+0x248 */ unsigned long m_freezeEndTick;
  /* this+0x24c */ unsigned long m_petEmotionStartTick;
  /* this+0x250 */ unsigned long m_skillRechargeEndTick;
  /* this+0x254 */ unsigned long m_skillRechargeStartTick;
  /* this+0x258 */ int m_chatWidth;
  /* this+0x25c */ int m_chatHeight;
  /* this+0x260 */ int m_nameWidth;
  /* this+0x264 */ int m_xSize;
  /* this+0x268 */ int m_ySize;
  /* this+0x26c */ int m_headType;
  /* this+0x270 */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackList;
  /* this+0x27c */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackedList;
  /* this+0x288 */ int m_willBeDead;
  /* this+0x28c */ int m_is99;
  /* this+0x290 */ char m_99;
  /* this+0x294 */ int m_bodyState;
  /* this+0x298 */ int m_effectState;
  /* this+0x29c */ int m_healthState;
  /* this+0x2a0 */ int m_pkState;
  /* this+0x2a4 */ float m_damageDestX;
  /* this+0x2a8 */ float m_damageDestZ;
  /* this+0x2ac */ unsigned long m_effectLaunchCnt;
  /* this+0x2b0 */ unsigned long m_vanishTime;
  /* this+0x2b4 */ int m_actorType;
  /* this+0x2b8 */ int m_bIsMemberAndVisible;
  /* this+0x2bc */ int m_gdid;
  /* this+0x2c0 */ int m_emblemVersion;
  /* this+0x2c4 */ class CMercenaryAI * m_homunAI;
  /* this+0x2c8 */ class CMercenaryAI * m_merAI;
  /* this+0x2cc */ unsigned char m_objectType;
  /* this+0x2d0 */ struct _MSG2AI m_homunMsg;
  /* this+0x2e8 */ struct _MSG2AI m_homunResMsg;
  /* this+0x300 */ struct _MSG2AI m_merMsg;
  /* this+0x318 */ struct _MSG2AI m_merResMsg;
  /* this+0x330 */ class CMsgEffect * m_birdEffect;
  /* this+0x334 */ class CMsgEffect * m_cartEffect;
  /* this+0x338 */ class CMsgEffect * m_pkEffect;
  /* this+0x33c */ class CMsgEffect * m_iceEffect;
  /* this+0x340 */ class CMsgEffect * m_curseEffect;
  /* this+0x344 */ class CMsgEffect * m_sleepEffect;
  /* this+0x348 */ class CMsgEffect * m_stunEffect;
  /* this+0x34c */ class CMsgEffect * m_silenceEffect;
  /* this+0x350 */ class CMsgEffect * m_angelusEffect;
  /* this+0x354 */ class CMsgEffect * m_crusisEffect;
  /* this+0x358 */ class CMsgEffect * m_chatProhibitEffect;
  /* this+0x35c */ class CMsgEffect * m_cursorEffect;
  /* this+0x360 */ class std::list<CMsgEffect *,std::allocator<CMsgEffect *> > m_msgEffectList;
  /* this+0x36c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_imfName;
  /* this+0x37c */ int m_honor;
  /* this+0x380 */ int m_virtue;
  /* this+0x384 */ int m_headDir;
  /* this+0x388 */ int m_head;
  /* this+0x38c */ int m_headPalette;
  /* this+0x390 */ int m_weapon;
  /* this+0x394 */ int m_accessory;
  /* this+0x398 */ int m_accessory2;
  /* this+0x39c */ int m_accessory3;
  /* this+0x3a0 */ int m_shield;
  /* this+0x3a4 */ int m_shoe;
  /* this+0x3a8 */ int m_renderWithoutLayer;
  /* this+0x3ac */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_headPaletteName;
  /* this+0x3bc */ class UIPcGage * m_gage;
  /* this+0x3c0 */ long m_pk_rank;
  /* this+0x3c4 */ long m_pk_total;
  /* this+0x3c8 */ class C3dGrannyModelRes * m_GrannyActorRes;
  /* this+0x3cc */ class C3dGrannyModelRes *[0xa] m_GrannyPartRes;
  /* this+0x3f4 */ struct granny_model_instance * m_Instance;
  /* this+0x3f8 */ struct RPMesh *[0x1e] m_rp;
  /* this+0x470 */ struct RPMesh *[0x1e][0xa] m_rpPart;
  /* this+0x920 */ struct granny_pnt332_vertex *[0x1e] m_matVer;
  /* this+0x998 */ struct granny_pnt332_vertex *[0x1e][0xa] m_matVerPart;
  /* this+0xe48 */ struct granny_system_clock m_fAniCnt;
  /* this+0xe58 */ struct granny_system_clock m_fLastAniCnt;
  /* this+0xe68 */ float m_GameClock;
  /* this+0xe6c */ int m_curAction;
  /* this+0xe70 */ int m_baseAction;
  /* this+0xe74 */ float m_fCurRot;
  /* this+0xe78 */ unsigned char m_RenderAlpha;
  /* this+0xe7c */ unsigned long m_nVertCol;
  /* this+0xe80 */ int m_nLastActAnimation;
  /* this+0xe84 */ int m_curFrame;
  /* this+0xe88 */ char[0x104] m_strJobFn;
  /* this+0xf8c */ int m_nRenderType;
  /* this+0xf90 */ class CTexture * m_pCellTex;
  /* this+0xf94 */ struct granny_control *[0x14] m_Control;
  /* this+0xfe4 */ unsigned char m_isFirstProcess;
  /* this+0xfe8 */ int m_nUpdateAniFlag;
  /* this+0xfec */ class CTexture *[0x1e][0xa] m_pTex;
  /* this+0x149c */ void *[0x1e][0xa] m_pFaceArr;
  /* this+0x194c */ int[0x1e][0xa] m_nIndexNo;
  /* this+0x1dfc */ struct matrix[0x1e] m_matPose;
  /* this+0x239c */ char[0x3] m_strJobSymbol;
  /* this+0x239f */ char[0x1e][0x8] m_strPartSymbol;
  /* this+0x248f */ char[0x3] m_strBoneSymbol;
  /* this+0x2494 */ struct granny_world_pose * m_pWorldPose;
  /* this+0x2498 */ class CTexture * m_shadowTex;
  /* this+0x249c */ class std::vector<vector3d,std::allocator<vector3d> > m_shadowDotList;
  /* this+0x24ac */ struct HairInfo m_hair;
}

struct GrannyLightInfo {
  /* this+0x0 */ struct vector3d eyeVec;
  /* this+0xc */ int nContrast;
  /* this+0x10 */ int lightR;
  /* this+0x14 */ int lightG;
  /* this+0x18 */ int lightB;
}

class C3dGrannyModelRes {
  /* this+0x4 */ int m_lockCnt;
  /* this+0x8 */ unsigned long m_timeStamp;
  /* this+0xc */ int m_extIndex;
  /* this+0x10 */ class CHash m_fName;
  /* this+0x110 */ float m_ProjectZ;
  /* this+0x114 */ struct GrannyScene m_Scene;
  /* this+0x390 */ struct granny_model * m_pModel;
  /* this+0x394 */ struct vector3d m_HitareaPos;
  /* this+0x3a0 */ float m_HitRadx;
  /* this+0x3a4 */ float m_HitRady;
  /* this+0x3a8 */ class C3dGrannyBoneRes * m_pBoneRes;
  /* this+0x3ac */ int m_nBoneType;
  /* this+0x3b0 */ struct HairInfo * m_hair;
  /* this+0x3b4 */ struct granny_skeleton * m_pSkeleton;
}

struct RPMesh {
  /* this+0x0 */ struct tlvertex3d * verts;
  /* this+0x4 */ int numVerts;
  /* this+0x8 */ class CTexture * tex;
  /* this+0xc */ unsigned short * indices;
  /* this+0x10 */ unsigned long numIndices;
  /* this+0x14 */ unsigned long srcAlphaMode;
  /* this+0x18 */ unsigned long destAlphaMode;
  /* this+0x1c */ unsigned long mtPreset;
  /* this+0x20 */ enum _D3DPRIMITIVETYPE primType;
}

struct granny_pnt332_vertex {
  /* this+0x0 */ float[0x3] Position;
  /* this+0xc */ float[0x3] Normal;
  /* this+0x18 */ float[0x2] UV;
}

struct granny_world_pose {
}

class CView {
  /* this+0x4 */ float m_sideQuake;
  /* this+0x8 */ float m_frontQuake;
  /* this+0xc */ float m_latitudeQuake;
  /* this+0x10 */ unsigned char m_isFPSmode;
  /* this+0x14 */ int m_isQuake;
  /* this+0x18 */ unsigned long m_quakeStartTick;
  /* this+0x1c */ unsigned long m_QuakeTime;
  /* this+0x20 */ struct ViewInfo3d m_cur;
  /* this+0x38 */ struct ViewInfo3d m_dest;
  /* this+0x50 */ struct ViewInfo3d m_backupCur;
  /* this+0x68 */ struct ViewInfo3d m_backupDest;
  /* this+0x80 */ struct vector3d m_from;
  /* this+0x8c */ struct vector3d m_up;
  /* this+0x98 */ struct matrix m_viewMatrix;
  /* this+0xc8 */ struct matrix m_invViewMatrix;
  /* this+0xf8 */ class CViewFrustum m_viewFrustum;
  /* this+0x1b8 */ class CWorld * m_world;
  /* this+0x1bc */ class CSkyBoxEllipse * m_skyBox;
}

class std::vector<CSprRes *,std::allocator<CSprRes *> > {
  /* this+0x0 */ class std::allocator<CSprRes *> allocator;
  /* this+0x4 */ class CSprRes * * _First;
  /* this+0x8 */ class CSprRes * * _Last;
  /* this+0xc */ class CSprRes * * _End;
}

class std::vector<CActRes *,std::allocator<CActRes *> > {
  /* this+0x0 */ class std::allocator<CActRes *> allocator;
  /* this+0x4 */ class CActRes * * _First;
  /* this+0x8 */ class CActRes * * _Last;
  /* this+0xc */ class CActRes * * _End;
}

class CBlowEffect {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
}

class CCorpse {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
}

class CBlurPC {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ int m_efId;
  /* this+0xfc */ int m_Sk_Level;
  /* this+0x100 */ int m_isLoop;
  /* this+0x104 */ class std::list<CRagEffect *,std::allocator<CRagEffect *> > m_effectList;
  /* this+0x110 */ class CRagEffect * m_beginSpellEffect;
  /* this+0x114 */ class CRagEffect * m_magicTargetEffect;
  /* this+0x118 */ int m_moveDestX;
  /* this+0x11c */ int m_moveDestY;
  /* this+0x120 */ unsigned long m_speed;
  /* this+0x124 */ int m_isCounter;
  /* this+0x128 */ int m_isTrickDead;
  /* this+0x12c */ int m_isPlayHitWave;
  /* this+0x130 */ int m_isAsuraAttack;
  /* this+0x134 */ char * m_emblemWnd;
  /* this+0x138 */ char * m_WordDisplayWnd;
  /* this+0x13c */ char[0x80] m_hitWaveName;
  /* this+0x1bc */ unsigned long m_colorEndTick;
  /* this+0x1c0 */ short m_clevel;
  /* this+0x1c2 */ short m_MaxHp;
  /* this+0x1c4 */ short m_Hp;
  /* this+0x1c6 */ short m_MaxSp;
  /* this+0x1c8 */ short m_Sp;
  /* this+0x1cc */ int m_Exp;
  /* this+0x1d0 */ short m_Str;
  /* this+0x1d2 */ short m_Int;
  /* this+0x1d4 */ short m_Dex;
  /* this+0x1d6 */ short m_Vit;
  /* this+0x1d8 */ short m_Luk;
  /* this+0x1da */ short m_Agi;
  /* this+0x1dc */ struct vector3d m_accel;
  /* this+0x1e8 */ class CPathInfo m_path;
  /* this+0x204 */ unsigned long m_moveStartTime;
  /* this+0x208 */ unsigned char m_isNeverAnimation;
  /* this+0x20c */ int m_pathStartCell;
  /* this+0x210 */ float m_dist;
  /* this+0x214 */ unsigned long m_lastProcessStateTime;
  /* this+0x218 */ unsigned long m_lastServerTime;
  /* this+0x21c */ unsigned long m_chatTick;
  /* this+0x220 */ unsigned long m_targetGid;
  /* this+0x224 */ float m_attackMotion;
  /* this+0x228 */ int m_isBladeStop;
  /* this+0x22c */ unsigned long m_gid;
  /* this+0x230 */ int m_job;
  /* this+0x234 */ int m_sex;
  /* this+0x238 */ class UIBalloonText * m_balloon;
  /* this+0x23c */ class UIChatRoomTitle * m_chatTitle;
  /* this+0x240 */ class UIMerchantShopTitle * m_merchantShopTitle;
  /* this+0x244 */ class UIRechargeGage * m_skillRechargeGage;
  /* this+0x248 */ unsigned long m_freezeEndTick;
  /* this+0x24c */ unsigned long m_petEmotionStartTick;
  /* this+0x250 */ unsigned long m_skillRechargeEndTick;
  /* this+0x254 */ unsigned long m_skillRechargeStartTick;
  /* this+0x258 */ int m_chatWidth;
  /* this+0x25c */ int m_chatHeight;
  /* this+0x260 */ int m_nameWidth;
  /* this+0x264 */ int m_xSize;
  /* this+0x268 */ int m_ySize;
  /* this+0x26c */ int m_headType;
  /* this+0x270 */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackList;
  /* this+0x27c */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackedList;
  /* this+0x288 */ int m_willBeDead;
  /* this+0x28c */ int m_is99;
  /* this+0x290 */ char m_99;
  /* this+0x294 */ int m_bodyState;
  /* this+0x298 */ int m_effectState;
  /* this+0x29c */ int m_healthState;
  /* this+0x2a0 */ int m_pkState;
  /* this+0x2a4 */ float m_damageDestX;
  /* this+0x2a8 */ float m_damageDestZ;
  /* this+0x2ac */ unsigned long m_effectLaunchCnt;
  /* this+0x2b0 */ unsigned long m_vanishTime;
  /* this+0x2b4 */ int m_actorType;
  /* this+0x2b8 */ int m_bIsMemberAndVisible;
  /* this+0x2bc */ int m_gdid;
  /* this+0x2c0 */ int m_emblemVersion;
  /* this+0x2c4 */ class CMercenaryAI * m_homunAI;
  /* this+0x2c8 */ class CMercenaryAI * m_merAI;
  /* this+0x2cc */ unsigned char m_objectType;
  /* this+0x2d0 */ struct _MSG2AI m_homunMsg;
  /* this+0x2e8 */ struct _MSG2AI m_homunResMsg;
  /* this+0x300 */ struct _MSG2AI m_merMsg;
  /* this+0x318 */ struct _MSG2AI m_merResMsg;
  /* this+0x330 */ class CMsgEffect * m_birdEffect;
  /* this+0x334 */ class CMsgEffect * m_cartEffect;
  /* this+0x338 */ class CMsgEffect * m_pkEffect;
  /* this+0x33c */ class CMsgEffect * m_iceEffect;
  /* this+0x340 */ class CMsgEffect * m_curseEffect;
  /* this+0x344 */ class CMsgEffect * m_sleepEffect;
  /* this+0x348 */ class CMsgEffect * m_stunEffect;
  /* this+0x34c */ class CMsgEffect * m_silenceEffect;
  /* this+0x350 */ class CMsgEffect * m_angelusEffect;
  /* this+0x354 */ class CMsgEffect * m_crusisEffect;
  /* this+0x358 */ class CMsgEffect * m_chatProhibitEffect;
  /* this+0x35c */ class CMsgEffect * m_cursorEffect;
  /* this+0x360 */ class std::list<CMsgEffect *,std::allocator<CMsgEffect *> > m_msgEffectList;
  /* this+0x36c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_imfName;
  /* this+0x37c */ int m_honor;
  /* this+0x380 */ int m_virtue;
  /* this+0x384 */ int m_headDir;
  /* this+0x388 */ int m_head;
  /* this+0x38c */ int m_headPalette;
  /* this+0x390 */ int m_weapon;
  /* this+0x394 */ int m_accessory;
  /* this+0x398 */ int m_accessory2;
  /* this+0x39c */ int m_accessory3;
  /* this+0x3a0 */ int m_shield;
  /* this+0x3a4 */ int m_shoe;
  /* this+0x3a8 */ int m_shoe_count;
  /* this+0x3ac */ struct vector3d shoe_pos;
  /* this+0x3b8 */ int m_renderWithoutLayer;
  /* this+0x3bc */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_headPaletteName;
  /* this+0x3cc */ class UIPcGage * m_gage;
  /* this+0x3d0 */ long m_pk_rank;
  /* this+0x3d4 */ long m_pk_total;
  /* this+0x3d8 */ class std::vector<CSprRes *,std::allocator<CSprRes *> > m_sprResList;
  /* this+0x3e8 */ class std::vector<CActRes *,std::allocator<CActRes *> > m_actResList;
  /* this+0x3f8 */ float m_motionY;
  /* this+0x3fc */ unsigned long m_alphaDelta;
  /* this+0x400 */ unsigned long m_r;
  /* this+0x404 */ unsigned long m_g;
  /* this+0x408 */ unsigned long m_b;
}

class CMasterChaser {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ class CGameActor * m_pursuedMaster;
}

class CNumEffect {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ float m_orgPosY;
  /* this+0xfc */ float m_orgZoom;
}

class CSoundMaker {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_waveName;
  /* this+0x108 */ float m_vol;
  /* this+0x10c */ int m_width;
  /* this+0x110 */ int m_height;
  /* this+0x114 */ float m_range;
  /* this+0x118 */ float m_diagonal;
  /* this+0x11c */ unsigned long m_lastPlayTime;
  /* this+0x120 */ unsigned long m_cycle;
}

class CGndRiser {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ int m_efId;
  /* this+0xfc */ int m_Sk_Level;
  /* this+0x100 */ int m_isLoop;
  /* this+0x104 */ class std::list<CRagEffect *,std::allocator<CRagEffect *> > m_effectList;
  /* this+0x110 */ class CRagEffect * m_beginSpellEffect;
  /* this+0x114 */ class CRagEffect * m_magicTargetEffect;
  /* this+0x118 */ int m_lastCnt;
  /* this+0x11c */ int m_sx;
  /* this+0x120 */ int m_sy;
}

class CNpc {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ int m_efId;
  /* this+0xfc */ int m_Sk_Level;
  /* this+0x100 */ int m_isLoop;
  /* this+0x104 */ class std::list<CRagEffect *,std::allocator<CRagEffect *> > m_effectList;
  /* this+0x110 */ class CRagEffect * m_beginSpellEffect;
  /* this+0x114 */ class CRagEffect * m_magicTargetEffect;
  /* this+0x118 */ int m_moveDestX;
  /* this+0x11c */ int m_moveDestY;
  /* this+0x120 */ unsigned long m_speed;
  /* this+0x124 */ int m_isCounter;
  /* this+0x128 */ int m_isTrickDead;
  /* this+0x12c */ int m_isPlayHitWave;
  /* this+0x130 */ int m_isAsuraAttack;
  /* this+0x134 */ char * m_emblemWnd;
  /* this+0x138 */ char * m_WordDisplayWnd;
  /* this+0x13c */ char[0x80] m_hitWaveName;
  /* this+0x1bc */ unsigned long m_colorEndTick;
  /* this+0x1c0 */ short m_clevel;
  /* this+0x1c2 */ short m_MaxHp;
  /* this+0x1c4 */ short m_Hp;
  /* this+0x1c6 */ short m_MaxSp;
  /* this+0x1c8 */ short m_Sp;
  /* this+0x1cc */ int m_Exp;
  /* this+0x1d0 */ short m_Str;
  /* this+0x1d2 */ short m_Int;
  /* this+0x1d4 */ short m_Dex;
  /* this+0x1d6 */ short m_Vit;
  /* this+0x1d8 */ short m_Luk;
  /* this+0x1da */ short m_Agi;
  /* this+0x1dc */ struct vector3d m_accel;
  /* this+0x1e8 */ class CPathInfo m_path;
  /* this+0x204 */ unsigned long m_moveStartTime;
  /* this+0x208 */ unsigned char m_isNeverAnimation;
  /* this+0x20c */ int m_pathStartCell;
  /* this+0x210 */ float m_dist;
  /* this+0x214 */ unsigned long m_lastProcessStateTime;
  /* this+0x218 */ unsigned long m_lastServerTime;
  /* this+0x21c */ unsigned long m_chatTick;
  /* this+0x220 */ unsigned long m_targetGid;
  /* this+0x224 */ float m_attackMotion;
  /* this+0x228 */ int m_isBladeStop;
  /* this+0x22c */ unsigned long m_gid;
  /* this+0x230 */ int m_job;
  /* this+0x234 */ int m_sex;
  /* this+0x238 */ class UIBalloonText * m_balloon;
  /* this+0x23c */ class UIChatRoomTitle * m_chatTitle;
  /* this+0x240 */ class UIMerchantShopTitle * m_merchantShopTitle;
  /* this+0x244 */ class UIRechargeGage * m_skillRechargeGage;
  /* this+0x248 */ unsigned long m_freezeEndTick;
  /* this+0x24c */ unsigned long m_petEmotionStartTick;
  /* this+0x250 */ unsigned long m_skillRechargeEndTick;
  /* this+0x254 */ unsigned long m_skillRechargeStartTick;
  /* this+0x258 */ int m_chatWidth;
  /* this+0x25c */ int m_chatHeight;
  /* this+0x260 */ int m_nameWidth;
  /* this+0x264 */ int m_xSize;
  /* this+0x268 */ int m_ySize;
  /* this+0x26c */ int m_headType;
  /* this+0x270 */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackList;
  /* this+0x27c */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackedList;
  /* this+0x288 */ int m_willBeDead;
  /* this+0x28c */ int m_is99;
  /* this+0x290 */ char m_99;
  /* this+0x294 */ int m_bodyState;
  /* this+0x298 */ int m_effectState;
  /* this+0x29c */ int m_healthState;
  /* this+0x2a0 */ int m_pkState;
  /* this+0x2a4 */ float m_damageDestX;
  /* this+0x2a8 */ float m_damageDestZ;
  /* this+0x2ac */ unsigned long m_effectLaunchCnt;
  /* this+0x2b0 */ unsigned long m_vanishTime;
  /* this+0x2b4 */ int m_actorType;
  /* this+0x2b8 */ int m_bIsMemberAndVisible;
  /* this+0x2bc */ int m_gdid;
  /* this+0x2c0 */ int m_emblemVersion;
  /* this+0x2c4 */ class CMercenaryAI * m_homunAI;
  /* this+0x2c8 */ class CMercenaryAI * m_merAI;
  /* this+0x2cc */ unsigned char m_objectType;
  /* this+0x2d0 */ struct _MSG2AI m_homunMsg;
  /* this+0x2e8 */ struct _MSG2AI m_homunResMsg;
  /* this+0x300 */ struct _MSG2AI m_merMsg;
  /* this+0x318 */ struct _MSG2AI m_merResMsg;
  /* this+0x330 */ class CMsgEffect * m_birdEffect;
  /* this+0x334 */ class CMsgEffect * m_cartEffect;
  /* this+0x338 */ class CMsgEffect * m_pkEffect;
  /* this+0x33c */ class CMsgEffect * m_iceEffect;
  /* this+0x340 */ class CMsgEffect * m_curseEffect;
  /* this+0x344 */ class CMsgEffect * m_sleepEffect;
  /* this+0x348 */ class CMsgEffect * m_stunEffect;
  /* this+0x34c */ class CMsgEffect * m_silenceEffect;
  /* this+0x350 */ class CMsgEffect * m_angelusEffect;
  /* this+0x354 */ class CMsgEffect * m_crusisEffect;
  /* this+0x358 */ class CMsgEffect * m_chatProhibitEffect;
  /* this+0x35c */ class CMsgEffect * m_cursorEffect;
  /* this+0x360 */ class std::list<CMsgEffect *,std::allocator<CMsgEffect *> > m_msgEffectList;
  /* this+0x36c */ float m_x1;
  /* this+0x370 */ float m_z1;
  /* this+0x374 */ float m_x2;
  /* this+0x378 */ float m_z2;
  /* this+0x37c */ int m_playerIswithinBox;
  /* this+0x380 */ unsigned long m_lastEffectLaunchTick;
  /* this+0x384 */ int m_doesLaunchEffect;
  /* this+0x388 */ class UIPlayerGage * m_gage;
  /* this+0x38c */ class UIPcGage * m_gage2;
}

struct CONTACTNPC {
  /* this+0x0 */ unsigned long nid;
  /* this+0x4 */ int job;
  /* this+0x8 */ int type;
}

class CMercenaryAI {
  /* this+0x4 */ struct lua_State * m_luaVM;
  /* this+0x8 */ int m_mt;
  /* this+0xc */ int m_delay;
  /* this+0x10 */ int m_merType;
  /* this+0x14 */ int m_tick;
}

struct _ADAPTER_STATUS {
  /* this+0x0 */ unsigned char[0x6] adapter_address;
  /* this+0x6 */ unsigned char rev_major;
  /* this+0x7 */ unsigned char reserved0;
  /* this+0x8 */ unsigned char adapter_type;
  /* this+0x9 */ unsigned char rev_minor;
  /* this+0xa */ unsigned short duration;
  /* this+0xc */ unsigned short frmr_recv;
  /* this+0xe */ unsigned short frmr_xmit;
  /* this+0x10 */ unsigned short iframe_recv_err;
  /* this+0x12 */ unsigned short xmit_aborts;
  /* this+0x14 */ unsigned long xmit_success;
  /* this+0x18 */ unsigned long recv_success;
  /* this+0x1c */ unsigned short iframe_xmit_err;
  /* this+0x1e */ unsigned short recv_buff_unavail;
  /* this+0x20 */ unsigned short t1_timeouts;
  /* this+0x22 */ unsigned short ti_timeouts;
  /* this+0x24 */ unsigned long reserved1;
  /* this+0x28 */ unsigned short free_ncbs;
  /* this+0x2a */ unsigned short max_cfg_ncbs;
  /* this+0x2c */ unsigned short max_ncbs;
  /* this+0x2e */ unsigned short xmit_buf_unavail;
  /* this+0x30 */ unsigned short max_dgram_size;
  /* this+0x32 */ unsigned short pending_sess;
  /* this+0x34 */ unsigned short max_cfg_sess;
  /* this+0x36 */ unsigned short max_sess;
  /* this+0x38 */ unsigned short max_sess_pkt_size;
  /* this+0x3a */ unsigned short name_count;
}

struct _NAME_BUFFER {
  /* this+0x0 */ unsigned char[0x10] name;
  /* this+0x10 */ unsigned char name_num;
  /* this+0x11 */ unsigned char name_flags;
}

struct _ASTAT_ {
  /* this+0x0 */ struct _ADAPTER_STATUS adapt;
  /* this+0x3c */ struct _NAME_BUFFER[0x1e] NameBuff;
}

struct std::list<unsigned long,std::allocator<unsigned long> >::_Node {
  /* this+0x0 */ struct std::list<unsigned long,std::allocator<unsigned long> >::_Node * _Next;
  /* this+0x4 */ struct std::list<unsigned long,std::allocator<unsigned long> >::_Node * _Prev;
  /* this+0x8 */ unsigned long _Value;
}

struct std::list<unsigned long,std::allocator<unsigned long> >::_Acc {
}

class std::allocator<unsigned long> {
}

class std::list<unsigned long,std::allocator<unsigned long> >::iterator {
  /* this+0x0 */ struct std::list<unsigned long,std::allocator<unsigned long> >::_Node * _Ptr;
}

class std::list<unsigned long,std::allocator<unsigned long> >::const_iterator {
  /* this+0x0 */ struct std::list<unsigned long,std::allocator<unsigned long> >::_Node * _Ptr;
}

class std::reverse_bidirectional_iterator<std::list<unsigned long,std::allocator<unsigned long> >::iterator,unsigned long,unsigned long &,unsigned long *,int> {
}

class std::reverse_bidirectional_iterator<std::list<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long,unsigned long const &,unsigned long const *,int> {
}

class std::binder2nd<std::not_equal_to<unsigned long> > {
  /* this+0x0 */ struct std::not_equal_to<unsigned long> op;
  /* this+0x4 */ unsigned long value;
}

struct std::not_equal_to<unsigned long> {
}

struct std::greater<unsigned long> {
}

struct CHARACTER_INFO {
  /* this+0x0 */ unsigned long GID;
  /* this+0x4 */ int exp;
  /* this+0x8 */ int money;
  /* this+0xc */ int jobexp;
  /* this+0x10 */ int joblevel;
  /* this+0x14 */ int bodystate;
  /* this+0x18 */ int healthstate;
  /* this+0x1c */ int effectstate;
  /* this+0x20 */ int virtue;
  /* this+0x24 */ int honor;
  /* this+0x28 */ short jobpoint;
  /* this+0x2a */ short hp;
  /* this+0x2c */ short maxhp;
  /* this+0x2e */ short sp;
  /* this+0x30 */ short maxsp;
  /* this+0x32 */ short speed;
  /* this+0x34 */ short job;
  /* this+0x36 */ short head;
  /* this+0x38 */ short weapon;
  /* this+0x3a */ short level;
  /* this+0x3c */ short sppoint;
  /* this+0x3e */ short accessory;
  /* this+0x40 */ short shield;
  /* this+0x42 */ short accessory2;
  /* this+0x44 */ short accessory3;
  /* this+0x46 */ short headpalette;
  /* this+0x48 */ short bodypalette;
  /* this+0x4a */ unsigned char[0x18] name;
  /* this+0x62 */ unsigned char Str;
  /* this+0x63 */ unsigned char Agi;
  /* this+0x64 */ unsigned char Vit;
  /* this+0x65 */ unsigned char Int;
  /* this+0x66 */ unsigned char Dex;
  /* this+0x67 */ unsigned char Luk;
  /* this+0x68 */ unsigned char CharNum;
  /* this+0x69 */ unsigned char haircolor;
  /* this+0x6a */ short bIsChangedCharName;
}

struct ServerAddress {
  /* this+0x0 */ char[0x10] ip;
  /* this+0x10 */ int port;
}

struct ServerAddressEx {
  /* this+0x0 */ char[0x10] ip;
  /* this+0x10 */ int port;
  /* this+0x14 */ unsigned long dwIP;
}

struct in_addr {
  /* this+0x0 */ union in_addr::__unnamed S_un;
}

struct sockaddr_in {
  /* this+0x0 */ short sin_family;
  /* this+0x2 */ unsigned short sin_port;
  /* this+0x4 */ struct in_addr sin_addr;
  /* this+0x8 */ char[0x8] sin_zero;
}

struct PACKET_PING {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_CA_EXE_HASHCHECK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char[0x10] HashValue;
}

class MD5 {
  /* this+0x0 */ struct md5_state_s m_ms;
}

struct md5_state_s {
  /* this+0x0 */ unsigned int[0x2] count;
  /* this+0x8 */ unsigned int[0x4] abcd;
  /* this+0x18 */ unsigned char[0x40] buf;
}

class UISelectServerWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIServerListBox * m_serverList;
  /* this+0x64 */ class UIBitmapButton * m_exitButton;
  /* this+0x68 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_regKey;
  /* this+0x78 */ int m_defaultCurItem;
  /* this+0x7c */ int m_target;
}

struct PACKET_CA_CONNECT_INFO_CHANGED {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char[0x18] ID;
}

struct _NCB {
  /* this+0x0 */ unsigned char ncb_command;
  /* this+0x1 */ unsigned char ncb_retcode;
  /* this+0x2 */ unsigned char ncb_lsn;
  /* this+0x3 */ unsigned char ncb_num;
  /* this+0x4 */ unsigned char * ncb_buffer;
  /* this+0x8 */ unsigned short ncb_length;
  /* this+0xa */ unsigned char[0x10] ncb_callname;
  /* this+0x1a */ unsigned char[0x10] ncb_name;
  /* this+0x2a */ unsigned char ncb_rto;
  /* this+0x2b */ unsigned char ncb_sto;
  /* this+0x2c */ function  * ncb_post;
  /* this+0x30 */ unsigned char ncb_lana_num;
  /* this+0x31 */ unsigned char ncb_cmd_cplt;
  /* this+0x32 */ unsigned char[0xa] ncb_reserve;
  /* this+0x3c */ void * ncb_event;
}

struct PACKET_CA_LOGIN_HAN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Version;
  /* this+0x6 */ unsigned char[0x18] ID;
  /* this+0x1e */ unsigned char[0x18] Passwd;
  /* this+0x36 */ unsigned char clienttype;
  /* this+0x37 */ char[0x10] m_szIP;
  /* this+0x47 */ unsigned char[0xd] m_szMacAddr;
  /* this+0x54 */ unsigned char isHanGameUser;
}

struct PACKET_CA_LOGIN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Version;
  /* this+0x6 */ unsigned char[0x18] ID;
  /* this+0x1e */ unsigned char[0x18] Passwd;
  /* this+0x36 */ unsigned char clienttype;
}

struct PACKET_CA_REQ_HASH {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CH_ENTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ int AuthCode;
  /* this+0xa */ unsigned long userLevel;
  /* this+0xe */ unsigned short clientType;
  /* this+0x10 */ unsigned char Sex;
}

struct PACKET_CH_MAKE_CHAR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char[0x18] name;
  /* this+0x1a */ unsigned char Str;
  /* this+0x1b */ unsigned char Agi;
  /* this+0x1c */ unsigned char Vit;
  /* this+0x1d */ unsigned char Int;
  /* this+0x1e */ unsigned char Dex;
  /* this+0x1f */ unsigned char Luk;
  /* this+0x20 */ unsigned char CharNum;
  /* this+0x21 */ short headPal;
  /* this+0x23 */ short head;
}

struct PACKET_CH_DELETE_CHAR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ char[0x28] key;
}

struct PACKET_CH_DELETE_CHAR2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ char[0x32] key;
}

struct PACKET_CH_SELECT_CHAR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char CharNum;
}

struct PACKET_CZ_ENTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x2] pad;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ char[0x1] pad2;
  /* this+0x9 */ unsigned long GID;
  /* this+0xd */ char[0x4] pad3;
  /* this+0x11 */ int AuthCode;
  /* this+0x15 */ unsigned long clientTime;
  /* this+0x19 */ unsigned char Sex;
}

struct accountInfo {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > display;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > desc;
  /* this+0x20 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > balloon;
  /* this+0x30 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > address;
  /* this+0x40 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > port;
  /* this+0x50 */ int type;
  /* this+0x54 */ unsigned long version;
}

struct PACKET_CA_REPLY_PNGAMEROOM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char Permission;
}

struct PACKET_CA_LOGIN3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Version;
  /* this+0x6 */ unsigned char[0x18] ID;
  /* this+0x1e */ unsigned char[0x10] PasswdMD5;
  /* this+0x2e */ unsigned char clienttype;
  /* this+0x2f */ unsigned char ClientInfo;
}

struct PACKET_CA_LOGIN4 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Version;
  /* this+0x6 */ unsigned char[0x18] ID;
  /* this+0x1e */ unsigned char[0x10] PasswdMD5;
  /* this+0x2e */ unsigned char clienttype;
  /* this+0x2f */ char[0xd] macData;
}

struct PACKET_CA_LOGIN2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Version;
  /* this+0x6 */ unsigned char[0x18] ID;
  /* this+0x1e */ unsigned char[0x10] PasswdMD5;
  /* this+0x2e */ unsigned char clienttype;
}

struct PACKET_CA_LOGIN_PCBANG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Version;
  /* this+0x6 */ unsigned char[0x18] ID;
  /* this+0x1e */ unsigned char[0x18] Passwd;
  /* this+0x36 */ unsigned char clienttype;
  /* this+0x37 */ char[0x10] IP;
  /* this+0x47 */ unsigned char[0xd] MacAdress;
}

struct PACKET_CH_REQ_CHANGE_CHARNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long dwGID;
}

class std::vector<accountInfo,std::allocator<accountInfo> > {
  /* this+0x0 */ class std::allocator<accountInfo> allocator;
  /* this+0x4 */ struct accountInfo * _First;
  /* this+0x8 */ struct accountInfo * _Last;
  /* this+0xc */ struct accountInfo * _End;
}

class CItem {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_itemName;
  /* this+0x108 */ unsigned long m_aid;
  /* this+0x10c */ int m_isJumping;
  /* this+0x110 */ float m_sfallingSpeed;
  /* this+0x114 */ float m_sPosY;
}

struct STANDENTRYSTRUCT {
  /* this+0x0 */ unsigned long GID;
  /* this+0x4 */ int job;
  /* this+0x8 */ int sex;
  /* this+0xc */ int x;
  /* this+0x10 */ int y;
  /* this+0x14 */ int dir;
  /* this+0x18 */ unsigned long speed;
  /* this+0x1c */ int xSize;
  /* this+0x20 */ int ySize;
  /* this+0x24 */ int head;
  /* this+0x28 */ int weapon;
  /* this+0x2c */ int accessory;
  /* this+0x30 */ int state;
  /* this+0x34 */ int bodyState;
  /* this+0x38 */ int healthState;
  /* this+0x3c */ int effectState;
  /* this+0x40 */ int isPKModeON;
  /* this+0x44 */ int shield;
  /* this+0x48 */ int accessory2;
  /* this+0x4c */ int accessory3;
  /* this+0x50 */ int headpalette;
  /* this+0x54 */ int bodypalette;
  /* this+0x58 */ int headDir;
  /* this+0x5c */ unsigned long guildId;
  /* this+0x60 */ int guildEmblemVersion;
  /* this+0x64 */ int honor;
  /* this+0x68 */ int virtue;
}

struct ACTSTRUCT {
  /* this+0x0 */ unsigned long damage;
  /* this+0x4 */ unsigned long leftDamage;
  /* this+0x8 */ unsigned long action;
  /* this+0xc */ unsigned long targetGID;
  /* this+0x10 */ unsigned long startTime;
  /* this+0x14 */ int count;
  /* this+0x18 */ int tCellX;
  /* this+0x1c */ int tCellY;
  /* this+0x20 */ int attackMT;
  /* this+0x24 */ int attackedMT;
}

struct MOVEENTRYSTRUCT {
  /* this+0x0 */ unsigned long GID;
  /* this+0x4 */ int job;
  /* this+0x8 */ int sex;
  /* this+0xc */ unsigned long moveStartTime;
  /* this+0x10 */ int sx;
  /* this+0x14 */ int sy;
  /* this+0x18 */ int cellX;
  /* this+0x1c */ int cellY;
  /* this+0x20 */ int dx;
  /* this+0x24 */ int dy;
  /* this+0x28 */ unsigned long speed;
  /* this+0x2c */ int head;
  /* this+0x30 */ int weapon;
  /* this+0x34 */ int accessory;
  /* this+0x38 */ int bodyState;
  /* this+0x3c */ int healthState;
  /* this+0x40 */ int effectState;
  /* this+0x44 */ int isPKModeON;
  /* this+0x48 */ int shield;
  /* this+0x4c */ int accessory2;
  /* this+0x50 */ int accessory3;
  /* this+0x54 */ int headpalette;
  /* this+0x58 */ int bodypalette;
  /* this+0x5c */ int headDir;
  /* this+0x60 */ unsigned long guildId;
  /* this+0x64 */ int guildEmblemVersion;
  /* this+0x68 */ int honor;
  /* this+0x6c */ int virtue;
}

struct ITEMSTANDENTRYSTRUCT {
  /* this+0x0 */ char[0x20] name;
  /* this+0x20 */ unsigned long ITAID;
  /* this+0x24 */ int x;
  /* this+0x28 */ int y;
  /* this+0x2c */ int subX;
  /* this+0x30 */ int subY;
  /* this+0x34 */ int isJumpEntry;
  /* this+0x38 */ int count;
  /* this+0x3c */ unsigned char isIdentified;
}

struct PURCHASE_ITEM {
  /* this+0x0 */ int price;
  /* this+0x4 */ int discountprice;
  /* this+0x8 */ unsigned char type;
  /* this+0x9 */ unsigned short ITID;
}

struct SELL_ITEM {
  /* this+0x0 */ short index;
  /* this+0x2 */ int price;
  /* this+0x6 */ int overchargeprice;
}

struct ChatRoomInfo {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > title;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > pass;
  /* this+0x20 */ int roomType;
  /* this+0x24 */ int numPeople;
  /* this+0x28 */ int maxNumPeople;
  /* this+0x2c */ int roomId;
}

struct std::list<RoomMemberData,std::allocator<RoomMemberData> >::_Node {
  /* this+0x0 */ struct std::list<RoomMemberData,std::allocator<RoomMemberData> >::_Node * _Next;
  /* this+0x4 */ struct std::list<RoomMemberData,std::allocator<RoomMemberData> >::_Node * _Prev;
  /* this+0x8 */ struct RoomMemberData _Value;
}

struct std::list<RoomMemberData,std::allocator<RoomMemberData> >::_Acc {
}

class std::list<RoomMemberData,std::allocator<RoomMemberData> > {
  /* this+0x0 */ class std::allocator<RoomMemberData> allocator;
  /* this+0x4 */ struct std::list<RoomMemberData,std::allocator<RoomMemberData> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::allocator<RoomMemberData> {
}

struct RoomMemberData {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > name;
  /* this+0x10 */ unsigned long role;
}

class std::list<RoomMemberData,std::allocator<RoomMemberData> >::iterator {
  /* this+0x0 */ struct std::list<RoomMemberData,std::allocator<RoomMemberData> >::_Node * _Ptr;
}

class std::list<RoomMemberData,std::allocator<RoomMemberData> >::const_iterator {
  /* this+0x0 */ struct std::list<RoomMemberData,std::allocator<RoomMemberData> >::_Node * _Ptr;
}

class std::reverse_bidirectional_iterator<std::list<RoomMemberData,std::allocator<RoomMemberData> >::iterator,RoomMemberData,RoomMemberData &,RoomMemberData *,int> {
}

class std::reverse_bidirectional_iterator<std::list<RoomMemberData,std::allocator<RoomMemberData> >::const_iterator,RoomMemberData,RoomMemberData const &,RoomMemberData const *,int> {
}

class std::binder2nd<std::not_equal_to<RoomMemberData> > {
  /* this+0x0 */ struct std::not_equal_to<RoomMemberData> op;
  /* this+0x4 */ struct RoomMemberData value;
}

struct std::not_equal_to<RoomMemberData> {
}

struct std::greater<RoomMemberData> {
}

class UIChatRoomTitle {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ class UIStaticText * m_title;
  /* this+0x4c */ struct ChatRoomInfo m_roomInfo;
  /* this+0x7c */ short m_shopfont;
}

struct GROUPMEMBER_INFO {
  /* this+0x0 */ unsigned long AID;
  /* this+0x4 */ char[0x18] characterName;
  /* this+0x1c */ char[0x10] mapName;
  /* this+0x2c */ unsigned char role;
  /* this+0x2d */ unsigned char state;
}

struct SKILLSTRUCT {
  /* this+0x0 */ unsigned long skillId;
  /* this+0x4 */ unsigned long damage;
  /* this+0x8 */ unsigned long action;
  /* this+0xc */ unsigned long targetGID;
  /* this+0x10 */ unsigned long startTime;
  /* this+0x14 */ int level;
  /* this+0x18 */ int count;
  /* this+0x1c */ int tCellX;
  /* this+0x20 */ int tCellY;
  /* this+0x24 */ int attackMT;
  /* this+0x28 */ int attackedMT;
}

struct GROUNDSKILLSTRUCT {
  /* this+0x0 */ unsigned long skillId;
  /* this+0x4 */ unsigned long startTime;
  /* this+0x8 */ int cellX;
  /* this+0xc */ int cellY;
  /* this+0x10 */ int level;
}

struct ATTRSTATESTRUCT {
  /* this+0x0 */ int bodyState;
  /* this+0x4 */ int effectState;
  /* this+0x8 */ int healthState;
  /* this+0xc */ int isPKModeON;
}

struct SKILLSTANDENTRYSTRUCT {
  /* this+0x0 */ unsigned long AID;
  /* this+0x4 */ unsigned long creatorAID;
  /* this+0x8 */ int job;
  /* this+0xc */ int xPos;
  /* this+0x10 */ int yPos;
  /* this+0x14 */ unsigned char isVisible;
}

struct EQUIPSLOTINFO {
  /* this+0x0 */ unsigned short[0x4] info;
}

struct PURCHASE_ITEM_FROMMC {
  /* this+0x0 */ int price;
  /* this+0x4 */ short count;
  /* this+0x6 */ short index;
  /* this+0x8 */ unsigned char type;
  /* this+0x9 */ unsigned short ITID;
  /* this+0xb */ unsigned char IsIdentified;
  /* this+0xc */ unsigned char IsDamaged;
  /* this+0xd */ unsigned char refiningLevel;
  /* this+0xe */ struct EQUIPSLOTINFO slot;
}

struct PURCHASE_MYITEM {
  /* this+0x0 */ int price;
  /* this+0x4 */ short index;
  /* this+0x6 */ short count;
  /* this+0x8 */ unsigned char type;
  /* this+0x9 */ unsigned short ITID;
  /* this+0xb */ unsigned char IsIdentified;
  /* this+0xc */ unsigned char IsDamaged;
  /* this+0xd */ unsigned char refiningLevel;
  /* this+0xe */ struct EQUIPSLOTINFO slot;
}

struct RELATED_GUILD_INFORMATION {
  /* this+0x0 */ int GDID;
  /* this+0x4 */ int relation;
  /* this+0x8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GuildName;
}

struct GUILD_REG_POSITION_INFO {
  /* this+0x0 */ int positionID;
  /* this+0x4 */ int right;
  /* this+0x8 */ int ranking;
  /* this+0xc */ int payRate;
  /* this+0x10 */ char[0x18] posName;
}

struct PLAY_WAVE_INFO {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > wavName;
  /* this+0x10 */ unsigned long nAID;
  /* this+0x14 */ unsigned long term;
  /* this+0x18 */ unsigned long endTick;
}

struct CGameMode::Zc_Friends_List::STRUCT_FRIEND {
  /* this+0x0 */ unsigned long AID;
  /* this+0x4 */ unsigned long GID;
  /* this+0x8 */ char[0x18] Name;
}

struct PACKET_ZC_ITEM_FALL_ENTRY2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long ITAID;
  /* this+0x8 */ unsigned short ITID;
  /* this+0xa */ unsigned char IsIdentified;
  /* this+0xb */ short xPos;
  /* this+0xd */ short yPos;
  /* this+0xf */ unsigned char subX;
  /* this+0x10 */ unsigned char subY;
  /* this+0x11 */ short count;
}

class C3dAttr {
  /* this+0x4 */ int m_lockCnt;
  /* this+0x8 */ unsigned long m_timeStamp;
  /* this+0xc */ int m_extIndex;
  /* this+0x10 */ class CHash m_fName;
  /* this+0x110 */ int m_width;
  /* this+0x114 */ int m_height;
  /* this+0x118 */ int m_zoom;
  /* this+0x11c */ class std::vector<CAttrCell,std::allocator<CAttrCell> > m_cells;
}

class std::list<QUEST_INFO,std::allocator<QUEST_INFO> >::iterator {
  /* this+0x0 */ struct std::list<QUEST_INFO,std::allocator<QUEST_INFO> >::_Node * _Ptr;
}

class std::list<QUEST_INFO,std::allocator<QUEST_INFO> >::const_iterator {
  /* this+0x0 */ struct std::list<QUEST_INFO,std::allocator<QUEST_INFO> >::_Node * _Ptr;
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

class std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> > {
  /* this+0x0 */ class std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> > _Tr;
}

struct std::pair<unsigned long const ,unsigned long> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ unsigned long second;
}

class std::list<CSkill *,std::allocator<CSkill *> >::iterator {
  /* this+0x0 */ struct std::list<CSkill *,std::allocator<CSkill *> >::_Node * _Ptr;
}

class std::list<CSkill *,std::allocator<CSkill *> > {
  /* this+0x0 */ class std::allocator<CSkill *> allocator;
  /* this+0x4 */ struct std::list<CSkill *,std::allocator<CSkill *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<CSkill *,std::allocator<CSkill *> >::const_iterator {
  /* this+0x0 */ struct std::list<CSkill *,std::allocator<CSkill *> >::_Node * _Ptr;
}

struct std::list<CSkill *,std::allocator<CSkill *> >::_Node {
  /* this+0x0 */ struct std::list<CSkill *,std::allocator<CSkill *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<CSkill *,std::allocator<CSkill *> >::_Node * _Prev;
  /* this+0x8 */ class CSkill * _Value;
}

class std::list<SGUILD_BANISH_INFO,std::allocator<SGUILD_BANISH_INFO> >::iterator {
  /* this+0x0 */ struct std::list<SGUILD_BANISH_INFO,std::allocator<SGUILD_BANISH_INFO> >::_Node * _Ptr;
}

class std::list<SGUILD_BANISH_INFO,std::allocator<SGUILD_BANISH_INFO> >::const_iterator {
  /* this+0x0 */ struct std::list<SGUILD_BANISH_INFO,std::allocator<SGUILD_BANISH_INFO> >::_Node * _Ptr;
}

struct std::list<SGUILD_BANISH_INFO,std::allocator<SGUILD_BANISH_INFO> >::_Node {
  /* this+0x0 */ struct std::list<SGUILD_BANISH_INFO,std::allocator<SGUILD_BANISH_INFO> >::_Node * _Next;
  /* this+0x4 */ struct std::list<SGUILD_BANISH_INFO,std::allocator<SGUILD_BANISH_INFO> >::_Node * _Prev;
  /* this+0x8 */ struct SGUILD_BANISH_INFO _Value;
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos> >::iterator {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Node * _Ptr;
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos> > {
      /* this+0x0 */ class std::allocator<ColorCellPos> allocator;
  /* this+0x1 */ struct std::less<unsigned long> key_compare;
  /* this+0x4 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos2> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos2> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos2> > {
      /* this+0x0 */ class std::allocator<ColorCellPos2> allocator;
  /* this+0x1 */ struct std::less<unsigned long> key_compare;
  /* this+0x4 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

struct std::pair<unsigned long const ,ColorCellPos2> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ struct ColorCellPos2 second;
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos2> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Node * _Ptr;
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos2> >::iterator {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Node * _Ptr;
}

struct std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Node {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned long const ,ColorCellPos2> _Value;
  /* this+0x24 */ enum std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Redbl _Color;
}

class std::vector<PLAY_WAVE_INFO,std::allocator<PLAY_WAVE_INFO> > {
  /* this+0x0 */ class std::allocator<PLAY_WAVE_INFO> allocator;
  /* this+0x4 */ struct PLAY_WAVE_INFO * _First;
  /* this+0x8 */ struct PLAY_WAVE_INFO * _Last;
  /* this+0xc */ struct PLAY_WAVE_INFO * _End;
}

struct std::list<CGameObject *,std::allocator<CGameObject *> >::_Node {
  /* this+0x0 */ struct std::list<CGameObject *,std::allocator<CGameObject *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<CGameObject *,std::allocator<CGameObject *> >::_Node * _Prev;
  /* this+0x8 */ class CGameObject * _Value;
}

class std::list<CGameObject *,std::allocator<CGameObject *> > {
  /* this+0x0 */ class std::allocator<CGameObject *> allocator;
  /* this+0x4 */ struct std::list<CGameObject *,std::allocator<CGameObject *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<SKILL_INFO,std::allocator<SKILL_INFO> >::iterator {
  /* this+0x0 */ struct std::list<SKILL_INFO,std::allocator<SKILL_INFO> >::_Node * _Ptr;
}

class std::list<GUILD_POSITION_INFORMATION,std::allocator<GUILD_POSITION_INFORMATION> >::iterator {
  /* this+0x0 */ struct std::list<GUILD_POSITION_INFORMATION,std::allocator<GUILD_POSITION_INFORMATION> >::_Node * _Ptr;
}

class std::list<RELATED_GUILD_INFORMATION,std::allocator<RELATED_GUILD_INFORMATION> >::iterator {
  /* this+0x0 */ struct std::list<RELATED_GUILD_INFORMATION,std::allocator<RELATED_GUILD_INFORMATION> >::_Node * _Ptr;
}

class std::list<RELATED_GUILD_INFORMATION,std::allocator<RELATED_GUILD_INFORMATION> >::const_iterator {
  /* this+0x0 */ struct std::list<RELATED_GUILD_INFORMATION,std::allocator<RELATED_GUILD_INFORMATION> >::_Node * _Ptr;
}

struct std::list<RELATED_GUILD_INFORMATION,std::allocator<RELATED_GUILD_INFORMATION> >::_Node {
  /* this+0x0 */ struct std::list<RELATED_GUILD_INFORMATION,std::allocator<RELATED_GUILD_INFORMATION> >::_Node * _Next;
  /* this+0x4 */ struct std::list<RELATED_GUILD_INFORMATION,std::allocator<RELATED_GUILD_INFORMATION> >::_Node * _Prev;
  /* this+0x8 */ struct RELATED_GUILD_INFORMATION _Value;
}

struct std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Node {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned long const ,ColorCellPos> _Value;
  /* this+0x1c */ enum std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Redbl _Color;
}

struct PACKET_CZ_REQ_ACCOUNTNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_CZ_PC_SELL_ITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct CZ_SELL_ITEM {
  /* this+0x0 */ short index;
  /* this+0x2 */ short count;
}

struct PACKET_CZ_PC_PURCHASE_ITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct CZ_PURCHASE_ITEM {
  /* this+0x0 */ short count;
  /* this+0x2 */ unsigned short ITID;
}

struct PACKET_CZ_ACK_SELECT_DEALTYPE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
  /* this+0x6 */ unsigned char type;
}

struct PACKET_CZ_REQ_USER_COUNT {
  /* this+0x0 */ short PacketType;
}

struct _MSG2AI {
  /* this+0x0 */ int command;
  /* this+0x4 */ int x;
  /* this+0x8 */ int y;
  /* this+0xc */ int skillLevel;
  /* this+0x10 */ int skillID;
  /* this+0x14 */ unsigned long targetID;
}

struct PACKET_CZ_BLACKSMITH_RANK {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_ALCHEMIST_RANK {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_TAEKWON_RANK {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_GANGSI_RANK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketSwitch;
}

struct PACKET_CZ_REQ_EMOTION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char type;
}

struct PACKET_CZ_STATUS_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short statusID;
  /* this+0x4 */ unsigned char changeAmount;
}

struct PACKET_CZ_REQ_STATUS {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_RESTART {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char type;
}

struct PACKET_CZ_EQUIPWIN_MICROSCOPE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_CZ_REQ_NEXT_SCRIPT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
}

struct PACKET_CZ_REQ_TAKEOFF_EQUIP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short index;
}

struct PACKET_CZ_CHOOSE_MENU {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
  /* this+0x6 */ unsigned char num;
}

struct PACKET_CZ_CLOSE_DIALOG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
}

struct PACKET_CZ_REQ_WEAR_EQUIP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short index;
  /* this+0x4 */ unsigned short wearLocation;
}

struct PACKET_CZ_ITEM_THROW {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x3] pad;
  /* this+0x5 */ unsigned short Index;
  /* this+0x7 */ char[0x1] pad2;
  /* this+0x8 */ short count;
}

struct PACKET_CZ_USE_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x2] pad;
  /* this+0x4 */ unsigned short index;
  /* this+0x6 */ char[0x4] pad2;
  /* this+0xa */ unsigned long AID;
}

struct PACKET_CZ_BROADCAST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_CZ_BATTLEFIELD_CHAT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_CZ_CHOPOKGI {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_DEATH_QUESTION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Qanswer;
}

struct PACKET_CZ_REQUEST_CHAT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_CZ_GUILD_CHAT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_CZ_REQUEST_CHAT_PARTY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_CZ_WHISPER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ char[0x18] receiver;
}

struct PACKET_CZ_DISCONNECT_CHARACTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_CZ_DISCONNECT_ALL_CHARACTER {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_CONTACTNPC {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
  /* this+0x6 */ unsigned char type;
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Node * _Ptr;
}

struct std::pair<unsigned long const ,ColorCellPos> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ struct ColorCellPos second;
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> >::_Node * _Ptr;
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> >::iterator {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> >::_Node * _Ptr;
}

struct std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> >::_Node {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned long const ,CellPos> _Value;
  /* this+0x18 */ enum std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> >::_Redbl _Color;
}

struct std::pair<unsigned long const ,CellPos> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ struct CellPos second;
}

struct PACKET_CZ_REQ_ROLE_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long role;
  /* this+0x6 */ char[0x18] name;
}

struct PACKET_CZ_REQ_EXPEL_MEMBER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] name;
}

struct PACKET_CZ_EXIT_ROOM {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_REQ_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_CZ_ACK_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char result;
}

struct PACKET_CZ_ADD_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct PACKET_CZ_CREATE_CHATROOM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ short size;
  /* this+0x6 */ unsigned char type;
  /* this+0x7 */ char[0x8] passwd;
}

struct PACKET_CZ_CHANGE_CHATROOM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ short size;
  /* this+0x6 */ unsigned char type;
  /* this+0x7 */ char[0x8] passwd;
}

struct PACKET_CZ_REQ_ENTER_ROOM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long roomID;
  /* this+0x6 */ char[0x8] passwd;
}

struct PACKET_CZ_MOVE_ITEM_FROM_BODY_TO_STORE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x5] pad;
  /* this+0x7 */ short index;
  /* this+0x9 */ char[0x1] pad2;
  /* this+0xa */ int count;
}

struct PACKET_CZ_MOVE_ITEM_FROM_STORE_TO_BODY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0xc] pad;
  /* this+0xe */ short index;
  /* this+0x10 */ char[0x2] pad2;
  /* this+0x12 */ int count;
}

struct PACKET_CZ_CLOSE_STORE {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_MOVE_ITEM_FROM_BODY_TO_CART {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct PACKET_CZ_MOVE_ITEM_FROM_CART_TO_BODY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct PACKET_CZ_MOVE_ITEM_FROM_STORE_TO_CART {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct PACKET_CZ_MOVE_ITEM_FROM_CART_TO_STORE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct PACKET_CZ_CONCLUDE_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_CANCEL_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_EXEC_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_MAKE_GROUP2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] groupName;
  /* this+0x1a */ unsigned char ItemPickupRule;
  /* this+0x1b */ unsigned char ItemDivisionRule;
}

struct PACKET_CZ_PARTY_JOIN_REQ {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] characterName;
}

struct PACKET_CZ_AGREE_STARPLACE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char which;
}

struct PACKET_CZ_REQ_JOIN_BABY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_CZ_PARTY_JOIN_REQ_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GRID;
  /* this+0x6 */ unsigned char bAccept;
}

struct PACKET_CZ_JOIN_COUPLE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ int answer;
}

struct PACKET_CZ_JOIN_BABY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ int answer;
}

struct PACKET_CZ_DORIDORI {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_REQ_LEAVE_GROUP {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_REQ_EXPEL_GROUP_MEMBER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ char[0x18] characterName;
}

struct PACKET_CZ_UPGRADE_SKILLLEVEL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
}

struct PACKET_CZ_REQ_JOIN_COUPLE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_CZ_USE_SKILL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x4] pad;
  /* this+0x6 */ short selectedLevel;
  /* this+0x8 */ char[0x2] pad2;
  /* this+0xa */ unsigned short SKID;
  /* this+0xc */ char[0x9] pad3;
  /* this+0x15 */ unsigned long targetID;
}

struct PACKET_CZ_USE_SKILL_TOGROUND {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x3] pad;
  /* this+0x5 */ short selectedLevel;
  /* this+0x7 */ char[0x2] pad2;
  /* this+0x9 */ unsigned short SKID;
  /* this+0xb */ char[0x1] pad3;
  /* this+0xc */ short xPos;
  /* this+0xe */ char[0x6] pad4;
  /* this+0x14 */ short yPos;
}

struct PACKET_CZ_USE_SKILL_TOGROUND_WITHTALKBOX {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x3] pad;
  /* this+0x5 */ short selectedLevel;
  /* this+0x7 */ char[0x2] pad2;
  /* this+0x9 */ unsigned short SKID;
  /* this+0xb */ char[0x1] pad3;
  /* this+0xc */ short xPos;
  /* this+0xe */ char[0x6] pad4;
  /* this+0x14 */ short yPos;
  /* this+0x16 */ char[0x50] contents;
}

struct PACKET_CZ_CANCEL_LOCKON {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_SELECT_WARPPOINT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
  /* this+0x4 */ char[0x10] mapName;
}

struct PACKET_CZ_REMEMBER_WARPPOINT {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_REQ_CARTOFF {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_REQ_CLOSESTORE {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_PC_PURCHASE_ITEMLIST_FROMMC {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long AID;
}

struct CZ_PURCHASE_ITEM_FROMMC {
  /* this+0x0 */ short count;
  /* this+0x2 */ short index;
}

struct PACKET_CZ_REQ_BUY_FROMMC {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_CZ_MOVETO_MAP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x10] mapName;
  /* this+0x12 */ short xPos;
  /* this+0x14 */ short yPos;
}

struct PACKET_CZ_CHANGE_GROUPEXPOPTION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long expOption;
}

struct PACKET_CZ_INPUT_EDITDLG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
  /* this+0x6 */ int value;
}

struct PACKET_CZ_REGISTER_GUILD_EMBLEM_IMG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

class std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Node * _Ptr;
}

class std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Node * _Ptr;
}

struct std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Node {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,MEMBER_POSITION_INFORMATION> _Value;
  /* this+0x1c */ enum std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Redbl _Color;
}

struct std::pair<int const ,MEMBER_POSITION_INFORMATION> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ struct MEMBER_POSITION_INFORMATION second;
}

struct PACKET_CZ_REQ_CHANGE_MEMBERPOS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

class std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Node * _Ptr;
}

class std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Node * _Ptr;
}

struct std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Node {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,GUILD_POSITION_INFORMATION> _Value;
  /* this+0x34 */ enum std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Redbl _Color;
}

struct std::pair<int const ,GUILD_POSITION_INFORMATION> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ struct GUILD_POSITION_INFORMATION second;
}

struct PACKET_CZ_REG_CHANGE_GUILD_POSITIONINFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_CZ_REQ_GUILD_MENUINTERFACE {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_REQ_DISORGANIZE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x28] key;
}

struct PACKET_CZ_REQ_GUILD_MENU {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int Type;
}

struct PACKET_CZ_REQ_GUILD_EMBLEM_IMG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int GDID;
}

struct PACKET_CZ_REQ_OPEN_MEMBER_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int AID;
}

struct PACKET_CZ_REQ_LEAVE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ int AID;
  /* this+0xa */ int GID;
  /* this+0xe */ char[0x28] reasonDesc;
}

struct PACKET_CZ_REQ_BAN_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ int AID;
  /* this+0xa */ int GID;
  /* this+0xe */ char[0x28] reasonDesc;
}

struct PACKET_CZ_REQ_MAKE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ char[0x18] GName;
}

struct PACKET_CZ_JOIN_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ int answer;
}

struct PACKET_CZ_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long MyAID;
  /* this+0xa */ unsigned long MyGID;
}

struct CGameMode::SendMsg::__unnamed {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_CZ_REQ_GIVE_MANNER_POINT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long otherAID;
  /* this+0x6 */ unsigned char type;
  /* this+0x7 */ short point;
}

struct PACKET_CZ_GUILD_NOTICE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ char[0x3c] subject;
  /* this+0x42 */ char[0x78] notice;
}

struct PACKET_CZ_REQ_ALLY_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long MyAID;
  /* this+0xa */ unsigned long MyGID;
}

struct PACKET_CZ_ALLY_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long otherAID;
  /* this+0x6 */ int answer;
}

struct PACKET_CZ_REQ_ITEMIDENTIFY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
}

struct PACKET_CZ_SELECT_PETEGG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
}

struct REPAIRITEM_INFO {
  /* this+0x0 */ short index;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ unsigned char refiningLevel;
  /* this+0x5 */ struct EQUIPSLOTINFO slot;
}

struct PACKET_CZ_REQ_ITEMREPAIR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct REPAIRITEM_INFO TargetItemInfo;
}

struct PACKET_CZ_REQ_WEAPONREFINE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int Index;
}

struct PACKET_CZ_REQ_ITEMCOMPOSITION_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short cardIndex;
}

struct PACKET_CZ_REQ_ITEMCOMPOSITION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short cardIndex;
  /* this+0x4 */ short equipIndex;
}

struct PACKET_CZ_REQ_HOSTILE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_CZ_REQ_DELETE_RELATED_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long OpponentGDID;
  /* this+0x6 */ int Relation;
}

struct PACKET_CZ_REQ_DISCONNECT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short type;
}

struct MAKABLEITEM_INFO {
  /* this+0x0 */ unsigned short ITID;
  /* this+0x2 */ unsigned short[0x3] material_ID;
}

struct PACKET_CZ_REQMAKINGITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct MAKABLEITEM_INFO info;
}

struct PACKET_CZ_ITEM_PICKUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x2] pad;
  /* this+0x4 */ unsigned long ITAID;
}

struct PACKET_CZ_REQUEST_ACT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x3] pad;
  /* this+0x5 */ unsigned long targetGID;
  /* this+0x9 */ char[0x9] pad2;
  /* this+0x12 */ unsigned char action;
}

struct PACKET_CZ_REQUEST_MOVE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x3] pad;
  /* this+0x5 */ unsigned char[0x3] dest;
}

struct PACKET_CZ_CHANGE_DIRECTION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x5] pad;
  /* this+0x7 */ short headDir;
  /* this+0x9 */ char[0x1] pad2;
  /* this+0xa */ unsigned char dir;
}

struct PACKET_CZ_RESET {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short type;
}

struct PACKET_CZ_CHANGE_MAPTYPE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short xPos;
  /* this+0x4 */ short yPos;
  /* this+0x6 */ short type;
}

struct PACKET_CZ_CHANGE_EFFECTSTATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int EffectState;
}

struct PACKET_CZ_RENAME_PET {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] szName;
}

struct PACKET_CZ_PETEGG_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
}

struct PACKET_CZ_PET_ACT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int data;
}

struct PACKET_CZ_COMMAND_PET {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char cSub;
}

struct PACKET_CZ_TRYCAPTURE_MONSTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long targetAID;
}

struct PACKET_CZ_REQ_MAKINGARROW {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short id;
}

struct PACKET_CZ_REQ_MAKINGITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short mkType;
  /* this+0x4 */ unsigned short id;
}

struct PACKET_CZ_REQ_CHANGECART {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short num;
}

struct PACKET_CZ_ITEM_CREATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] itemName;
}

struct PACKET_CZ_REMOVE_AID {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] AccountName;
}

struct PACKET_CZ_SHIFT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] CharacterName;
}

struct PACKET_CZ_RECALL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] AccountName;
}

struct PACKET_CZ_RECALL_GID {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] CharacterName;
}

struct PACKET_CZ_REQ_STATUS_GM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] CharName;
}

struct PACKET_CZ_REQ_GIVE_MANNER_BYNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] CharName;
}

struct PACKET_CZ_REQ_REMAINTIME {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_SELECTAUTOSPELL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int SKID;
}

struct PACKET_CZ_ACK_REQ_ADD_FRIENDS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long ReqAID;
  /* this+0x6 */ unsigned long ReqGID;
  /* this+0xa */ int Result;
}

struct PACKET_CZ_DELETE_FRIENDS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
}

struct PACKET_CZ_COMMAND_MER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short type;
  /* this+0x4 */ char command;
}

struct PACKET_CZ_MER_COMMAND {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char command;
}

struct PACKET_CZ_MAIL_GET_LIST {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_MAIL_SEND {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ char[0x18] ReceiveName;
  /* this+0x1c */ char[0x28] Header;
}

struct PACKET_CZ_MAIL_RESET_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Type;
}

struct PACKET_CZ_MAIL_OPEN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int MailID;
}

struct PACKET_CZ_MAIL_ADD_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct PACKET_CZ_REQ_MAIL_RETURN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int MailID;
  /* this+0x6 */ char[0x18] ReceiveName;
}

struct PACKET_CZ_MAIL_DELETE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int MailID;
}

struct PACKET_CZ_MAIL_GET_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int MailID;
}

struct PACKET_CZ_AUCTION_CREATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Type;
}

struct PACKET_CZ_AUCTION_ADD_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct PACKET_CZ_AUCTION_ADD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NowMoney;
  /* this+0x6 */ unsigned long MaxMoney;
  /* this+0xa */ short DeleteHour;
}

struct PACKET_CZ_AUCTION_ADD_CANCEL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AuctionID;
}

struct PACKET_CZ_AUCTION_BUY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AuctionID;
  /* this+0x6 */ unsigned long Money;
}

struct PACKET_CZ_AUCTION_ITEM_SEARCH {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Type;
  /* this+0x4 */ unsigned long AuctionID;
  /* this+0x8 */ char[0x18] Name;
  /* this+0x20 */ unsigned short Page;
}

struct PACKET_CZ_AUCTION_REQ_MY_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Type;
}

struct PACKET_CZ_AUCTION_REQ_MY_SELL_STOP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AuctionID;
}

struct PACKET_CZ_HUNTINGLIST {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_PC_BUY_CASH_POINT_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ short count;
  /* this+0x6 */ unsigned long FreePoint;
}

struct PACKET_CZ_STANDING_RESURRECTION {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_SHORTCUT_KEY_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short Index;
  /* this+0x4 */ struct ShortCutKey ShortCutKey;
}

struct PACKET_CZ_CONFIG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ enum PACKET_CZ_CONFIG::enumConfig Config;
  /* this+0x6 */ int Value;
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> >::iterator {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> >::_Node * _Ptr;
}

class std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> > {
  /* this+0x0 */ class std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> > _Tr;
}

class std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> > {
  /* this+0x0 */ class std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> > _Tr;
}

struct CellPos {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
}

class std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> > {
  /* this+0x0 */ class std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos> > _Tr;
}

struct ColorCellPos {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ unsigned long color;
}

struct std::pair<unsigned long const ,NamePair> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ struct NamePair second;
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> > {
      /* this+0x0 */ class std::allocator<CellPos> allocator;
  /* this+0x1 */ struct std::less<unsigned long> key_compare;
  /* this+0x4 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

struct FogPara {
  /* this+0x0 */ unsigned long mode;
  /* this+0x4 */ unsigned long color;
  /* this+0x8 */ int useRange;
  /* this+0xc */ float density;
  /* this+0x10 */ float start;
  /* this+0x14 */ float end;
}

struct GroundAttrPosInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int isRendered;
  /* this+0xc */ unsigned long cellColor;
}

class CPathFinder {
  /* this+0x0 */ class C3dAttr * m_mapData;
  /* this+0x4 */ int m_destX;
  /* this+0x8 */ int m_destY;
  /* this+0xc */ int m_poolCount;
  /* this+0x10 */ struct PathNode[0x96] m_nodePool;
  /* this+0x1078 */ class std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> > m_masterNodes;
  /* this+0x1088 */ class CPriorityQueue m_openNodes;
}

class CPathInfo {
  /* this+0x0 */ class std::vector<PathCell,std::allocator<PathCell> > m_pathData;
  /* this+0x10 */ int m_startCell;
  /* this+0x14 */ float m_startPointX;
  /* this+0x18 */ float m_startPointY;
}

struct PathNode {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ struct PathNode * parent;
  /* this+0xc */ int cost;
  /* this+0x10 */ int total;
  /* this+0x14 */ int type;
  /* this+0x18 */ int dir;
}

class std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> > {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> > _Tr;
}

class CPriorityQueue {
  /* this+0x0 */ class std::vector<PathNode *,std::allocator<PathNode *> > heap;
}

class CTipOfTheDay {
  /* this+0x0 */ unsigned char m_bTryLoading;
  /* this+0x4 */ class std::vector<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::vector<std::basic_string<char,std::char_traits82cfc338 m_tipList;
}

class std::vector<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::vector<std::basic_string<char,std::char_traits82cfc338 {
  /* this+0x0 */ class std::allocator<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > allocator;
  /* this+0x4 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > * _First;
  /* this+0x8 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > * _Last;
  /* this+0xc */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > * _End;
}

class CSnapMgr {
  /* this+0x4 */ class SnapObject * m_masterObject;
  /* this+0x8 */ class std::list<SnapObject *,std::allocator<SnapObject *> > m_snapObjectList;
}

class SnapObject {
  /* this+0x4 */ class UIWindow * m_careWindow;
  /* this+0x8 */ class std::list<SnapObject *,std::allocator<SnapObject *> >[0x4] m_snapObjectList;
  /* this+0x38 */ int m_isProcessed;
}

class std::list<SnapObject *,std::allocator<SnapObject *> > {
  /* this+0x0 */ class std::allocator<SnapObject *> allocator;
  /* this+0x4 */ struct std::list<SnapObject *,std::allocator<SnapObject *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> > {
  /* this+0x0 */ class std::_Tree<unsigned long,std::pair<unsigned long const ,int>,std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn,std::less<unsigned long>,std::allocator<int> > _Tr;
}

class std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> > {
  /* this+0x0 */ class std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos2> > _Tr;
}

struct SHOW_IMAGE_INFO {
  /* this+0x0 */ int type;
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > imageName;
}

struct PACKET_CZ_NOTIFY_ACTORINIT {
  /* this+0x0 */ short PacketType;
}

struct UVRECT {
  /* this+0x0 */ float u1;
  /* this+0x4 */ float v1;
  /* this+0x8 */ float u2;
  /* this+0xc */ float v2;
}

struct SprActName {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > sprName;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > actName;
}

class std::vector<PathCell,std::allocator<PathCell> > {
  /* this+0x0 */ class std::allocator<PathCell> allocator;
  /* this+0x4 */ struct PathCell * _First;
  /* this+0x8 */ struct PathCell * _Last;
  /* this+0xc */ struct PathCell * _End;
}

struct PACKET_CZ_REQUEST_TIME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x2] pad;
  /* this+0x4 */ unsigned long clientTime;
}

struct PACKET_CZ_REQNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x5] pad;
  /* this+0x7 */ unsigned long AID;
}

struct PACKET_CZ_REQNAME_BYGID {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x9] pad;
  /* this+0xb */ unsigned long GID;
}

class CRayPicker {
  /* this+0x0 */ class std::list<SceneGraphNode *,std::allocator<SceneGraphNode *> > m_cubeletList;
  /* this+0xc */ struct lineSegment3d m_ray;
}

struct lineSegment3d {
  /* this+0x0 */ struct vector3d org;
  /* this+0xc */ struct vector3d dir;
  /* this+0x18 */ float limit;
}

struct SceneGraphNode {
  /* this+0x0 */ struct SceneGraphNode * m_parent;
  /* this+0x4 */ struct SceneGraphNode *[0x4] m_child;
  /* this+0x14 */ struct C3dAABB m_aabb;
  /* this+0x2c */ struct vector3d m_center;
  /* this+0x38 */ struct vector3d m_halfSize;
  /* this+0x44 */ int m_needUpdate;
  /* this+0x48 */ class std::vector<C3dActor *,std::allocator<C3dActor *> > m_actorList;
  /* this+0x58 */ class C3dGround * m_ground;
  /* this+0x5c */ struct tagRECT m_groundArea;
  /* this+0x6c */ class C3dAttr * m_attr;
  /* this+0x70 */ struct tagRECT m_attrArea;
}

struct ray3d {
  /* this+0x0 */ struct vector3d org;
  /* this+0xc */ struct vector3d dir;
}

struct C3dAABB {
  /* this+0x0 */ struct vector3d min;
  /* this+0xc */ struct vector3d max;
}

class std::list<SceneGraphNode *,std::allocator<SceneGraphNode *> > {
  /* this+0x0 */ class std::allocator<SceneGraphNode *> allocator;
  /* this+0x4 */ struct std::list<SceneGraphNode *,std::allocator<SceneGraphNode *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<SceneGraphNode *,std::allocator<SceneGraphNode *> >::const_iterator {
  /* this+0x0 */ struct std::list<SceneGraphNode *,std::allocator<SceneGraphNode *> >::_Node * _Ptr;
}

class std::list<SceneGraphNode *,std::allocator<SceneGraphNode *> >::iterator {
  /* this+0x0 */ struct std::list<SceneGraphNode *,std::allocator<SceneGraphNode *> >::_Node * _Ptr;
}

struct std::list<SceneGraphNode *,std::allocator<SceneGraphNode *> >::_Node {
  /* this+0x0 */ struct std::list<SceneGraphNode *,std::allocator<SceneGraphNode *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<SceneGraphNode *,std::allocator<SceneGraphNode *> >::_Node * _Prev;
  /* this+0x8 */ struct SceneGraphNode * _Value;
}

class UIVerticalNameBalloonText {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ unsigned char m_isBold;
  /* this+0x4c */ int m_fontSize;
  /* this+0x50 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_strings;
  /* this+0x60 */ unsigned long m_fontColor;
  /* this+0x64 */ unsigned long m_bgColor;
  /* this+0x68 */ unsigned char m_isBack;
  /* this+0x6a */ short m_charfont;
  /* this+0x6c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_ebmResName;
  /* this+0x7c */ int m_textWidth;
  /* this+0x80 */ int m_textHeight;
}

struct PACKET_CZ_REQ_WHISPER_LIST {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_SETTING_WHISPER_STATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char type;
}

struct PACKET_CZ_SETTING_WHISPER_PC {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] name;
  /* this+0x1a */ unsigned char type;
}

struct PACKET_CZ_LESSEFFECT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int isLess;
}

struct PACKET_CZ_REQ_PVPPOINT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
}

struct PACKET_CZ_PARTY_CONFIG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char bRefuseJoinMsg;
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> > {
      /* this+0x0 */ class std::allocator<NamePair> allocator;
  /* this+0x1 */ struct std::less<unsigned long> key_compare;
  /* this+0x4 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> > {
      /* this+0x0 */ class std::allocator<unsigned long> allocator;
  /* this+0x1 */ struct std::less<unsigned long> key_compare;
  /* this+0x4 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,int>,std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn,std::less<unsigned long>,std::allocator<int> > {
      /* this+0x0 */ class std::allocator<int> allocator;
  /* this+0x1 */ struct std::less<unsigned long> key_compare;
  /* this+0x4 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,int>,std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn,std::less<unsigned long>,std::allocator<int> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> >::_Node * _Ptr;
}

struct std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> >::_Node {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned long const ,NamePair> _Value;
  /* this+0x50 */ enum std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> >::_Redbl _Color;
}

struct std::less<unsigned long> {
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> >::iterator {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> >::_Node * _Ptr;
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> >::_Node * _Ptr;
}

struct std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> >::_Node {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned long const ,unsigned long> _Value;
  /* this+0x14 */ enum std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> >::_Redbl _Color;
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,int>,std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn,std::less<unsigned long>,std::allocator<int> >::iterator {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,int>,std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn,std::less<unsigned long>,std::allocator<int> >::_Node * _Ptr;
}

class std::_Tree<unsigned long,std::pair<unsigned long const ,int>,std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn,std::less<unsigned long>,std::allocator<int> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,int>,std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn,std::less<unsigned long>,std::allocator<int> >::_Node * _Ptr;
}

struct std::_Tree<unsigned long,std::pair<unsigned long const ,int>,std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn,std::less<unsigned long>,std::allocator<int> >::_Node {
  /* this+0x0 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,int>,std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn,std::less<unsigned long>,std::allocator<int> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,int>,std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn,std::less<unsigned long>,std::allocator<int> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<unsigned long,std::pair<unsigned long const ,int>,std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn,std::less<unsigned long>,std::allocator<int> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned long const ,int> _Value;
  /* this+0x14 */ enum std::_Tree<unsigned long,std::pair<unsigned long const ,int>,std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn,std::less<unsigned long>,std::allocator<int> >::_Redbl _Color;
}

struct std::pair<unsigned long const ,int> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ int second;
}

class std::allocator<CellPos> {
}

class std::allocator<ColorCellPos> {
}

class std::allocator<ColorCellPos2> {
}

class RandGenerator {
  /* this+0x0 */ int m_curCallNumber;
  /* this+0x4 */ int m_maxCallNumber;
  /* this+0x8 */ int m_randSeed;
  /* this+0xc */ int m_totalRandNum;
}

class C3dGrannyGameActor {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ int m_efId;
  /* this+0xfc */ int m_Sk_Level;
  /* this+0x100 */ int m_isLoop;
  /* this+0x104 */ class std::list<CRagEffect *,std::allocator<CRagEffect *> > m_effectList;
  /* this+0x110 */ class CRagEffect * m_beginSpellEffect;
  /* this+0x114 */ class CRagEffect * m_magicTargetEffect;
  /* this+0x118 */ int m_moveDestX;
  /* this+0x11c */ int m_moveDestY;
  /* this+0x120 */ unsigned long m_speed;
  /* this+0x124 */ int m_isCounter;
  /* this+0x128 */ int m_isTrickDead;
  /* this+0x12c */ int m_isPlayHitWave;
  /* this+0x130 */ int m_isAsuraAttack;
  /* this+0x134 */ char * m_emblemWnd;
  /* this+0x138 */ char * m_WordDisplayWnd;
  /* this+0x13c */ char[0x80] m_hitWaveName;
  /* this+0x1bc */ unsigned long m_colorEndTick;
  /* this+0x1c0 */ short m_clevel;
  /* this+0x1c2 */ short m_MaxHp;
  /* this+0x1c4 */ short m_Hp;
  /* this+0x1c6 */ short m_MaxSp;
  /* this+0x1c8 */ short m_Sp;
  /* this+0x1cc */ int m_Exp;
  /* this+0x1d0 */ short m_Str;
  /* this+0x1d2 */ short m_Int;
  /* this+0x1d4 */ short m_Dex;
  /* this+0x1d6 */ short m_Vit;
  /* this+0x1d8 */ short m_Luk;
  /* this+0x1da */ short m_Agi;
  /* this+0x1dc */ struct vector3d m_accel;
  /* this+0x1e8 */ class CPathInfo m_path;
  /* this+0x204 */ unsigned long m_moveStartTime;
  /* this+0x208 */ unsigned char m_isNeverAnimation;
  /* this+0x20c */ int m_pathStartCell;
  /* this+0x210 */ float m_dist;
  /* this+0x214 */ unsigned long m_lastProcessStateTime;
  /* this+0x218 */ unsigned long m_lastServerTime;
  /* this+0x21c */ unsigned long m_chatTick;
  /* this+0x220 */ unsigned long m_targetGid;
  /* this+0x224 */ float m_attackMotion;
  /* this+0x228 */ int m_isBladeStop;
  /* this+0x22c */ unsigned long m_gid;
  /* this+0x230 */ int m_job;
  /* this+0x234 */ int m_sex;
  /* this+0x238 */ class UIBalloonText * m_balloon;
  /* this+0x23c */ class UIChatRoomTitle * m_chatTitle;
  /* this+0x240 */ class UIMerchantShopTitle * m_merchantShopTitle;
  /* this+0x244 */ class UIRechargeGage * m_skillRechargeGage;
  /* this+0x248 */ unsigned long m_freezeEndTick;
  /* this+0x24c */ unsigned long m_petEmotionStartTick;
  /* this+0x250 */ unsigned long m_skillRechargeEndTick;
  /* this+0x254 */ unsigned long m_skillRechargeStartTick;
  /* this+0x258 */ int m_chatWidth;
  /* this+0x25c */ int m_chatHeight;
  /* this+0x260 */ int m_nameWidth;
  /* this+0x264 */ int m_xSize;
  /* this+0x268 */ int m_ySize;
  /* this+0x26c */ int m_headType;
  /* this+0x270 */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackList;
  /* this+0x27c */ class std::list<WBA,std::allocator<WBA> > m_willBeAttackedList;
  /* this+0x288 */ int m_willBeDead;
  /* this+0x28c */ int m_is99;
  /* this+0x290 */ char m_99;
  /* this+0x294 */ int m_bodyState;
  /* this+0x298 */ int m_effectState;
  /* this+0x29c */ int m_healthState;
  /* this+0x2a0 */ int m_pkState;
  /* this+0x2a4 */ float m_damageDestX;
  /* this+0x2a8 */ float m_damageDestZ;
  /* this+0x2ac */ unsigned long m_effectLaunchCnt;
  /* this+0x2b0 */ unsigned long m_vanishTime;
  /* this+0x2b4 */ int m_actorType;
  /* this+0x2b8 */ int m_bIsMemberAndVisible;
  /* this+0x2bc */ int m_gdid;
  /* this+0x2c0 */ int m_emblemVersion;
  /* this+0x2c4 */ class CMercenaryAI * m_homunAI;
  /* this+0x2c8 */ class CMercenaryAI * m_merAI;
  /* this+0x2cc */ unsigned char m_objectType;
  /* this+0x2d0 */ struct _MSG2AI m_homunMsg;
  /* this+0x2e8 */ struct _MSG2AI m_homunResMsg;
  /* this+0x300 */ struct _MSG2AI m_merMsg;
  /* this+0x318 */ struct _MSG2AI m_merResMsg;
  /* this+0x330 */ class CMsgEffect * m_birdEffect;
  /* this+0x334 */ class CMsgEffect * m_cartEffect;
  /* this+0x338 */ class CMsgEffect * m_pkEffect;
  /* this+0x33c */ class CMsgEffect * m_iceEffect;
  /* this+0x340 */ class CMsgEffect * m_curseEffect;
  /* this+0x344 */ class CMsgEffect * m_sleepEffect;
  /* this+0x348 */ class CMsgEffect * m_stunEffect;
  /* this+0x34c */ class CMsgEffect * m_silenceEffect;
  /* this+0x350 */ class CMsgEffect * m_angelusEffect;
  /* this+0x354 */ class CMsgEffect * m_crusisEffect;
  /* this+0x358 */ class CMsgEffect * m_chatProhibitEffect;
  /* this+0x35c */ class CMsgEffect * m_cursorEffect;
  /* this+0x360 */ class std::list<CMsgEffect *,std::allocator<CMsgEffect *> > m_msgEffectList;
  /* this+0x36c */ class CTexture * m_emblemTex;
  /* this+0x370 */ class C3dGrannyModelRes * m_GrannyActorRes;
  /* this+0x374 */ struct granny_model_instance * m_Instance;
  /* this+0x378 */ struct RPMesh *[0x1e] m_rp;
  /* this+0x3f0 */ struct granny_pnt332_vertex *[0x1e] m_matVer;
  /* this+0x468 */ struct granny_system_clock m_fAniCnt;
  /* this+0x478 */ struct granny_system_clock m_fLastAniCnt;
  /* this+0x488 */ float m_GameClock;
  /* this+0x48c */ int m_curAction;
  /* this+0x490 */ int m_baseAction;
  /* this+0x494 */ float m_fCurRot;
  /* this+0x498 */ unsigned char m_RenderAlpha;
  /* this+0x49c */ unsigned long m_nVertCol;
  /* this+0x4a0 */ int m_nLastActAnimation;
  /* this+0x4a4 */ int m_curFrame;
  /* this+0x4a8 */ char[0x104] m_strJobFn;
  /* this+0x5ac */ int m_nRenderType;
  /* this+0x5b0 */ class CTexture * m_pCellTex;
  /* this+0x5b4 */ struct granny_control *[0x14] m_Control;
  /* this+0x604 */ unsigned char m_isFirstProcess;
  /* this+0x608 */ class CTexture *[0x1e] m_pTex;
  /* this+0x680 */ void *[0x1e] m_pFaceArr;
  /* this+0x6f8 */ int[0x1e] m_nIndexNo;
  /* this+0x770 */ struct matrix[0x1e] m_matPose;
  /* this+0xd10 */ struct granny_world_pose * m_pWorldPose;
  /* this+0xd14 */ class CTexture * m_shadowTex;
  /* this+0xd18 */ class std::vector<vector3d,std::allocator<vector3d> > m_shadowDotList;
}

class CGrannyCorpse3d {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class C3dGrannyModelRes * m_GrannyActorRes;
  /* this+0x14 */ struct granny_model_instance * m_Instance;
  /* this+0x18 */ struct granny_control * m_Control;
  /* this+0x1c */ struct RPMesh *[0x1e] m_rp;
  /* this+0x94 */ struct granny_pnt332_vertex *[0x1e] m_matVer;
  /* this+0x10c */ struct granny_system_clock m_fAniCnt;
  /* this+0x11c */ struct granny_system_clock m_fLastAniCnt;
  /* this+0x12c */ float m_GameClock;
  /* this+0x130 */ int m_nStandAngle;
  /* this+0x134 */ int m_nStateCnt;
  /* this+0x138 */ float m_fCurRot;
  /* this+0x13c */ unsigned char m_RenderAlpha;
  /* this+0x140 */ unsigned long m_nVertCol;
  /* this+0x144 */ char[0x104] m_strJobFn;
}

class std::vector<vector3d,std::allocator<vector3d> > {
  /* this+0x0 */ class std::allocator<vector3d> allocator;
  /* this+0x4 */ struct vector3d * _First;
  /* this+0x8 */ struct vector3d * _Last;
  /* this+0xc */ struct vector3d * _End;
}

struct COLOR {
  /* this+0x0 */ unsigned char b;
  /* this+0x1 */ unsigned char g;
  /* this+0x2 */ unsigned char r;
  /* this+0x3 */ unsigned char a;
  /* this+0x0 */ unsigned long color;
}

struct RPQuadFace {
  /* this+0x0 */ struct tlvertex3d * verts;
  /* this+0x4 */ int numVerts;
  /* this+0x8 */ class CTexture * tex;
  /* this+0xc */ unsigned short * indices;
  /* this+0x10 */ unsigned long numIndices;
  /* this+0x14 */ unsigned long srcAlphaMode;
  /* this+0x18 */ unsigned long destAlphaMode;
  /* this+0x1c */ unsigned long mtPreset;
  /* this+0x20 */ enum _D3DPRIMITIVETYPE primType;
  /* this+0x24 */ struct tlvertex3d[0x4] m_verts;
}

struct CacheInfo {
  /* this+0x0 */ unsigned long id;
  /* this+0x4 */ unsigned long palID;
  /* this+0x8 */ unsigned long lastTime;
  /* this+0xc */ float tu;
  /* this+0x10 */ float tv;
  /* this+0x14 */ float tu1;
  /* this+0x18 */ float tv1;
  /* this+0x1c */ unsigned long x;
  /* this+0x20 */ unsigned long y;
}

class CPaletteRes {
  /* this+0x4 */ int m_lockCnt;
  /* this+0x8 */ unsigned long m_timeStamp;
  /* this+0xc */ int m_extIndex;
  /* this+0x10 */ class CHash m_fName;
  /* this+0x110 */ unsigned long[0x100] m_pal;
}

class CMousePointer {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ int m_visibleTime;
}

class CAbleToMakeEffect {
  /* this+0x4 */ struct vector3d m_pos;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bodyPaletteName;
  /* this+0x20 */ int m_baseAction;
  /* this+0x24 */ int m_curAction;
  /* this+0x28 */ int m_curMotion;
  /* this+0x2c */ int m_oldBaseAction;
  /* this+0x30 */ int m_oldMotion;
  /* this+0x34 */ int m_bodyPalette;
  /* this+0x38 */ float m_roty;
  /* this+0x3c */ float m_zoom;
  /* this+0x40 */ float m_shadowZoom;
  /* this+0x44 */ float m_motionSpeed;
  /* this+0x48 */ float m_lastPixelRatio;
  /* this+0x4c */ float m_loopCountOfmotionFinish;
  /* this+0x50 */ float m_modifyFactorOfmotionSpeed;
  /* this+0x54 */ float m_modifyFactorOfmotionSpeed2;
  /* this+0x58 */ int m_motionType;
  /* this+0x5c */ int m_stateId;
  /* this+0x60 */ int m_oldstateId;
  /* this+0x64 */ int m_sprShift;
  /* this+0x68 */ int m_sprAngle;
  /* this+0x6c */ int m_offsetOow;
  /* this+0x70 */ unsigned long m_colorOfSingleColor;
  /* this+0x74 */ unsigned long m_singleColorStartTick;
  /* this+0x78 */ unsigned long m_stateStartTick;
  /* this+0x7c */ struct ACTOR_COLOR m_oldColor;
  /* this+0x80 */ struct ACTOR_COLOR m_curColor;
  /* this+0x84 */ unsigned long m_sprArgb;
  /* this+0x84 */ struct COLOR m_sprColor;
  /* this+0x88 */ unsigned char m_isLieOnGround;
  /* this+0x89 */ unsigned char m_isMotionFinished;
  /* this+0x8a */ unsigned char m_isMotionFreezed;
  /* this+0x8b */ unsigned char m_isSingleColor;
  /* this+0x8c */ unsigned char m_isVisible;
  /* this+0x8d */ unsigned char m_isVisibleBody;
  /* this+0x8e */ unsigned char m_alwaysTopLayer;
  /* this+0x8f */ unsigned char m_isSprArgbFixed;
  /* this+0x90 */ unsigned char m_shadowOn;
  /* this+0x91 */ unsigned char m_shouldAddPickInfo;
  /* this+0x94 */ int m_isPc;
  /* this+0x98 */ int m_lastTlvertX;
  /* this+0x9c */ int m_lastTlvertY;
  /* this+0xa0 */ unsigned char m_forceAct;
  /* this+0xa1 */ unsigned char m_forceMot;
  /* this+0xa2 */ unsigned char[0x5] m_forceAct2;
  /* this+0xa7 */ unsigned char[0x5] m_forceMot2;
  /* this+0xac */ unsigned char m_forceMaxMot;
  /* this+0xad */ unsigned char m_forceAnimSpeed;
  /* this+0xae */ unsigned char m_forceFinishedAct;
  /* this+0xaf */ unsigned char m_forceFinishedMot;
  /* this+0xb0 */ unsigned char m_forceStartMot;
  /* this+0xb4 */ int m_isForceState;
  /* this+0xb8 */ int m_isForceAnimLoop;
  /* this+0xbc */ int m_isForceAnimation;
  /* this+0xc0 */ int m_isForceAnimFinish;
  /* this+0xc4 */ int m_isForceState2;
  /* this+0xc8 */ int m_isForceState3;
  /* this+0xcc */ unsigned long m_forceStateCnt;
  /* this+0xd0 */ unsigned long m_forceStateEndTick;
  /* this+0xd4 */ int m_BodyLight;
  /* this+0xd8 */ char m_BeZero;
  /* this+0xd9 */ char m_BodyFlag;
  /* this+0xda */ unsigned char m_BodySin;
  /* this+0xdb */ unsigned char m_BodySin2;
  /* this+0xdc */ unsigned char m_BodySin3;
  /* this+0xdd */ unsigned char m_BodySin4;
  /* this+0xde */ unsigned char m_BodySin5;
  /* this+0xe0 */ short m_BodyTime;
  /* this+0xe2 */ unsigned char m_BodyTime2;
  /* this+0xe3 */ unsigned char m_BodyTime3;
  /* this+0xe4 */ short m_FlyMove;
  /* this+0xe6 */ unsigned char m_FlyNow;
  /* this+0xe7 */ char m_camp;
  /* this+0xe8 */ short m_charfont;
  /* this+0xea */ unsigned char m_BodyAni;
  /* this+0xeb */ unsigned char m_BodyAct;
  /* this+0xec */ unsigned char m_BodyAniFrame;
  /* this+0xf0 */ class CSprRes * m_sprRes;
  /* this+0xf4 */ class CActRes * m_actRes;
  /* this+0xf8 */ int m_efId;
  /* this+0xfc */ int m_Sk_Level;
  /* this+0x100 */ int m_isLoop;
  /* this+0x104 */ class std::list<CRagEffect *,std::allocator<CRagEffect *> > m_effectList;
  /* this+0x110 */ class CRagEffect * m_beginSpellEffect;
  /* this+0x114 */ class CRagEffect * m_magicTargetEffect;
}

struct PACKET_CZ_PROGRESS {
  /* this+0x0 */ short PacketType;
}

class std::list<CRagEffect *,std::allocator<CRagEffect *> > {
  /* this+0x0 */ class std::allocator<CRagEffect *> allocator;
  /* this+0x4 */ struct std::list<CRagEffect *,std::allocator<CRagEffect *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<CRagEffect *,std::allocator<CRagEffect *> >::iterator {
  /* this+0x0 */ struct std::list<CRagEffect *,std::allocator<CRagEffect *> >::_Node * _Ptr;
}

class std::list<CRagEffect *,std::allocator<CRagEffect *> >::const_iterator {
  /* this+0x0 */ struct std::list<CRagEffect *,std::allocator<CRagEffect *> >::_Node * _Ptr;
}

struct std::list<CRagEffect *,std::allocator<CRagEffect *> >::_Node {
  /* this+0x0 */ struct std::list<CRagEffect *,std::allocator<CRagEffect *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<CRagEffect *,std::allocator<CRagEffect *> >::_Node * _Prev;
  /* this+0x8 */ class CRagEffect * _Value;
}

class std::list<WBA,std::allocator<WBA> > {
  /* this+0x0 */ class std::allocator<WBA> allocator;
  /* this+0x4 */ struct std::list<WBA,std::allocator<WBA> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<WBA,std::allocator<WBA> >::iterator {
  /* this+0x0 */ struct std::list<WBA,std::allocator<WBA> >::_Node * _Ptr;
}

class std::list<WBA,std::allocator<WBA> >::const_iterator {
  /* this+0x0 */ struct std::list<WBA,std::allocator<WBA> >::_Node * _Ptr;
}

struct std::list<WBA,std::allocator<WBA> >::_Node {
  /* this+0x0 */ struct std::list<WBA,std::allocator<WBA> >::_Node * _Next;
  /* this+0x4 */ struct std::list<WBA,std::allocator<WBA> >::_Node * _Prev;
  /* this+0x8 */ struct WBA _Value;
}

class std::list<CMsgEffect *,std::allocator<CMsgEffect *> > {
  /* this+0x0 */ class std::allocator<CMsgEffect *> allocator;
  /* this+0x4 */ struct std::list<CMsgEffect *,std::allocator<CMsgEffect *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<CMsgEffect *,std::allocator<CMsgEffect *> >::iterator {
  /* this+0x0 */ struct std::list<CMsgEffect *,std::allocator<CMsgEffect *> >::_Node * _Ptr;
}

class std::list<CMsgEffect *,std::allocator<CMsgEffect *> >::const_iterator {
  /* this+0x0 */ struct std::list<CMsgEffect *,std::allocator<CMsgEffect *> >::_Node * _Ptr;
}

struct std::list<CMsgEffect *,std::allocator<CMsgEffect *> >::_Node {
  /* this+0x0 */ struct std::list<CMsgEffect *,std::allocator<CMsgEffect *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<CMsgEffect *,std::allocator<CMsgEffect *> >::_Node * _Prev;
  /* this+0x8 */ class CMsgEffect * _Value;
}

struct std::list<CRagEffect *,std::allocator<CRagEffect *> >::_Acc {
}

class CEmbedFont {
  /* this+0x4 */ struct HINSTANCE__ * m_hLib;
  /* this+0x8 */ struct HFONT__ * m_Font;
  /* this+0xc */ struct HFONT__ * m_pOldFont;
  /* this+0x10 */ char[0x100] m_strUrl;
}

struct TTLOADINFO {
  /* this+0x0 */ unsigned short usStructSize;
  /* this+0x2 */ unsigned short usRefStrSize;
  /* this+0x4 */ unsigned short * pusRefStr;
}

struct IStream {
}

struct ATL::ATL_PROPMAP_ENTRY {
  /* this+0x0 */ const unsigned short * szDesc;
  /* this+0x4 */ long dispid;
  /* this+0x8 */ const struct _GUID * pclsidPropPage;
  /* this+0xc */ const struct _GUID * piidDispatch;
  /* this+0x10 */ unsigned long dwOffsetData;
  /* this+0x14 */ unsigned long dwSizeData;
  /* this+0x18 */ unsigned short vt;
}

struct IUnknown {
}

struct IDispatch {
}

class ATL::CComPtr<IDispatch> {
  /* this+0x0 */ struct IDispatch * p;
}

class ATL::_NoAddRefReleaseOnCComPtr<IDispatch> {
}

struct tagVARIANT {
  /* this+0x0 */ unsigned short vt;
  /* this+0x2 */ unsigned short wReserved1;
  /* this+0x4 */ unsigned short wReserved2;
  /* this+0x6 */ unsigned short wReserved3;
  /* this+0x8 */ long lVal;
  /* this+0x8 */ unsigned char bVal;
  /* this+0x8 */ short iVal;
  /* this+0x8 */ float fltVal;
  /* this+0x8 */ double dblVal;
  /* this+0x8 */ short boolVal;
  /* this+0x8 */ long scode;
  /* this+0x8 */ union tagCY cyVal;
  /* this+0x8 */ double date;
  /* this+0x8 */ unsigned short * bstrVal;
  /* this+0x8 */ struct IUnknown * punkVal;
  /* this+0x8 */ struct IDispatch * pdispVal;
  /* this+0x8 */ struct tagSAFEARRAY * parray;
  /* this+0x8 */ unsigned char * pbVal;
  /* this+0x8 */ short * piVal;
  /* this+0x8 */ long * plVal;
  /* this+0x8 */ float * pfltVal;
  /* this+0x8 */ double * pdblVal;
  /* this+0x8 */ short * pboolVal;
  /* this+0x8 */ long * pscode;
  /* this+0x8 */ union tagCY * pcyVal;
  /* this+0x8 */ double * pdate;
  /* this+0x8 */ unsigned short * * pbstrVal;
  /* this+0x8 */ struct IUnknown * * ppunkVal;
  /* this+0x8 */ struct IDispatch * * ppdispVal;
  /* this+0x8 */ struct tagSAFEARRAY * * pparray;
  /* this+0x8 */ struct tagVARIANT * pvarVal;
  /* this+0x8 */ void * byref;
  /* this+0x8 */ char cVal;
  /* this+0x8 */ unsigned short uiVal;
  /* this+0x8 */ unsigned long ulVal;
  /* this+0x8 */ int intVal;
  /* this+0x8 */ unsigned int uintVal;
  /* this+0x8 */ struct tagDEC * pdecVal;
  /* this+0x8 */ char * pcVal;
  /* this+0x8 */ unsigned short * puiVal;
  /* this+0x8 */ unsigned long * pulVal;
  /* this+0x8 */ int * pintVal;
  /* this+0x8 */ unsigned int * puintVal;
  /* this+0x8 */ void * pvRecord;
  /* this+0xc */ struct IRecordInfo * pRecInfo;
  /* this+0x0 */ struct tagDEC decVal;
}

class ATL::CComVariant {
  /* this+0x0 */ unsigned short vt;
  /* this+0x2 */ unsigned short wReserved1;
  /* this+0x4 */ unsigned short wReserved2;
  /* this+0x6 */ unsigned short wReserved3;
  /* this+0x8 */ long lVal;
  /* this+0x8 */ unsigned char bVal;
  /* this+0x8 */ short iVal;
  /* this+0x8 */ float fltVal;
  /* this+0x8 */ double dblVal;
  /* this+0x8 */ short boolVal;
  /* this+0x8 */ long scode;
  /* this+0x8 */ union tagCY cyVal;
  /* this+0x8 */ double date;
  /* this+0x8 */ unsigned short * bstrVal;
  /* this+0x8 */ struct IUnknown * punkVal;
  /* this+0x8 */ struct IDispatch * pdispVal;
  /* this+0x8 */ struct tagSAFEARRAY * parray;
  /* this+0x8 */ unsigned char * pbVal;
  /* this+0x8 */ short * piVal;
  /* this+0x8 */ long * plVal;
  /* this+0x8 */ float * pfltVal;
  /* this+0x8 */ double * pdblVal;
  /* this+0x8 */ short * pboolVal;
  /* this+0x8 */ long * pscode;
  /* this+0x8 */ union tagCY * pcyVal;
  /* this+0x8 */ double * pdate;
  /* this+0x8 */ unsigned short * * pbstrVal;
  /* this+0x8 */ struct IUnknown * * ppunkVal;
  /* this+0x8 */ struct IDispatch * * ppdispVal;
  /* this+0x8 */ struct tagSAFEARRAY * * pparray;
  /* this+0x8 */ struct tagVARIANT * pvarVal;
  /* this+0x8 */ void * byref;
  /* this+0x8 */ char cVal;
  /* this+0x8 */ unsigned short uiVal;
  /* this+0x8 */ unsigned long ulVal;
  /* this+0x8 */ int intVal;
  /* this+0x8 */ unsigned int uintVal;
  /* this+0x8 */ struct tagDEC * pdecVal;
  /* this+0x8 */ char * pcVal;
  /* this+0x8 */ unsigned short * puiVal;
  /* this+0x8 */ unsigned long * pulVal;
  /* this+0x8 */ int * pintVal;
  /* this+0x8 */ unsigned int * puintVal;
  /* this+0x8 */ void * pvRecord;
  /* this+0xc */ struct IRecordInfo * pRecInfo;
  /* this+0x0 */ struct tagDEC decVal;
}

union tagCY {
  /* this+0x0 */ unsigned long Lo;
  /* this+0x4 */ long Hi;
  /* this+0x0 */ __int64 int64;
}

class ATL::CComBSTR {
  /* this+0x0 */ unsigned short * m_str;
}

class ATL::CComPtr<IPersistStream> {
  /* this+0x0 */ struct IPersistStream * p;
}

struct IPropertyBag {
}

struct IErrorLog {
}

struct ATL::CComTypeInfoHolder::stringdispid {
  /* this+0x0 */ class ATL::CComBSTR bstr;
  /* this+0x4 */ int nLen;
  /* this+0x8 */ long id;
}

struct ITypeInfo {
}

class ATL::CComPtr<ITypeInfo> {
  /* this+0x0 */ struct ITypeInfo * p;
}

class ATL::_NoAddRefReleaseOnCComPtr<ITypeInfo> {
}

struct ITypeLib {
}

class ATL::CComPtr<ITypeLib> {
  /* this+0x0 */ struct ITypeLib * p;
}

class ATL::_NoAddRefReleaseOnCComPtr<ITypeLib> {
}

struct tagTLIBATTR {
  /* this+0x0 */ struct _GUID guid;
  /* this+0x10 */ unsigned long lcid;
  /* this+0x14 */ enum tagSYSKIND syskind;
  /* this+0x18 */ unsigned short wMajorVerNum;
  /* this+0x1a */ unsigned short wMinorVerNum;
  /* this+0x1c */ unsigned short wLibFlags;
}

struct IProvideClassInfo2 {
}

class ATL::CComPtr<IProvideClassInfo2> {
  /* this+0x0 */ struct IProvideClassInfo2 * p;
}

class ATL::_NoAddRefReleaseOnCComPtr<IProvideClassInfo2> {
}

struct IPersist {
}

class ATL::CComPtr<IPersist> {
  /* this+0x0 */ struct IPersist * p;
}

class ATL::_NoAddRefReleaseOnCComPtr<IPersist> {
}

struct tagTYPEATTR {
  /* this+0x0 */ struct _GUID guid;
  /* this+0x10 */ unsigned long lcid;
  /* this+0x14 */ unsigned long dwReserved;
  /* this+0x18 */ long memidConstructor;
  /* this+0x1c */ long memidDestructor;
  /* this+0x20 */ unsigned short * lpstrSchema;
  /* this+0x24 */ unsigned long cbSizeInstance;
  /* this+0x28 */ enum tagTYPEKIND typekind;
  /* this+0x2c */ unsigned short cFuncs;
  /* this+0x2e */ unsigned short cVars;
  /* this+0x30 */ unsigned short cImplTypes;
  /* this+0x32 */ unsigned short cbSizeVft;
  /* this+0x34 */ unsigned short cbAlignment;
  /* this+0x36 */ unsigned short wTypeFlags;
  /* this+0x38 */ unsigned short wMajorVerNum;
  /* this+0x3a */ unsigned short wMinorVerNum;
  /* this+0x3c */ struct tagTYPEDESC tdescAlias;
  /* this+0x44 */ struct tagIDLDESC idldescType;
}

class ATL::CComModule {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ struct HINSTANCE__ * m_hInst;
  /* this+0x8 */ struct HINSTANCE__ * m_hInstResource;
  /* this+0xc */ struct HINSTANCE__ * m_hInstTypeLib;
  /* this+0x10 */ struct _ATL_OBJMAP_ENTRY * m_pObjMap;
  /* this+0x14 */ long m_nLockCnt;
  /* this+0x18 */ void * m_hHeap;
  /* this+0x1c */ struct _RTL_CRITICAL_SECTION m_csTypeInfoHolder;
  /* this+0x1c */ struct _RTL_CRITICAL_SECTION m_csStaticDataInit;
  /* this+0x34 */ struct _RTL_CRITICAL_SECTION m_csWindowCreate;
  /* this+0x4c */ struct _RTL_CRITICAL_SECTION m_csObjMap;
  /* this+0x64 */ unsigned long dwAtlBuildVer;
  /* this+0x68 */ struct _AtlCreateWndData * m_pCreateWndList;
  /* this+0x6c */ unsigned char m_bDestroyHeap;
  /* this+0x70 */ struct _GUID * pguidVer;
  /* this+0x74 */ unsigned long m_dwHeaps;
  /* this+0x78 */ void * * m_phHeaps;
  /* this+0x7c */ int m_nHeap;
  /* this+0x80 */ struct _ATL_TERMFUNC_ELEM * m_pTermFuncs;
  }

class VNIInputMode {
  /* this+0x4 */ char m_lastInput;
  /* this+0x8 */ int m_miniLastOffset;
  /* this+0xc */ int m_bigLastOffset;
}

class CVietLang {
  /* this+0x0 */ class CInputMode * m_pKeyMode;
  /* this+0x4 */ enum EInputMode m_inputMode;
  /* this+0x8 */ unsigned int m_keyCount;
  /* this+0xc */ char[0xa] m_inputKeyBuf;
  /* this+0x16 */ unsigned short[0xa] m_outputKeyBuf;
  /* this+0x2a */ char m_oriKey;
  /* this+0x2c */ enum ECurInputStatus m_curStatus;
  /* this+0x30 */ unsigned int m_offset;
}

class TELEXInputMode {
  /* this+0x4 */ char m_lastInput;
  /* this+0x8 */ int m_miniLastOffset;
  /* this+0xc */ int m_bigLastOffset;
}

class CInputMode {
  /* this+0x4 */ char m_lastInput;
  /* this+0x8 */ int m_miniLastOffset;
  /* this+0xc */ int m_bigLastOffset;
}

class CLanguageKeyProcess {
  /* this+0x0 */ struct HWND__ * m_hWnd;
  /* this+0x4 */ class CVietLang * m_pForeignLang;
  /* this+0x8 */ unsigned short m_completeChar;
  /* this+0xc */ int m_useLanguageMode;
  /* this+0x10 */ unsigned short m_lastOutput;
  /* this+0x14 */ int m_bChangeKeyCtrl;
  /* this+0x18 */ int m_bChangeKeyShift;
}

class cSecureGamePack {
  }

class cKeyProtector {
  /* this+0x0 */ int m_bSuccessSCSK;
  /* this+0x4 */ int m_bStartSCSK;
  /* this+0x8 */ struct HINSTANCE__ * m_hSCSK;
  /* this+0xc */ function  * m_lpLoadSCSK2;
  /* this+0x10 */ function  * m_lpStartSCSK;
  /* this+0x14 */ function  * m_lpStopSCSK;
  /* this+0x18 */ function  * m_lpGetRealAscii;
  /* this+0x1c */ enum ServiceType m_eServiceType;
  }

struct lua_State {
  /* this+0x0 */ union GCObject * next;
  /* this+0x4 */ unsigned char tt;
  /* this+0x5 */ unsigned char marked;
  /* this+0x8 */ struct lua_TObject * top;
  /* this+0xc */ struct lua_TObject * base;
  /* this+0x10 */ struct global_State * l_G;
  /* this+0x14 */ struct CallInfo * ci;
  /* this+0x18 */ struct lua_TObject * stack_last;
  /* this+0x1c */ struct lua_TObject * stack;
  /* this+0x20 */ int stacksize;
  /* this+0x24 */ struct CallInfo * end_ci;
  /* this+0x28 */ struct CallInfo * base_ci;
  /* this+0x2c */ unsigned short size_ci;
  /* this+0x2e */ unsigned short nCcalls;
  /* this+0x30 */ unsigned char hookmask;
  /* this+0x31 */ unsigned char allowhook;
  /* this+0x32 */ unsigned char hookinit;
  /* this+0x34 */ int basehookcount;
  /* this+0x38 */ int hookcount;
  /* this+0x3c */ function  * hook;
  /* this+0x40 */ struct lua_TObject _gt;
  /* this+0x50 */ union GCObject * openupval;
  /* this+0x54 */ union GCObject * gclist;
  /* this+0x58 */ struct lua_longjmp * errorJmp;
  /* this+0x5c */ int errfunc;
}

struct Zio {
  /* this+0x0 */ unsigned int n;
  /* this+0x4 */ const char * p;
  /* this+0x8 */ function  * reader;
  /* this+0xc */ void * data;
  /* this+0x10 */ const char * name;
}

struct Mbuffer {
  /* this+0x0 */ char * buffer;
  /* this+0x4 */ unsigned int buffsize;
}

union Value {
  /* this+0x0 */ union GCObject * gc;
  /* this+0x0 */ void * p;
  /* this+0x0 */ double n;
  /* this+0x0 */ int b;
}

struct lua_TObject {
  /* this+0x0 */ int tt;
  /* this+0x8 */ union Value value;
}

struct LClosure {
  /* this+0x0 */ union GCObject * next;
  /* this+0x4 */ unsigned char tt;
  /* this+0x5 */ unsigned char marked;
  /* this+0x6 */ unsigned char isC;
  /* this+0x7 */ unsigned char nupvalues;
  /* this+0x8 */ union GCObject * gclist;
  /* this+0xc */ struct Proto * p;
  /* this+0x10 */ struct lua_TObject g;
  /* this+0x20 */ struct UpVal *[0x1] upvals;
}

struct CallInfo {
  /* this+0x0 */ struct lua_TObject * base;
  /* this+0x4 */ struct lua_TObject * top;
  /* this+0x8 */ int state;
  /* this+0xc */ union __unnamed u;
}

struct Table {
  /* this+0x0 */ union GCObject * next;
  /* this+0x4 */ unsigned char tt;
  /* this+0x5 */ unsigned char marked;
  /* this+0x6 */ unsigned char flags;
  /* this+0x7 */ unsigned char lsizenode;
  /* this+0x8 */ struct Table * metatable;
  /* this+0xc */ struct lua_TObject * array;
  /* this+0x10 */ struct Node * node;
  /* this+0x14 */ struct Node * firstfree;
  /* this+0x18 */ union GCObject * gclist;
  /* this+0x1c */ int sizearray;
}

union Closure {
  /* this+0x0 */ struct CClosure c;
  /* this+0x0 */ struct LClosure l;
}

struct Proto {
  /* this+0x0 */ union GCObject * next;
  /* this+0x4 */ unsigned char tt;
  /* this+0x5 */ unsigned char marked;
  /* this+0x8 */ struct lua_TObject * k;
  /* this+0xc */ unsigned long * code;
  /* this+0x10 */ struct Proto * * p;
  /* this+0x14 */ int * lineinfo;
  /* this+0x18 */ struct LocVar * locvars;
  /* this+0x1c */ union TString * * upvalues;
  /* this+0x20 */ union TString * source;
  /* this+0x24 */ int sizeupvalues;
  /* this+0x28 */ int sizek;
  /* this+0x2c */ int sizecode;
  /* this+0x30 */ int sizelineinfo;
  /* this+0x34 */ int sizep;
  /* this+0x38 */ int sizelocvars;
  /* this+0x3c */ int lineDefined;
  /* this+0x40 */ union GCObject * gclist;
  /* this+0x44 */ unsigned char nups;
  /* this+0x45 */ unsigned char numparams;
  /* this+0x46 */ unsigned char is_vararg;
  /* this+0x47 */ unsigned char maxstacksize;
}

struct LoadState {
  /* this+0x0 */ struct lua_State * L;
  /* this+0x4 */ struct Zio * Z;
  /* this+0x8 */ struct Mbuffer * b;
  /* this+0xc */ int swap;
  /* this+0x10 */ const char * name;
}

union TString {
  /* this+0x0 */ union L_Umaxalign dummy;
  /* this+0x0 */ struct __unnamed tsv;
}

struct luaL_reg {
  /* this+0x0 */ const char * name;
  /* this+0x4 */ function  * func;
}

struct luaL_Buffer {
  /* this+0x0 */ char * p;
  /* this+0x4 */ int lvl;
  /* this+0x8 */ struct lua_State * L;
  /* this+0xc */ char[0x200] buffer;
}

struct Node {
  /* this+0x0 */ struct lua_TObject i_key;
  /* this+0x10 */ struct lua_TObject i_val;
  /* this+0x20 */ struct Node * next;
}

struct __unnamed {
  /* this+0x0 */ const char * init;
  /* this+0x4 */ long len;
}

struct MatchState {
  /* this+0x0 */ const char * src_init;
  /* this+0x4 */ const char * src_end;
  /* this+0x8 */ struct lua_State * L;
  /* this+0xc */ int level;
  /* this+0x10 */ struct __unnamed[0x20] capture;
}

struct stringtable {
  /* this+0x0 */ union GCObject * * hash;
  /* this+0x4 */ long nuse;
  /* this+0x8 */ int size;
}

union Udata {
  /* this+0x0 */ union L_Umaxalign dummy;
  /* this+0x0 */ struct __unnamed uv;
}

struct Token {
  /* this+0x0 */ int token;
  /* this+0x8 */ union SemInfo seminfo;
}

struct FuncState {
  /* this+0x0 */ struct Proto * f;
  /* this+0x4 */ struct Table * h;
  /* this+0x8 */ struct FuncState * prev;
  /* this+0xc */ struct LexState * ls;
  /* this+0x10 */ struct lua_State * L;
  /* this+0x14 */ struct BlockCnt * bl;
  /* this+0x18 */ int pc;
  /* this+0x1c */ int lasttarget;
  /* this+0x20 */ int jpc;
  /* this+0x24 */ int freereg;
  /* this+0x28 */ int nk;
  /* this+0x2c */ int np;
  /* this+0x30 */ int nlocvars;
  /* this+0x34 */ int nactvar;
  /* this+0x38 */ struct expdesc[0x20] upvalues;
  /* this+0x2b8 */ int[0xc8] actvar;
}

struct LexState {
  /* this+0x0 */ int current;
  /* this+0x4 */ int linenumber;
  /* this+0x8 */ int lastline;
  /* this+0x10 */ struct Token t;
  /* this+0x20 */ struct Token lookahead;
  /* this+0x30 */ struct FuncState * fs;
  /* this+0x34 */ struct lua_State * L;
  /* this+0x38 */ struct Zio * z;
  /* this+0x3c */ struct Mbuffer * buff;
  /* this+0x40 */ union TString * source;
  /* this+0x44 */ int nestlevel;
}

struct BlockCnt {
  /* this+0x0 */ struct BlockCnt * previous;
  /* this+0x4 */ int breaklist;
  /* this+0x8 */ int nactvar;
  /* this+0xc */ int upval;
  /* this+0x10 */ int isbreakable;
}

struct expdesc {
  /* this+0x0 */ int k;
  /* this+0x4 */ int info;
  /* this+0x8 */ int aux;
  /* this+0xc */ int t;
  /* this+0x10 */ int f;
}

struct ConsControl {
  /* this+0x0 */ struct expdesc v;
  /* this+0x14 */ struct expdesc * t;
  /* this+0x18 */ int nh;
  /* this+0x1c */ int na;
  /* this+0x20 */ int tostore;
}

struct LHS_assign {
  /* this+0x0 */ struct LHS_assign * prev;
  /* this+0x4 */ struct expdesc v;
}

union SemInfo {
  /* this+0x0 */ double r;
  /* this+0x0 */ union TString * ts;
}

struct _iobuf {
  /* this+0x0 */ char * _ptr;
  /* this+0x4 */ int _cnt;
  /* this+0x8 */ char * _base;
  /* this+0xc */ int _flag;
  /* this+0x10 */ int _file;
  /* this+0x14 */ int _charbuf;
  /* this+0x18 */ int _bufsiz;
  /* this+0x1c */ char * _tmpfname;
}

struct tm {
  /* this+0x0 */ int tm_sec;
  /* this+0x4 */ int tm_min;
  /* this+0x8 */ int tm_hour;
  /* this+0xc */ int tm_mday;
  /* this+0x10 */ int tm_mon;
  /* this+0x14 */ int tm_year;
  /* this+0x18 */ int tm_wday;
  /* this+0x1c */ int tm_yday;
  /* this+0x20 */ int tm_isdst;
}

union GCObject {
  /* this+0x0 */ struct GCheader gch;
  /* this+0x0 */ union TString ts;
  /* this+0x0 */ union Udata u;
  /* this+0x0 */ union Closure cl;
  /* this+0x0 */ struct Table h;
  /* this+0x0 */ struct Proto p;
  /* this+0x0 */ struct UpVal uv;
  /* this+0x0 */ struct lua_State th;
}

struct GCState {
  /* this+0x0 */ union GCObject * tmark;
  /* this+0x4 */ union GCObject * wk;
  /* this+0x8 */ union GCObject * wv;
  /* this+0xc */ union GCObject * wkv;
  /* this+0x10 */ struct global_State * g;
}

struct UpVal {
  /* this+0x0 */ union GCObject * next;
  /* this+0x4 */ unsigned char tt;
  /* this+0x5 */ unsigned char marked;
  /* this+0x8 */ struct lua_TObject * v;
  /* this+0x10 */ struct lua_TObject value;
}

struct DumpState {
  /* this+0x0 */ struct lua_State * L;
  /* this+0x4 */ function  * write;
  /* this+0x8 */ void * data;
}

struct lua_longjmp {
  /* this+0x0 */ struct lua_longjmp * previous;
  /* this+0x4 */ int[0x10] b;
  /* this+0x44 */ volatile int status;
}

struct lua_Debug {
  /* this+0x0 */ int event;
  /* this+0x4 */ const char * name;
  /* this+0x8 */ const char * namewhat;
  /* this+0xc */ const char * what;
  /* this+0x10 */ const char * source;
  /* this+0x14 */ int currentline;
  /* this+0x18 */ int nups;
  /* this+0x1c */ int linedefined;
  /* this+0x20 */ char[0x3c] short_src;
  /* this+0x5c */ int i_ci;
}

struct SParser {
  /* this+0x0 */ struct Zio * z;
  /* this+0x4 */ struct Mbuffer buff;
  /* this+0xc */ int bin;
}

struct LoadF {
  /* this+0x0 */ struct _iobuf * f;
  /* this+0x4 */ char[0x200] buff;
}

struct LoadS {
  /* this+0x0 */ const char * s;
  /* this+0x4 */ unsigned int size;
}

struct CallS {
  /* this+0x0 */ struct lua_TObject * func;
  /* this+0x4 */ int nresults;
}

struct CCallS {
  /* this+0x0 */ function  * func;
  /* this+0x4 */ void * ud;
}

struct mcg_key {
  /* this+0x0 */ unsigned short[0x60] val;
}

struct cast_key {
  /* this+0x0 */ unsigned long[0x20] xkey;
  /* this+0x80 */ int rounds;
}

struct TK {
  /* this+0x0 */ int n;
  /* this+0x4 */ int[0x4] rr;
  /* this+0x14 */ unsigned char[0x100][0x40] sbox;
}

struct HK {
  /* this+0x0 */ unsigned char r;
  /* this+0x1 */ unsigned char l;
  /* this+0x4 */ int table;
  /* this+0x8 */ unsigned char[0x100][0x4][0x2] sbox;
}

struct seal_ctx {
  /* this+0x0 */ unsigned long[0x208] t;
  /* this+0x820 */ unsigned long[0x109] s;
  /* this+0xc44 */ unsigned long[0x14] r;
  /* this+0xc94 */ unsigned long counter;
  /* this+0xc98 */ unsigned long[0x400] ks_buf;
  /* this+0x1c98 */ int ks_pos;
}

union f::__unnamed {
  /* this+0x0 */ unsigned long All;
  /* this+0x0 */ unsigned char[0x4] Byte;
}

union FK::__unnamed {
  /* this+0x0 */ unsigned long All;
  /* this+0x0 */ unsigned char[0x4] Byte;
}

union MakeH1::__unnamed {
  /* this+0x0 */ unsigned long All;
  /* this+0x0 */ unsigned char[0x4] Byte;
}

union feal8_SetKey::__unnamed {
  /* this+0x0 */ unsigned long All;
  /* this+0x0 */ unsigned char[0x4] Byte;
}

class std::fpos<int> {
    /* this+0x0 */ long _Off;
  /* this+0x8 */ __int64 _Fpos;
  /* this+0x10 */ int _State;
}

class std::locale::id {
  /* this+0x0 */ unsigned int _Id;
  }

class std::locale::facet {
  /* this+0x4 */ unsigned int _Refs;
}

class std::locale {
  /* this+0x0 */ class std::locale::_Locimp * _Ptr;
}

struct _FILETIME {
  /* this+0x0 */ unsigned long dwLowDateTime;
  /* this+0x4 */ unsigned long dwHighDateTime;
}

struct _WIN32_FIND_DATAA {
  /* this+0x0 */ unsigned long dwFileAttributes;
  /* this+0x4 */ struct _FILETIME ftCreationTime;
  /* this+0xc */ struct _FILETIME ftLastAccessTime;
  /* this+0x14 */ struct _FILETIME ftLastWriteTime;
  /* this+0x1c */ unsigned long nFileSizeHigh;
  /* this+0x20 */ unsigned long nFileSizeLow;
  /* this+0x24 */ unsigned long dwReserved0;
  /* this+0x28 */ unsigned long dwReserved1;
  /* this+0x2c */ char[0x104] cFileName;
  /* this+0x130 */ char[0xe] cAlternateFileName;
}

class CScheduler {
  /* this+0x4 */ class std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> > m_scheduleList;
}

class std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> > {
  /* this+0x0 */ class std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> > _Tr;
}

struct POINTER_FUNC {
  /* this+0x0 */ int excuteType;
  /* this+0x4 */ function  * pfunc;
  /* this+0x8 */ long startTime;
}

class std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> >::_Node * _Ptr;
}

class std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> >::iterator {
  /* this+0x0 */ struct std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> >::_Node * _Ptr;
}

struct std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> >::_Node {
  /* this+0x0 */ struct std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> >::_Node * _Right;
  /* this+0xc */ struct std::pair<long const ,POINTER_FUNC> _Value;
  /* this+0x1c */ enum std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> >::_Redbl _Color;
}

struct std::pair<long const ,POINTER_FUNC> {
  /* this+0x0 */ const long first;
  /* this+0x4 */ struct POINTER_FUNC second;
}

class std::ios_base {
  /* this+0x4 */ int _State;
  /* this+0x8 */ int _Except;
  /* this+0xc */ int _Fmtfl;
  /* this+0x10 */ int _Prec;
  /* this+0x14 */ int _Wide;
  /* this+0x18 */ struct std::ios_base::_Iosarray * _Arr;
  /* this+0x1c */ struct std::ios_base::_Fnarray * _Calls;
  /* this+0x20 */ class std::locale _Loc;
  /* this+0x24 */ unsigned int _Stdstr;
    }

class std::basic_istream<char,std::char_traits<char> > {
  /* this+0x4 */ int _Chcount;
}

class std::basic_streambuf<char,std::char_traits<char> > {
  /* this+0x4 */ char * _Gbeg;
  /* this+0x8 */ char * _Pbeg;
  /* this+0xc */ char * * _IGbeg;
  /* this+0x10 */ char * * _IPbeg;
  /* this+0x14 */ char * _Gnext;
  /* this+0x18 */ char * _Pnext;
  /* this+0x1c */ char * * _IGnext;
  /* this+0x20 */ char * * _IPnext;
  /* this+0x24 */ int _Gcnt;
  /* this+0x28 */ int _Pcnt;
  /* this+0x2c */ int * _IGcnt;
  /* this+0x30 */ int * _IPcnt;
  /* this+0x34 */ class std::locale _Loc;
}

class std::bad_cast {
  /* this+0x4 */ const char * _m_what;
  /* this+0x8 */ int _m_doFree;
}

class std::ctype<char> {
  /* this+0x4 */ unsigned int _Refs;
      /* this+0x8 */ struct _Ctypevec _Ctype;
  }

struct std::ctype_base {
  /* this+0x4 */ unsigned int _Refs;
}

class std::basic_ios<char,std::char_traits<char> > {
  /* this+0x4 */ int _State;
  /* this+0x8 */ int _Except;
  /* this+0xc */ int _Fmtfl;
  /* this+0x10 */ int _Prec;
  /* this+0x14 */ int _Wide;
  /* this+0x18 */ struct std::ios_base::_Iosarray * _Arr;
  /* this+0x1c */ struct std::ios_base::_Fnarray * _Calls;
  /* this+0x20 */ class std::locale _Loc;
  /* this+0x24 */ unsigned int _Stdstr;
      /* this+0x28 */ class std::basic_streambuf<char,std::char_traits<char> > * _Sb;
  /* this+0x2c */ class std::basic_ostream<char,std::char_traits<char> > * _Tiestr;
  /* this+0x30 */ char _Fillch;
}

class std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> > {
      /* this+0x0 */ class std::allocator<POINTER_FUNC> allocator;
  /* this+0x1 */ struct std::less<long> key_compare;
  /* this+0x4 */ struct std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

struct std::pair<std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

class std::_Tidyfac<std::ctype<char> > {
  }

class CRes {
  /* this+0x4 */ int m_lockCnt;
  /* this+0x8 */ unsigned long m_timeStamp;
  /* this+0xc */ int m_extIndex;
  /* this+0x10 */ class CHash m_fName;
}

class CResMgr {
  /* this+0x0 */ class std::map<char const *,int,CharPrtLess,std::allocator<int> > m_resExt;
  /* this+0x10 */ class std::vector<char const *,std::allocator<char const *> > m_typeDir;
  /* this+0x20 */ class std::vector<CRes *,std::allocator<CRes *> > m_objTypes;
  /* this+0x30 */ class std::vector<std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >,std::allocator<std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> > > > m_fileList;
  /* this+0x40 */ struct _RTL_CRITICAL_SECTION m_GetResSection;
  /* this+0x58 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std:83de5b43 m_realResName;
  /* this+0x68 */ unsigned long m_usedForSprTexture;
  /* this+0x6c */ unsigned long m_usedForModelTexture;
  /* this+0x70 */ unsigned long m_usedForGNDTexture;
  /* this+0x74 */ unsigned long m_usedForSprite;
  /* this+0x78 */ unsigned long m_usedForSprAction;
  /* this+0x7c */ unsigned long m_usedForGAT;
  /* this+0x80 */ unsigned long m_usedForGND;
  /* this+0x84 */ unsigned long m_usedForIMF;
  /* this+0x88 */ unsigned long m_usedForModel;
  /* this+0x8c */ unsigned long m_ResMemAmount;
  /* this+0x90 */ unsigned long m_ResSprAmount;
  /* this+0x94 */ unsigned long m_ResTexAmount;
  /* this+0x98 */ unsigned long m_ResGatAmount;
  /* this+0x9c */ unsigned long m_ResGndAmount;
  /* this+0xa0 */ unsigned long m_ResRswAmount;
  /* this+0xa4 */ unsigned long m_ResModAmount;
  /* this+0xa8 */ unsigned long m_ResWavAmount;
}

class std::map<char const *,int,CharPrtLess,std::allocator<int> > {
  /* this+0x0 */ class std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> > _Tr;
}

class std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> > {
  /* this+0x0 */ class std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> > _Tr;
}

class CHash {
  /* this+0x0 */ unsigned long m_HashCode;
  /* this+0x4 */ char[0xfc] m_String;
}

class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<s11db03a2 {
  /* this+0x0 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<s14b094fb * _Ptr;
}

struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<s14b094fb {
  /* this+0x0 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<s14b094fb * _Left;
  /* this+0x4 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<s14b094fb * _Parent;
  /* this+0x8 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<s14b094fb * _Right;
  /* this+0xc */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > _Value;
  /* this+0x2c */ enum std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<seb93ba53 _Color;
}

class std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> > {
      /* this+0x0 */ class std::allocator<CRes *> allocator;
  /* this+0x1 */ struct ResPtrLess key_compare;
  /* this+0x4 */ struct std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class std::vector<CRes *,std::allocator<CRes *> > {
  /* this+0x0 */ class std::allocator<CRes *> allocator;
  /* this+0x4 */ class CRes * * _First;
  /* this+0x8 */ class CRes * * _Last;
  /* this+0xc */ class CRes * * _End;
}

class std::vector<std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >,std::allocator<std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> > > > {
  /* this+0x0 */ class std::allocator<std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> > > allocator;
  /* this+0x4 */ class std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> > * _First;
  /* this+0x8 */ class std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> > * _Last;
  /* this+0xc */ class std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> > * _End;
}

class std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> >::iterator {
  /* this+0x0 */ struct std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> >::_Node * _Ptr;
}

class std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> > {
      /* this+0x0 */ class std::allocator<int> allocator;
  /* this+0x1 */ struct CharPrtLess key_compare;
  /* this+0x4 */ struct std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

struct std::pair<std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

struct std::pair<char const * const,int> {
  /* this+0x0 */ const char * const first;
  /* this+0x4 */ int second;
}

class std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> >::_Node * _Ptr;
}

struct std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> >::_Node {
  /* this+0x0 */ struct std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> >::_Node * _Right;
  /* this+0xc */ struct std::pair<char const * const,int> _Value;
  /* this+0x14 */ enum std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> >::_Redbl _Color;
}

class std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> >::iterator {
  /* this+0x0 */ struct std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> >::_Node * _Ptr;
}

struct std::pair<std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

struct std::pair<CHash * const,CRes *> {
  /* this+0x0 */ class CHash * const first;
  /* this+0x4 */ class CRes * second;
}

class std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> >::_Node * _Ptr;
}

struct std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> >::_Node {
  /* this+0x0 */ struct std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> >::_Node * _Right;
  /* this+0xc */ struct std::pair<CHash * const,CRes *> _Value;
  /* this+0x14 */ enum std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> >::_Redbl _Color;
}

class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<sdffb3b8a {
      /* this+0x0 */ class std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > allocator;
  /* this+0x1 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > key_compare;
  /* this+0x4 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<s14b094fb * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

struct std::pair<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,c08f33dc {
  /* this+0x0 */ class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<se6a3b1b6 first;
  /* this+0x4 */ unsigned char second;
}

class RegKey {
  /* this+0x0 */ struct HKEY__ * m_key;
}

class CMemMapFile {
  /* this+0x4 */ void * m_hFile;
  /* this+0x8 */ void * m_hFileMap;
  /* this+0xc */ unsigned long m_dwFileSize;
  /* this+0x10 */ unsigned long m_dwOpenOffset;
  /* this+0x14 */ unsigned long m_dwOpenSize;
  /* this+0x18 */ unsigned long m_dwFileMappingSize;
  /* this+0x1c */ unsigned long m_dwAllocationGranuarity;
  /* this+0x20 */ const unsigned char * m_pFile;
  /* this+0x24 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_pFileBuf;
}

struct _SYSTEM_INFO {
  /* this+0x0 */ unsigned long dwOemId;
  /* this+0x0 */ unsigned short wProcessorArchitecture;
  /* this+0x2 */ unsigned short wReserved;
  /* this+0x4 */ unsigned long dwPageSize;
  /* this+0x8 */ void * lpMinimumApplicationAddress;
  /* this+0xc */ void * lpMaximumApplicationAddress;
  /* this+0x10 */ unsigned long dwActiveProcessorMask;
  /* this+0x14 */ unsigned long dwNumberOfProcessors;
  /* this+0x18 */ unsigned long dwProcessorType;
  /* this+0x1c */ unsigned long dwAllocationGranularity;
  /* this+0x20 */ unsigned short wProcessorLevel;
  /* this+0x22 */ unsigned short wProcessorRevision;
}

class CGPak {
  /* this+0x4 */ unsigned long m_FileVer;
  /* this+0x8 */ unsigned long m_FileCount;
  /* this+0xc */ unsigned long m_PakInfoOffset;
  /* this+0x10 */ unsigned long m_PakInfoSize;
  /* this+0x14 */ class std::vector<PakPack,std::allocator<PakPack> > m_PakPack;
  /* this+0x24 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_pDecBuf;
  /* this+0x34 */ class CMemFile * m_memFile;
}

class CMemFile {
}

struct PakPack {
  /* this+0x0 */ unsigned long m_dataSize;
  /* this+0x4 */ unsigned long m_compressSize;
  /* this+0x8 */ unsigned long m_size;
  /* this+0xc */ unsigned long m_Offset;
  /* this+0x10 */ char m_type;
  /* this+0x14 */ class CHash m_fName;
}

class CDec {
  /* this+0x0 */ union BIT64[0x10] m_key;
}

union BIT64 {
  /* this+0x0 */ unsigned long[0x2] dw;
  /* this+0x0 */ unsigned short[0x4] w;
  /* this+0x0 */ unsigned char[0x8] b;
}

class std::vector<unsigned char,std::allocator<unsigned char> > {
  /* this+0x0 */ class std::allocator<unsigned char> allocator;
  /* this+0x4 */ unsigned char * _First;
  /* this+0x8 */ unsigned char * _Last;
  /* this+0xc */ unsigned char * _End;
}

class std::allocator<unsigned char> {
}

class std::reverse_iterator<unsigned char const *,unsigned char,unsigned char const &,unsigned char const *,int> {
}

class std::reverse_iterator<unsigned char *,unsigned char,unsigned char &,unsigned char *,int> {
}

class std::vector<PakPack,std::allocator<PakPack> > {
  /* this+0x0 */ class std::allocator<PakPack> allocator;
  /* this+0x4 */ struct PakPack * _First;
  /* this+0x8 */ struct PakPack * _Last;
  /* this+0xc */ struct PakPack * _End;
}

struct PakPrtLess {
}

struct std::binary_function<PakPack const &,PakPack const &,bool> {
}

class CNPGameLib {
}

struct tagNPKFuncTbl {
  /* this+0x0 */ function  * FNPKOpenDriver;
  /* this+0x4 */ function  * FNPKOpenDriverEx;
  /* this+0x8 */ function  * FNPKCloseDriver;
  /* this+0xc */ function  * FNPKRegCryptMsg;
  /* this+0x10 */ function  * FNPKRegCryptFunc;
  /* this+0x14 */ function  * FNPKUnregCrypt;
  /* this+0x18 */ function  * FNPKSetKeyMode;
  /* this+0x1c */ function  * FNPKSetKbdLock;
  /* this+0x20 */ function  * FNPKSetDrvPath;
  /* this+0x24 */ function  * FNPKGetAppCompatFlag;
  /* this+0x28 */ function  * FNPKSetAppCompatFlag;
}

struct PACKET_CZ_ACK_GAME_GUARD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long[0x4] AuthData;
}

class IProcess {
  /* this+0x0 */ function  * fnEnumProcessModules;
  /* this+0x4 */ function  * fnGetModuleFileNameEx;
  /* this+0x8 */ function  * fnCreateToolhelp32Snapshot;
  /* this+0xc */ function  * fnProcess32First;
  /* this+0x10 */ function  * fnProcess32Next;
  /* this+0x14 */ function  * fnModule32First;
  /* this+0x18 */ function  * fnModule32Next;
  /* this+0x1c */ struct HINSTANCE__ * m_hDll;
  /* this+0x20 */ int m_bErr;
  /* this+0x24 */ int m_bNT;
}

struct _LUID {
  /* this+0x0 */ unsigned long LowPart;
  /* this+0x4 */ long HighPart;
}

struct _TOKEN_PRIVILEGES {
  /* this+0x0 */ unsigned long PrivilegeCount;
  /* this+0x4 */ struct _LUID_AND_ATTRIBUTES[0x1] Privileges;
}

struct _LUID_AND_ATTRIBUTES {
  /* this+0x0 */ struct _LUID Luid;
  /* this+0x8 */ unsigned long Attributes;
}

struct tagMODULEENTRY32 {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long th32ModuleID;
  /* this+0x8 */ unsigned long th32ProcessID;
  /* this+0xc */ unsigned long GlblcntUsage;
  /* this+0x10 */ unsigned long ProccntUsage;
  /* this+0x14 */ unsigned char * modBaseAddr;
  /* this+0x18 */ unsigned long modBaseSize;
  /* this+0x1c */ struct HINSTANCE__ * hModule;
  /* this+0x20 */ char[0x100] szModule;
  /* this+0x120 */ char[0x104] szExePath;
}

struct std::list<std::pair<CMemFile *,CGPak *>,std::allocator<std::pair<CMemFile *,CGPak *> > >::_Node {
  /* this+0x0 */ struct std::list<std::pair<CMemFile *,CGPak *>,std::allocator<std::pair<CMemFile *,CGPak *> > >::_Node * _Next;
  /* this+0x4 */ struct std::list<std::pair<CMemFile *,CGPak *>,std::allocator<std::pair<CMemFile *,CGPak *> > >::_Node * _Prev;
  /* this+0x8 */ struct std::pair<CMemFile *,CGPak *> _Value;
}

struct std::pair<CMemFile *,CGPak *> {
  /* this+0x0 */ class CMemFile * first;
  /* this+0x4 */ class CGPak * second;
}

struct std::pair<int const ,SKILL_DESC> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ struct SKILL_DESC second;
}

struct std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn {
}

class std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::value_compare {
  /* this+0x0 */ struct std::less<int> comp;
}

struct SKILL_DESC {
  /* this+0x0 */ const char * skillIdName;
  /* this+0x4 */ const char * displayName;
  /* this+0x8 */ class std::vector<char const *,std::allocator<char const *> > descriptionName;
  /* this+0x18 */ class std::vector<int,std::allocator<int> > spUsage;
}

struct std::less<int> {
}

class std::allocator<SKILL_DESC> {
}

class std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> > {
      /* this+0x0 */ class std::allocator<SKILL_DESC> allocator;
  /* this+0x1 */ struct std::less<int> key_compare;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> >::iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> >::_Node * _Ptr;
}

class std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> >::_Node * _Ptr;
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> >::iterator,std::pair<int const ,SKILL_DESC>,stcfff46e3 {
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> >::const_iterator,std::pair<int const ,SKILL_DE1e874aa7 {
}

struct std::pair<std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

struct std::pair<std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> >::iterator,std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,b870223a {
}

struct std::pair<std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> >::const_iterator,std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::ma22f27028 {
}

struct std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> >::_Node {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,SKILL_DESC> _Value;
  /* this+0x38 */ enum std::_Tree<int,std::pair<int const ,SKILL_DESC>,std::map<int,SKILL_DESC,std::less<int>,std::allocator<SKILL_DESC> >::_Kfn,std::less<int>,std::allocator<SKILL_DESC> >::_Redbl _Color;
}

struct IdMsgString {
  /* this+0x0 */ enum MSGSTRINGID id;
  /* this+0x4 */ const char * msg;
}

struct std::pair<int const ,std::vector<char const *,std::allocator<char const *> > > {
  /* this+0x0 */ const int first;
  /* this+0x4 */ class std::vector<char const *,std::allocator<char const *> > second;
}

struct std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char const *> > > >::_Kfn {
}

class std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char const *> > > >::value_compare {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::allocator<std::vector<char const *,std::allocator<char const *> > > {
}

class std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char const *> c8ac75d7 {
      /* this+0x0 */ class std::allocator<std::vector<char const *,std::allocator<char const *> > > allocator;
  /* this+0x1 */ struct std::less<int> key_compare;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char const *> 241d0b6d * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char const *> 41833c44 {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char const *> 241d0b6d * _Ptr;
}

class std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char const *> 7cf22b48 {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char const *> 241d0b6d * _Ptr;
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char ca7e48218 {
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char c286fb31b {
}

struct std::pair<std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char0a08752f {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char const *> 41833c44 first;
  /* this+0x4 */ unsigned char second;
}

struct std::pair<std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char5e756216 {
}

struct std::pair<std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char6d25527c {
}

struct std::pair<int const ,ITEM_DESC> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ struct ITEM_DESC second;
}

struct std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn {
}

class std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::value_compare {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::allocator<ITEM_DESC> {
}

class std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> > {
      /* this+0x0 */ class std::allocator<ITEM_DESC> allocator;
  /* this+0x1 */ struct std::less<int> key_compare;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> >::iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> >::_Node * _Ptr;
}

class std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> >::_Node * _Ptr;
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> >::iterator,std::pair<int const ,ITEM_DESC>,std::pa8d3ab214 {
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> >::const_iterator,std::pair<int const ,ITEM_DESC>,sb7cbea14 {
}

struct std::pair<std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

struct std::pair<std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> >::iterator,std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_c8f67f54 {
}

struct std::pair<std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> >::const_iterator,std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<inte85eba6e {
}

struct std::pair<int const ,QUEST_DESC> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ struct QUEST_DESC second;
}

struct std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn {
}

class std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::value_compare {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::allocator<QUEST_DESC> {
}

class std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> > {
      /* this+0x0 */ class std::allocator<QUEST_DESC> allocator;
  /* this+0x1 */ struct std::less<int> key_compare;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> >::iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> >::_Node * _Ptr;
}

class std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> >::_Node * _Ptr;
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> >::iterator,std::pair<int const ,QUEST_DESC>,std3c563c0 {
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> >::const_iterator,std::pair<int const ,QUEST_DE12307414 {
}

struct std::pair<std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

struct std::pair<std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> >::iterator,std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,dab1e218 {
}

struct std::pair<std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> >::const_iterator,std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::ma1cda6fe1 {
}

struct std::pair<int const ,CARD_DESC> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ struct CARD_DESC second;
}

struct std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn {
}

class std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::value_compare {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::allocator<CARD_DESC> {
}

class std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> > {
      /* this+0x0 */ class std::allocator<CARD_DESC> allocator;
  /* this+0x1 */ struct std::less<int> key_compare;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> >::iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> >::_Node * _Ptr;
}

class std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> >::_Node * _Ptr;
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> >::iterator,std::pair<int const ,CARD_DESC>,std::pab1b84bd6 {
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> >::const_iterator,std::pair<int const ,CARD_DESC>,s42b2b084 {
}

struct std::pair<std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

struct std::pair<std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> >::iterator,std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_aa2b329b {
}

struct std::pair<std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> >::const_iterator,std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int0e38fbd9 {
}

struct std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> >::_Node {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,ITEM_DESC> _Value;
  /* this+0x58 */ enum std::_Tree<int,std::pair<int const ,ITEM_DESC>,std::map<int,ITEM_DESC,std::less<int>,std::allocator<ITEM_DESC> >::_Kfn,std::less<int>,std::allocator<ITEM_DESC> >::_Redbl _Color;
}

struct std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> >::_Node {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,CARD_DESC> _Value;
  /* this+0x1c */ enum std::_Tree<int,std::pair<int const ,CARD_DESC>,std::map<int,CARD_DESC,std::less<int>,std::allocator<CARD_DESC> >::_Kfn,std::less<int>,std::allocator<CARD_DESC> >::_Redbl _Color;
}

struct std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char const *> 241d0b6d {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char const *> 241d0b6d * _Left;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char const *> 241d0b6d * _Parent;
  /* this+0x8 */ struct std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char const *> 241d0b6d * _Right;
  /* this+0xc */ struct std::pair<int const ,std::vector<char const *,std::allocator<char const *> > > _Value;
  /* this+0x20 */ enum std::_Tree<int,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::map<int,std::vector<char const *,std::allocator<char const *> >,std::less<int>,std::allocator<std::vector<char const *,std::allocator<char const *> f2cf21bd _Color;
}

struct std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> >::_Node {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,QUEST_DESC> _Value;
  /* this+0x24 */ enum std::_Tree<int,std::pair<int const ,QUEST_DESC>,std::map<int,QUEST_DESC,std::less<int>,std::allocator<QUEST_DESC> >::_Kfn,std::less<int>,std::allocator<QUEST_DESC> >::_Redbl _Color;
}

struct Insult {
  /* this+0x0 */ const char * word;
}

class std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<char,std::21423d8b {
      /* this+0x0 */ class std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > allocator;
  /* this+0x1 */ struct std::less<int> key_compare;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<char,std::1ff077a3 * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> > {
      /* this+0x0 */ class std::allocator<MEMBER_POSITION_INFORMATION> allocator;
  /* this+0x1 */ struct std::less<int> key_compare;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> > {
      /* this+0x0 */ class std::allocator<GUILD_POSITION_INFORMATION> allocator;
  /* this+0x1 */ struct std::less<int> key_compare;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class std::list<SGUILD_INFO,std::allocator<SGUILD_INFO> >::iterator {
  /* this+0x0 */ struct std::list<SGUILD_INFO,std::allocator<SGUILD_INFO> >::_Node * _Ptr;
}

class std::list<SGUILD_INFO,std::allocator<SGUILD_INFO> >::const_iterator {
  /* this+0x0 */ struct std::list<SGUILD_INFO,std::allocator<SGUILD_INFO> >::_Node * _Ptr;
}

struct std::list<SGUILD_INFO,std::allocator<SGUILD_INFO> >::_Node {
  /* this+0x0 */ struct std::list<SGUILD_INFO,std::allocator<SGUILD_INFO> >::_Node * _Next;
  /* this+0x4 */ struct std::list<SGUILD_INFO,std::allocator<SGUILD_INFO> >::_Node * _Prev;
  /* this+0x8 */ struct SGUILD_INFO _Value;
}

struct SGUILD_INFO {
  /* this+0x0 */ int GDID;
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GuildName;
  /* this+0x14 */ int Level;
  /* this+0x18 */ int UserNum;
  /* this+0x1c */ int MaxUserNum;
  /* this+0x20 */ int Ranking;
}

class std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<char,std::87832f0a {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<char,std::1ff077a3 * _Ptr;
}

class std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<char,std::fbc247f4 {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<char,std::1ff077a3 * _Ptr;
}

struct std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<char,std::1ff077a3 {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<char,std::1ff077a3 * _Left;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<char,std::1ff077a3 * _Parent;
  /* this+0x8 */ struct std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<char,std::1ff077a3 * _Right;
  /* this+0xc */ struct std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > _Value;
  /* this+0x20 */ enum std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<char,std::8e282376 _Color;
}

struct std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
  /* this+0x0 */ const int first;
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > second;
}

class std::allocator<MEMBER_POSITION_INFORMATION> {
}

class std::allocator<GUILD_POSITION_INFORMATION> {
}

struct std::pair<std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<88f3ec45 {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<char,std::87832f0a first;
  /* this+0x4 */ unsigned char second;
}

class CViewFrustum {
  /* this+0x0 */ class std::list<SceneGraphNode *,std::allocator<SceneGraphNode *> > m_cubeletListTotal;
  /* this+0xc */ class std::list<SceneGraphNode *,std::allocator<SceneGraphNode *> > m_cubeletListPartial;
  /* this+0x18 */ struct plane3d[0x6] m_planes;
  /* this+0x78 */ struct vector3d[0x6] m_planeNormals;
}

struct plane3d {
  /* this+0x0 */ float x;
  /* this+0x4 */ float y;
  /* this+0x8 */ float z;
  /* this+0xc */ float w;
}

struct C3dOBB {
  /* this+0x0 */ struct vector3d halfSize;
  /* this+0xc */ struct vector3d center;
  /* this+0x18 */ struct vector3d u;
  /* this+0x24 */ struct vector3d v;
  /* this+0x30 */ struct vector3d w;
  /* this+0x3c */ struct vector3d[0x8] vertices;
}

class std::vector<PathNode *,std::allocator<PathNode *> > {
  /* this+0x0 */ class std::allocator<PathNode *> allocator;
  /* this+0x4 */ struct PathNode * * _First;
  /* this+0x8 */ struct PathNode * * _Last;
  /* this+0xc */ struct PathNode * * _End;
}

class std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> >::iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> >::_Node * _Ptr;
}

struct PathCell {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int dir;
  /* this+0xc */ unsigned long time;
}

class std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> > {
      /* this+0x0 */ class std::allocator<PathNode *> allocator;
  /* this+0x1 */ struct std::less<int> key_compare;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> >::_Node * _Ptr;
}

struct std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> >::_Node {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,PathNode *> _Value;
  /* this+0x14 */ enum std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> >::_Redbl _Color;
}

struct std::pair<int const ,PathNode *> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ struct PathNode * second;
}

struct std::pair<std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

class CPriorityQueue::NodeTotalGreater {
}

class std::vector<unsigned long,std::allocator<unsigned long> > {
  /* this+0x0 */ class std::allocator<unsigned long> allocator;
  /* this+0x4 */ unsigned long * _First;
  /* this+0x8 */ unsigned long * _Last;
  /* this+0xc */ unsigned long * _End;
}

class std::reverse_iterator<unsigned long const *,unsigned long,unsigned long const &,unsigned long const *,int> {
}

class std::reverse_iterator<unsigned long *,unsigned long,unsigned long &,unsigned long *,int> {
}

class ThaiBreakIterator {
  /* this+0x0 */ class ThaiLexicon * m_pLexicon;
  /* this+0x4 */ unsigned long[0x100] m_rgThaiCharTypeTable;
}

class ThaiLexicon {
  /* this+0x0 */ struct _TRIE * m_trie;
  /* this+0x4 */ unsigned int m_cWord;
  /* this+0x8 */ long m_cNode;
  /* this+0xc */ long m_nSize;
  /* this+0x10 */ unsigned char * m_MemDict;
  /* this+0x14 */ struct _DICTHEADER m_DictHeader;
}

class CLanguageTC {
  /* this+0x4 */ class std::deque<unsigned long,std::allocator<unsigned long> > m_fakeInput;
  /* this+0x34 */ struct tagCANDIDATELIST * m_candidateList;
  /* this+0x38 */ int m_candidateCount;
  /* this+0x3c */ int m_candidatePageSize;
  /* this+0x40 */ int m_candidateSelection;
  /* this+0x44 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_candidateBuffer;
  /* this+0x54 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_input;
  /* this+0x64 */ int m_inputCursor;
  /* this+0x68 */ int m_selectionCursor;
  /* this+0x6c */ int m_selectionOrigin;
  /* this+0x70 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_keyStroke;
  /* this+0x80 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_compStr;
  /* this+0x90 */ int m_compCursorPos;
  /* this+0x94 */ unsigned char m_bHideText;
  /* this+0x96 */ unsigned short m_langId;
  /* this+0x98 */ unsigned int m_codePage;
  /* this+0x9c */ int m_underLineStart;
  /* this+0xa0 */ int m_underLineEnd;
  /* this+0xa4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_languageFolder;
  /* this+0xb4 */ unsigned short m_scriptLangId;
  /* this+0xb8 */ class std::list<unsigned char,std::allocator<unsigned char> > m_tcKeyStrokeList;
  /* this+0xc4 */ struct TCINPUTKEY[0x100] m_tcKeyStrokeTable;
  /* this+0x4c4 */ unsigned char m_tcKeyStrokeEnabled;
  /* this+0x4c5 */ unsigned char m_tcKeyStroke;
}

class CLanguageTH {
  /* this+0x4 */ class std::deque<unsigned long,std::allocator<unsigned long> > m_fakeInput;
  /* this+0x34 */ struct tagCANDIDATELIST * m_candidateList;
  /* this+0x38 */ int m_candidateCount;
  /* this+0x3c */ int m_candidatePageSize;
  /* this+0x40 */ int m_candidateSelection;
  /* this+0x44 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_candidateBuffer;
  /* this+0x54 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_input;
  /* this+0x64 */ int m_inputCursor;
  /* this+0x68 */ int m_selectionCursor;
  /* this+0x6c */ int m_selectionOrigin;
  /* this+0x70 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_keyStroke;
  /* this+0x80 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_compStr;
  /* this+0x90 */ int m_compCursorPos;
  /* this+0x94 */ unsigned char m_bHideText;
  /* this+0x96 */ unsigned short m_langId;
  /* this+0x98 */ unsigned int m_codePage;
  /* this+0x9c */ int m_underLineStart;
  /* this+0xa0 */ int m_underLineEnd;
  /* this+0xa4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_languageFolder;
  /* this+0xb4 */ unsigned short m_scriptLangId;
  /* this+0xb8 */ unsigned char m_useTWordBreaker;
}

class std::deque<unsigned long,std::allocator<unsigned long> > {
  /* this+0x0 */ class std::allocator<unsigned long> allocator;
  /* this+0x4 */ class std::deque<unsigned long,std::allocator<unsigned long> >::iterator _First;
  /* this+0x14 */ class std::deque<unsigned long,std::allocator<unsigned long> >::iterator _Last;
  /* this+0x24 */ unsigned long * * _Map;
  /* this+0x28 */ unsigned int _Mapsize;
  /* this+0x2c */ unsigned int _Size;
}

class std::list<unsigned char,std::allocator<unsigned char> >::iterator {
  /* this+0x0 */ struct std::list<unsigned char,std::allocator<unsigned char> >::_Node * _Ptr;
}

class std::list<unsigned char,std::allocator<unsigned char> > {
  /* this+0x0 */ class std::allocator<unsigned char> allocator;
  /* this+0x4 */ struct std::list<unsigned char,std::allocator<unsigned char> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<unsigned char,std::allocator<unsigned char> >::const_iterator {
  /* this+0x0 */ struct std::list<unsigned char,std::allocator<unsigned char> >::_Node * _Ptr;
}

struct std::list<unsigned char,std::allocator<unsigned char> >::_Node {
  /* this+0x0 */ struct std::list<unsigned char,std::allocator<unsigned char> >::_Node * _Next;
  /* this+0x4 */ struct std::list<unsigned char,std::allocator<unsigned char> >::_Node * _Prev;
  /* this+0x8 */ unsigned char _Value;
}

class std::deque<unsigned long,std::allocator<unsigned long> >::const_iterator {
  /* this+0x0 */ unsigned long * _First;
  /* this+0x4 */ unsigned long * _Last;
  /* this+0x8 */ unsigned long * _Next;
  /* this+0xc */ unsigned long * * _Map;
}

class std::vector<std::pair<float,C3dWorldRes::actorInfo *>,std::allocator<std::pair<float,C3dWorldRes::actorInfo *> > > {
  /* this+0x0 */ class std::allocator<std::pair<float,C3dWorldRes::actorInfo *> > allocator;
  /* this+0x4 */ struct std::pair<float,C3dWorldRes::actorInfo *> * _First;
  /* this+0x8 */ struct std::pair<float,C3dWorldRes::actorInfo *> * _Last;
  /* this+0xc */ struct std::pair<float,C3dWorldRes::actorInfo *> * _End;
}

class std::allocator<std::pair<float,C3dWorldRes::actorInfo *> > {
}

struct std::pair<float,C3dWorldRes::actorInfo *> {
  /* this+0x0 */ float first;
  /* this+0x4 */ struct C3dWorldRes::actorInfo * second;
}

class std::reverse_iterator<std::pair<float,C3dWorldRes::actorInfo *> const *,std::pair<float,C3dWorldRes::actorInfo *>,std::pair<float,C3dWorldRes::actorInfo *> const &,std::pair<float,C3dWorldRes::actorInfo *> const *,int> {
}

class std::reverse_iterator<std::pair<float,C3dWorldRes::actorInfo *> *,std::pair<float,C3dWorldRes::actorInfo *>,std::pair<float,C3dWorldRes::actorInfo *> &,std::pair<float,C3dWorldRes::actorInfo *> *,int> {
}

class C3dActor {
  /* this+0x0 */ class C3dNode * m_node;
  /* this+0x4 */ char[0x80] m_name;
  /* this+0x84 */ struct vector3d m_pos;
  /* this+0x90 */ struct vector3d m_rot;
  /* this+0x9c */ struct vector3d m_scale;
  /* this+0xa8 */ int m_shadeType;
  /* this+0xac */ int m_curMotion;
  /* this+0xb0 */ int m_animType;
  /* this+0xb4 */ int m_animLen;
  /* this+0xb8 */ float m_animSpeed;
  /* this+0xbc */ struct matrix m_wtm;
  /* this+0xec */ struct matrix m_iwtm;
  /* this+0x11c */ struct vector3d m_posOffset;
  /* this+0x128 */ int m_isMatrixNeedUpdate;
  /* this+0x12c */ int m_isBbNeedUpdate;
  /* this+0x130 */ struct C3dOBB m_oBoundingBox;
  /* this+0x1cc */ struct C3dAABB m_aaBoundingBox;
  /* this+0x1e4 */ int m_renderSignature;
  /* this+0x1e8 */ int m_isHideCheck;
  /* this+0x1ec */ unsigned char m_isHalfAlpha;
  /* this+0x1ed */ unsigned char m_fadeAlphaCnt;
  /* this+0x1f0 */ class std::list<CVolumeBox *,std::allocator<CVolumeBox *> > m_volumeBoxList;
  /* this+0x1fc */ int m_blockType;
}

class std::vector<C3dActor *,std::allocator<C3dActor *> > {
  /* this+0x0 */ class std::allocator<C3dActor *> allocator;
  /* this+0x4 */ class C3dActor * * _First;
  /* this+0x8 */ class C3dActor * * _Last;
  /* this+0xc */ class C3dActor * * _End;
}

class CGndRes {
  /* this+0x4 */ int m_lockCnt;
  /* this+0x8 */ unsigned long m_timeStamp;
  /* this+0xc */ int m_extIndex;
  /* this+0x10 */ class CHash m_fName;
  /* this+0x110 */ int m_newVer;
  /* this+0x114 */ unsigned char m_verMajor;
  /* this+0x115 */ unsigned char m_verMinor;
  /* this+0x118 */ int m_width;
  /* this+0x11c */ int m_height;
  /* this+0x120 */ float m_zoom;
  /* this+0x124 */ int m_numTexture;
  /* this+0x128 */ int m_numSurface;
  /* this+0x12c */ int m_numLightmap;
  /* this+0x130 */ class std::vector<char const *,std::allocator<char const *> > m_texNameTable;
  /* this+0x140 */ struct CLMInfo * m_lminfo;
  /* this+0x144 */ struct LMIndex * m_lmindex;
  /* this+0x148 */ struct ColorChannel * m_colorchannel;
  /* this+0x14c */ struct GndSurfaceFmt * m_surface;
  /* this+0x150 */ struct GndCellFmt17 * m_V17cells;
  /* this+0x154 */ class CFile m_fp;
}

class std::list<C3dWorldRes::actorInfo *,std::allocator<C3dWorldRes::actorInfo *> >::const_iterator {
  /* this+0x0 */ struct std::list<C3dWorldRes::actorInfo *,std::allocator<C3dWorldRes::actorInfo *> >::_Node * _Ptr;
}

class std::list<C3dWorldRes::actorInfo *,std::allocator<C3dWorldRes::actorInfo *> >::iterator {
  /* this+0x0 */ struct std::list<C3dWorldRes::actorInfo *,std::allocator<C3dWorldRes::actorInfo *> >::_Node * _Ptr;
}

struct std::list<C3dWorldRes::actorInfo *,std::allocator<C3dWorldRes::actorInfo *> >::_Node {
  /* this+0x0 */ struct std::list<C3dWorldRes::actorInfo *,std::allocator<C3dWorldRes::actorInfo *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<C3dWorldRes::actorInfo *,std::allocator<C3dWorldRes::actorInfo *> >::_Node * _Prev;
  /* this+0x8 */ struct C3dWorldRes::actorInfo * _Value;
}

struct C3dWorldRes::actorInfo {
  /* this+0x0 */ char[0x28] name;
  /* this+0x28 */ char[0x50] modelName;
  /* this+0x78 */ char[0x50] nodeName;
  /* this+0xc8 */ struct vector3d pos;
  /* this+0xd4 */ struct vector3d rot;
  /* this+0xe0 */ struct vector3d scale;
  /* this+0xec */ int animType;
  /* this+0xf0 */ int blockType;
  /* this+0xf4 */ float animSpeed;
  /* this+0xf8 */ float posx;
  /* this+0xfc */ float posy;
  /* this+0x100 */ float posz;
}

class C3dWorldRes {
  /* this+0x4 */ int m_lockCnt;
  /* this+0x8 */ unsigned long m_timeStamp;
  /* this+0xc */ int m_extIndex;
  /* this+0x10 */ class CHash m_fName;
  /* this+0x110 */ class std::list<C3dWorldRes::actorInfo *,std::allocator<C3dWorldRes::actorInfo *> > m_3dActors;
  /* this+0x11c */ class std::list<C3dWorldRes::effectSrcInfo *,std::allocator<C3dWorldRes::effectSrcInfo *> > m_particles;
  /* this+0x128 */ class std::list<C3dWorldRes::soundSrcInfo *,std::allocator<C3dWorldRes::soundSrcInfo *> > m_sounds;
  /* this+0x134 */ struct SceneGraphNode * m_CalculatedNode;
  /* this+0x138 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_gndFile;
  /* this+0x148 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_attrFile;
  /* this+0x158 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_scrFile;
  /* this+0x168 */ float m_waterLevel;
  /* this+0x16c */ int m_waterType;
  /* this+0x170 */ float m_waveHeight;
  /* this+0x174 */ float m_waveSpeed;
  /* this+0x178 */ float m_wavePitch;
  /* this+0x17c */ int m_waterAnimSpeed;
  /* this+0x180 */ int m_lightLongitude;
  /* this+0x184 */ int m_lightLatitude;
  /* this+0x188 */ struct vector3d m_lightDir;
  /* this+0x194 */ struct vector3d m_diffuseCol;
  /* this+0x1a0 */ struct vector3d m_ambientCol;
  /* this+0x1ac */ unsigned char m_verMajor;
  /* this+0x1ad */ unsigned char m_verMinor;
  /* this+0x1b0 */ int m_groundTop;
  /* this+0x1b4 */ int m_groundBottom;
  /* this+0x1b8 */ int m_groundLeft;
  /* this+0x1bc */ int m_groundRight;
}

class C3dModelRes {
  /* this+0x4 */ int m_lockCnt;
  /* this+0x8 */ unsigned long m_timeStamp;
  /* this+0xc */ int m_extIndex;
  /* this+0x10 */ class CHash m_fName;
  /* this+0x110 */ int m_numMaterials;
  /* this+0x114 */ struct MaterialInfo * m_material;
  /* this+0x118 */ class std::list<C3dNodeRes *,std::allocator<C3dNodeRes *> > m_objectList;
  /* this+0x124 */ class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_rootObjList;
  /* this+0x130 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,C3dMesh *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<C3dMesh *> > m_meshList;
  /* this+0x140 */ char[0x50] name;
  /* this+0x190 */ int m_shadeType;
  /* this+0x194 */ int m_animLen;
  /* this+0x198 */ class std::list<CVolumeBox *,std::allocator<CVolumeBox *> > m_volumeBoxList;
  /* this+0x1a4 */ unsigned char m_alpha;
}

class C3dGround15 {
  /* this+0x4 */ class C3dAttr * m_attr;
  /* this+0x8 */ int m_width;
  /* this+0xc */ int m_height;
  /* this+0x10 */ float m_zoom;
  /* this+0x14 */ class CLightmapMgr m_lightmapMgr;
  /* this+0x3c */ int m_numSurfaces;
  /* this+0x40 */ float m_waterLevel;
  /* this+0x44 */ int m_texAnimCycle;
  /* this+0x48 */ int m_wavePitch;
  /* this+0x4c */ int m_waveSpeed;
  /* this+0x50 */ int m_waterSet;
  /* this+0x54 */ float m_waveHeight;
  /* this+0x58 */ class CTexture * m_waterTex;
  /* this+0x5c */ class CTexture * m_pBumpMap;
  /* this+0x60 */ int m_waterCnt;
  /* this+0x64 */ int m_waterOffset;
  /* this+0x68 */ int m_isNewVer;
  /* this+0x6c */ class std::vector<CGndSurface,std::allocator<CGndSurface> > m_V15surfaces;
  /* this+0x7c */ class std::vector<LightmapRGBIntensity,std::allocator<LightmapRGBIntensity> > m_lmRGBIntensities;
  /* this+0x8c */ class std::vector<CGndCell,std::allocator<CGndCell> > m_V15Cells;
}

struct C3dWorldRes::effectSrcInfo {
  /* this+0x0 */ char[0x50] name;
  /* this+0x50 */ struct vector3d pos;
  /* this+0x5c */ int type;
  /* this+0x60 */ float emitSpeed;
  /* this+0x64 */ float[0x4] param;
}

class std::vector<CGndSurface,std::allocator<CGndSurface> > {
  /* this+0x0 */ class std::allocator<CGndSurface> allocator;
  /* this+0x4 */ struct CGndSurface * _First;
  /* this+0x8 */ struct CGndSurface * _Last;
  /* this+0xc */ struct CGndSurface * _End;
}

class std::vector<LightmapRGBIntensity,std::allocator<LightmapRGBIntensity> > {
  /* this+0x0 */ class std::allocator<LightmapRGBIntensity> allocator;
  /* this+0x4 */ struct LightmapRGBIntensity * _First;
  /* this+0x8 */ struct LightmapRGBIntensity * _Last;
  /* this+0xc */ struct LightmapRGBIntensity * _End;
}

class std::allocator<LightmapRGBIntensity> {
}

class std::vector<CGndCell,std::allocator<CGndCell> > {
  /* this+0x0 */ class std::allocator<CGndCell> allocator;
  /* this+0x4 */ struct CGndCell * _First;
  /* this+0x8 */ struct CGndCell * _Last;
  /* this+0xc */ struct CGndCell * _End;
}

class std::allocator<CGndCell> {
}

class std::list<CGameObject *,std::allocator<CGameObject *> >::iterator {
  /* this+0x0 */ struct std::list<CGameObject *,std::allocator<CGameObject *> >::_Node * _Ptr;
}

class std::list<CGameObject *,std::allocator<CGameObject *> >::const_iterator {
  /* this+0x0 */ struct std::list<CGameObject *,std::allocator<CGameObject *> >::_Node * _Ptr;
}

class std::list<CGameActor *,std::allocator<CGameActor *> > {
  /* this+0x0 */ class std::allocator<CGameActor *> allocator;
  /* this+0x4 */ struct std::list<CGameActor *,std::allocator<CGameActor *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<CGameActor *,std::allocator<CGameActor *> >::iterator {
  /* this+0x0 */ struct std::list<CGameActor *,std::allocator<CGameActor *> >::_Node * _Ptr;
}

class std::list<CGameActor *,std::allocator<CGameActor *> >::const_iterator {
  /* this+0x0 */ struct std::list<CGameActor *,std::allocator<CGameActor *> >::_Node * _Ptr;
}

struct std::list<CGameActor *,std::allocator<CGameActor *> >::_Node {
  /* this+0x0 */ struct std::list<CGameActor *,std::allocator<CGameActor *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<CGameActor *,std::allocator<CGameActor *> >::_Node * _Prev;
  /* this+0x8 */ class CGameActor * _Value;
}

class std::list<CItem *,std::allocator<CItem *> > {
  /* this+0x0 */ class std::allocator<CItem *> allocator;
  /* this+0x4 */ struct std::list<CItem *,std::allocator<CItem *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<CItem *,std::allocator<CItem *> >::iterator {
  /* this+0x0 */ struct std::list<CItem *,std::allocator<CItem *> >::_Node * _Ptr;
}

class std::list<CItem *,std::allocator<CItem *> >::const_iterator {
  /* this+0x0 */ struct std::list<CItem *,std::allocator<CItem *> >::_Node * _Ptr;
}

struct std::list<CItem *,std::allocator<CItem *> >::_Node {
  /* this+0x0 */ struct std::list<CItem *,std::allocator<CItem *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<CItem *,std::allocator<CItem *> >::_Node * _Prev;
  /* this+0x8 */ class CItem * _Value;
}

class ThaiFunc {
  /* this+0x0 */ unsigned int[0x60] tblCharType;
}

struct _TRIE {
  /* this+0x0 */ unsigned char ch;
  /* this+0x1 */ unsigned char wrap;
  /* this+0x4 */ void * next;
  /* this+0x8 */ void * child;
}

struct _DIFFBYTE {
  /* this+0x0 */ unsigned char b0;
  /* this+0x1 */ unsigned char b1;
  /* this+0x2 */ unsigned char b2;
  /* this+0x3 */ unsigned char b3;
}

union _DIFFINDEX {
  /* this+0x0 */ long l;
  /* this+0x0 */ struct _DIFFBYTE b;
}

struct _EXCEPTION_POINTERS {
  /* this+0x0 */ struct _EXCEPTION_RECORD * ExceptionRecord;
  /* this+0x4 */ struct _CONTEXT * ContextRecord;
}

struct _tagSTACKFRAME {
  /* this+0x0 */ struct _tagADDRESS AddrPC;
  /* this+0xc */ struct _tagADDRESS AddrReturn;
  /* this+0x18 */ struct _tagADDRESS AddrFrame;
  /* this+0x24 */ struct _tagADDRESS AddrStack;
  /* this+0x30 */ void * FuncTableEntry;
  /* this+0x34 */ unsigned long[0x4] Params;
  /* this+0x44 */ int Far;
  /* this+0x48 */ int Virtual;
  /* this+0x4c */ unsigned long[0x3] Reserved;
  /* this+0x58 */ struct _KDHELP KdHelp;
  /* this+0x98 */ struct _tagADDRESS AddrBStore;
}

struct _tagADDRESS {
  /* this+0x0 */ unsigned long Offset;
  /* this+0x4 */ unsigned short Segment;
  /* this+0x8 */ enum ADDRESS_MODE Mode;
}

struct _KDHELP {
  /* this+0x0 */ unsigned long Thread;
  /* this+0x4 */ unsigned long ThCallbackStack;
  /* this+0x8 */ unsigned long NextCallback;
  /* this+0xc */ unsigned long FramePointer;
  /* this+0x10 */ unsigned long KiCallUserMode;
  /* this+0x14 */ unsigned long KeUserCallbackDispatcher;
  /* this+0x18 */ unsigned long SystemRangeStart;
  /* this+0x1c */ unsigned long ThCallbackBStore;
  /* this+0x20 */ unsigned long[0x8] Reserved;
}

class std::numpunct<char> {
}

class std::basic_stringbuf<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > {
}

class std::basic_ifstream<unsigned short,std::char_traits<unsigned short> > {
}

class std::basic_fstream<unsigned short,std::char_traits<unsigned short> > {
}

class std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > {
}

class std::basic_istringstream<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > {
}

class std::numpunct<unsigned short> {
}

class std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > {
}

class std::basic_filebuf<unsigned short,std::char_traits<unsigned short> > {
}

class std::basic_iostream<unsigned short,std::char_traits<unsigned short> > {
}

class std::basic_filebuf<char,std::char_traits<char> > {
}

class std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> > {
}

class std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > {
}

class std::basic_ofstream<unsigned short,std::char_traits<unsigned short> > {
}

class std::basic_ifstream<char,std::char_traits<char> > {
}

class std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > {
}

class std::basic_stringstream<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > {
}

class std::basic_fstream<char,std::char_traits<char> > {
}

class std::basic_ostringstream<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > {
}

class std::basic_ofstream<char,std::char_traits<char> > {
}

class CLightmapMgr {
  /* this+0x0 */ class std::vector<CLightmap,std::allocator<CLightmap> > m_lightmaps;
  /* this+0x10 */ class std::vector<CTexture *,std::allocator<CTexture *> > m_lmSurfaces;
  /* this+0x20 */ int m_numLightmaps;
  /* this+0x24 */ int m_numLmSurfaces;
}

struct CLMInfo {
  /* this+0x0 */ unsigned char[0x8][0x8] idata;
  /* this+0x40 */ unsigned char[0x3][0x8][0x8] sdata;
}

struct LightmapRGBIntensity {
  /* this+0x0 */ float rIntensity;
  /* this+0x4 */ float gIntensity;
  /* this+0x8 */ float bIntensity;
}

struct CellNormal {
  /* this+0x0 */ struct vector3d[0x2] top;
  /* this+0x18 */ struct vector3d front;
  /* this+0x24 */ struct vector3d right;
}

struct GndCellFmt17 {
  /* this+0x0 */ float[0x4] height;
  /* this+0x10 */ int topSurfaceId;
  /* this+0x14 */ int frontSurfaceId;
  /* this+0x18 */ int rightSurfaceId;
}

struct GndSurfaceFmt {
  /* this+0x0 */ float[0x4] u;
  /* this+0x10 */ float[0x4] v;
  /* this+0x20 */ short textureId;
  /* this+0x22 */ unsigned short lightmapId;
  /* this+0x24 */ struct COLOR argb;
}

struct CGndCell {
  /* this+0x0 */ float[0x4] h;
  /* this+0x10 */ struct vector3d[0x4] watervert;
  /* this+0x40 */ struct CGndSurface * top;
  /* this+0x44 */ struct CGndSurface * right;
  /* this+0x48 */ struct CGndSurface * front;
  /* this+0x4c */ int renderSignature;
  /* this+0x50 */ unsigned char[0x3] cellColor;
}

struct lmvertex3d {
  /* this+0x0 */ struct vector3d wvert;
  /* this+0xc */ struct COLOR argbs;
  /* this+0x10 */ struct vector2d uv;
  /* this+0x18 */ struct vector2d uv2;
}

struct tlvertex3d {
  /* this+0x0 */ float x;
  /* this+0x4 */ float y;
  /* this+0x8 */ float z;
  /* this+0xc */ float oow;
  /* this+0x10 */ unsigned long color;
  /* this+0x10 */ struct COLOR argb;
  /* this+0x14 */ unsigned long specular;
  /* this+0x18 */ float tu;
  /* this+0x1c */ float tv;
  /* this+0x18 */ struct texCoor coord;
}

struct CGndSurface {
  /* this+0x0 */ struct lmvertex3d[0x4] vertex;
  /* this+0x80 */ int offset;
  /* this+0x84 */ class CTexture * tex;
  /* this+0x88 */ class CTexture * lmtex;
  /* this+0x8c */ struct CLightmap * lmap;
  /* this+0x90 */ struct COLOR argb;
  /* this+0x94 */ unsigned long alpha;
  /* this+0x98 */ int MtlId;
}

struct texCoor {
  /* this+0x0 */ float u;
  /* this+0x4 */ float v;
}

class std::vector<CLightmap,std::allocator<CLightmap> > {
  /* this+0x0 */ class std::allocator<CLightmap> allocator;
  /* this+0x4 */ struct CLightmap * _First;
  /* this+0x8 */ struct CLightmap * _Last;
  /* this+0xc */ struct CLightmap * _End;
}

struct CLightmap {
  /* this+0x0 */ unsigned char[0x3] brightObj;
  /* this+0x4 */ class CTexture * surface;
  /* this+0x8 */ struct texCoor[0x4] coor;
  /* this+0x28 */ struct COLOR[0x4] intensity;
}

class std::vector<CTexture *,std::allocator<CTexture *> > {
  /* this+0x0 */ class std::allocator<CTexture *> allocator;
  /* this+0x4 */ class CTexture * * _First;
  /* this+0x8 */ class CTexture * * _Last;
  /* this+0xc */ class CTexture * * _End;
}

class C3dNode {
  /* this+0x4 */ class C3dActor * m_master;
  /* this+0x8 */ class C3dMesh * m_mesh;
  /* this+0xc */ char[0x80] m_name;
  /* this+0x8c */ int m_numTexture;
  /* this+0x90 */ class std::vector<CTexture *,std::allocator<CTexture *> > m_texture;
  /* this+0xa0 */ float m_opacity;
  /* this+0xa4 */ class C3dNode * m_parent;
  /* this+0xa8 */ class std::list<C3dNode *,std::allocator<C3dNode *> > m_child;
  /* this+0xb4 */ struct matrix m_ltm;
  /* this+0xe4 */ class C3dPosAnim m_posAnim;
  /* this+0xf4 */ class C3dRotAnim m_rotAnim;
  /* this+0x104 */ class C3dScaleAnim m_scaleAnim;
  /* this+0x114 */ class std::vector<C3dNode::ColorInfo,std::allocator<C3dNode::ColorInfo> > m_colorInfo;
  /* this+0x124 */ class std::vector<int,std::allocator<int> > m_destVertCol;
  /* this+0x134 */ int m_isAlphaForPlayer;
  /* this+0x138 */ struct C3dAABB m_aabb;
}

class C3dScaleAnim {
  /* this+0x0 */ class std::vector<scaleKeyframe,std::allocator<scaleKeyframe> > m_animdata;
}

struct face3d {
  /* this+0x0 */ unsigned short[0x3] vertindex;
  /* this+0x6 */ unsigned short[0x3] tvertindex;
  /* this+0xc */ unsigned short meshMtlId;
  /* this+0x10 */ int twoSide;
  /* this+0x14 */ int smoothGroup;
}

struct C3dNode::ColorInfo {
  /* this+0x0 */ unsigned long[0x3] color;
  /* this+0x0 */ struct COLOR[0x3] argb;
  /* this+0xc */ struct vector2d[0x3] uv;
}

struct C3dNodeRes {
  /* this+0x0 */ char[0x80] name;
  /* this+0x80 */ char[0x80] parentname;
  /* this+0x100 */ class C3dModelRes * scene;
  /* this+0x104 */ struct C3dNodeRes * parent;
  /* this+0x108 */ class std::list<C3dNodeRes *,std::allocator<C3dNodeRes *> > child;
  /* this+0x114 */ class C3dMesh * mesh;
  /* this+0x118 */ int numTexture;
  /* this+0x11c */ class CTexture * * texture;
  /* this+0x120 */ float[0x3] pos;
  /* this+0x12c */ float[0x3] rotaxis;
  /* this+0x138 */ float rotangle;
  /* this+0x13c */ float[0x3] scale;
  /* this+0x148 */ unsigned char alpha;
  /* this+0x14c */ class C3dPosAnim posanim;
  /* this+0x15c */ class C3dRotAnim rotanim;
}

class std::list<CVolumeBox *,std::allocator<CVolumeBox *> > {
  /* this+0x0 */ class std::allocator<CVolumeBox *> allocator;
  /* this+0x4 */ struct std::list<CVolumeBox *,std::allocator<CVolumeBox *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<CVolumeBox *,std::allocator<CVolumeBox *> >::const_iterator {
  /* this+0x0 */ struct std::list<CVolumeBox *,std::allocator<CVolumeBox *> >::_Node * _Ptr;
}

class std::list<CVolumeBox *,std::allocator<CVolumeBox *> >::iterator {
  /* this+0x0 */ struct std::list<CVolumeBox *,std::allocator<CVolumeBox *> >::_Node * _Ptr;
}

struct std::list<CVolumeBox *,std::allocator<CVolumeBox *> >::_Node {
  /* this+0x0 */ struct std::list<CVolumeBox *,std::allocator<CVolumeBox *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<CVolumeBox *,std::allocator<CVolumeBox *> >::_Node * _Prev;
  /* this+0x8 */ struct CVolumeBox * _Value;
}

struct CVolumeBox {
  /* this+0x0 */ struct vector3d m_size;
  /* this+0xc */ struct vector3d m_pos;
  /* this+0x18 */ struct vector3d m_rot;
  /* this+0x24 */ struct vector3d[0x8] m_worldVert;
  /* this+0x84 */ struct matrix m_vtm;
  /* this+0xb4 */ struct matrix m_ivtm;
  /* this+0xe4 */ int flag;
}

class std::vector<posKeyframe,std::allocator<posKeyframe> > {
  /* this+0x0 */ class std::allocator<posKeyframe> allocator;
  /* this+0x4 */ struct posKeyframe * _First;
  /* this+0x8 */ struct posKeyframe * _Last;
  /* this+0xc */ struct posKeyframe * _End;
}

class std::vector<rotKeyframe,std::allocator<rotKeyframe> > {
  /* this+0x0 */ class std::allocator<rotKeyframe> allocator;
  /* this+0x4 */ struct rotKeyframe * _First;
  /* this+0x8 */ struct rotKeyframe * _Last;
  /* this+0xc */ struct rotKeyframe * _End;
}

class std::vector<scaleKeyframe,std::allocator<scaleKeyframe> > {
  /* this+0x0 */ class std::allocator<scaleKeyframe> allocator;
  /* this+0x4 */ struct scaleKeyframe * _First;
  /* this+0x8 */ struct scaleKeyframe * _Last;
  /* this+0xc */ struct scaleKeyframe * _End;
}

class std::list<C3dNode *,std::allocator<C3dNode *> > {
  /* this+0x0 */ class std::allocator<C3dNode *> allocator;
  /* this+0x4 */ struct std::list<C3dNode *,std::allocator<C3dNode *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<C3dNode *,std::allocator<C3dNode *> >::iterator {
  /* this+0x0 */ struct std::list<C3dNode *,std::allocator<C3dNode *> >::_Node * _Ptr;
}

class std::list<C3dNode *,std::allocator<C3dNode *> >::const_iterator {
  /* this+0x0 */ struct std::list<C3dNode *,std::allocator<C3dNode *> >::_Node * _Ptr;
}

struct std::list<C3dNode *,std::allocator<C3dNode *> >::_Node {
  /* this+0x0 */ struct std::list<C3dNode *,std::allocator<C3dNode *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<C3dNode *,std::allocator<C3dNode *> >::_Node * _Prev;
  /* this+0x8 */ class C3dNode * _Value;
}

class std::vector<C3dNode::ColorInfo,std::allocator<C3dNode::ColorInfo> > {
  /* this+0x0 */ class std::allocator<C3dNode::ColorInfo> allocator;
  /* this+0x4 */ struct C3dNode::ColorInfo * _First;
  /* this+0x8 */ struct C3dNode::ColorInfo * _Last;
  /* this+0xc */ struct C3dNode::ColorInfo * _End;
}

class Tetris {
  /* this+0x0 */ short[0x13][0x12] Area;
  /* this+0x2ac */ short[0x4][0x4] Block;
  /* this+0x2cc */ short[0x13] LineDownSpeed;
  /* this+0x2f2 */ short Block_type;
  /* this+0x2f4 */ short Block_rot;
  /* this+0x2f6 */ short Block_X;
  /* this+0x2f8 */ short Block_Y;
  /* this+0x2fa */ short Block_fX;
  /* this+0x2fc */ short Block_fY;
  /* this+0x2fe */ short[0x4] Del_Line;
  /* this+0x306 */ short Percent;
  /* this+0x308 */ unsigned long Block_movetime;
  /* this+0x30c */ unsigned long Word_displaytime;
  /* this+0x310 */ int AfterFrame;
  /* this+0x314 */ int DownFrame;
  /* this+0x318 */ unsigned long Block_DelTime;
  /* this+0x31c */ class CSprRes *[0x3] T_spr;
  /* this+0x328 */ class CActRes *[0x3] T_act;
}

class CSnapInfo {
  /* this+0x0 */ struct SnapInfo[0x4] m_info;
}

struct SnapInfo {
  /* this+0x0 */ int[0x3] points;
}

struct BOXINFO {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int cx;
  /* this+0xc */ int cy;
  /* this+0x10 */ int drawEdge;
  /* this+0x14 */ int color;
  /* this+0x18 */ int color2;
}

class std::list<UIWindow *,std::allocator<UIWindow *> >::const_iterator {
  /* this+0x0 */ struct std::list<UIWindow *,std::allocator<UIWindow *> >::_Node * _Ptr;
}

class std::list<UIWindow *,std::allocator<UIWindow *> >::iterator {
  /* this+0x0 */ struct std::list<UIWindow *,std::allocator<UIWindow *> >::_Node * _Ptr;
}

struct std::list<UIWindow *,std::allocator<UIWindow *> >::_Node {
  /* this+0x0 */ struct std::list<UIWindow *,std::allocator<UIWindow *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<UIWindow *,std::allocator<UIWindow *> >::_Node * _Prev;
  /* this+0x8 */ class UIWindow * _Value;
}

struct PACKET_CZ_ADD_FRIENDS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] name;
}

class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator219167ad {
  /* this+0x0 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator3b015f34 * _Ptr;
}

class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocatore838ed7b {
  /* this+0x0 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator3b015f34 * _Ptr;
}

struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator3b015f34 {
  /* this+0x0 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator3b015f34 * _Left;
  /* this+0x4 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator3b015f34 * _Parent;
  /* this+0x8 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator3b015f34 * _Right;
  /* this+0xc */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *> _Value;
  /* this+0x20 */ enum std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocatore067d4b9 _Color;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x10 */ class UIWindow * second;
}

struct StringAndColor {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > String;
  /* this+0x10 */ unsigned long Color;
}

class std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> > {
      /* this+0x0 */ class std::allocator<CSnapInfo> allocator;
  /* this+0x1 */ struct std::less<UIWindow *> key_compare;
  /* this+0x4 */ struct std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class std::list<StringAndColor,std::allocator<StringAndColor> >::iterator {
  /* this+0x0 */ struct std::list<StringAndColor,std::allocator<StringAndColor> >::_Node * _Ptr;
}

class std::list<StringAndColor,std::allocator<StringAndColor> >::const_iterator {
  /* this+0x0 */ struct std::list<StringAndColor,std::allocator<StringAndColor> >::_Node * _Ptr;
}

struct std::list<StringAndColor,std::allocator<StringAndColor> >::_Node {
  /* this+0x0 */ struct std::list<StringAndColor,std::allocator<StringAndColor> >::_Node * _Next;
  /* this+0x4 */ struct std::list<StringAndColor,std::allocator<StringAndColor> >::_Node * _Prev;
  /* this+0x8 */ struct StringAndColor _Value;
}

class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator64c72653 {
      /* this+0x0 */ class std::allocator<UIWindow *> allocator;
  /* this+0x1 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > key_compare;
  /* this+0x4 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator3b015f34 * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class std::reverse_bidirectional_iterator<std::list<UIWindow *,std::allocator<UIWindow *> >::iterator,UIWindow *,UIWindow * &,UIWindow * *,int> {
  /* this+0x0 */ class std::list<UIWindow *,std::allocator<UIWindow *> >::iterator current;
}

class std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> >::iterator {
  /* this+0x0 */ struct std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Node * _Ptr;
}

class std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Node * _Ptr;
}

struct std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Node {
  /* this+0x0 */ struct std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Node * _Right;
  /* this+0xc */ struct std::pair<UIWindow * const,CSnapInfo> _Value;
  /* this+0x40 */ enum std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Redbl _Color;
}

struct std::pair<UIWindow * const,CSnapInfo> {
  /* this+0x0 */ class UIWindow * const first;
  /* this+0x4 */ class CSnapInfo second;
}

struct std::pair<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,std::char_traits<char>,std:df214249 {
  /* this+0x0 */ class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocatore838ed7b first;
  /* this+0x4 */ unsigned char second;
}

struct std::pair<std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

struct HDC__ {
  /* this+0x0 */ int unused;
}

class DrawDC {
  /* this+0x0 */ struct HDC__ * m_hdc;
  /* this+0x4 */ struct HFONT__ * m_oldFont;
  /* this+0x8 */ class CDC * m_surface;
  /* this+0xc */ int m_fontType;
  /* this+0x10 */ int m_fontHeight;
  /* this+0x14 */ int m_charset;
  /* this+0x18 */ int m_fontWeight;
  /* this+0x1c */ unsigned char m_vertical;
  /* this+0x1d */ unsigned char m_bold;
  }

struct tagSIZE {
  /* this+0x0 */ long cx;
  /* this+0x4 */ long cy;
}

struct HFONT__ {
  /* this+0x0 */ int unused;
}

class std::vector<unsigned short,std::allocator<unsigned short> > {
  /* this+0x0 */ class std::allocator<unsigned short> allocator;
  /* this+0x4 */ unsigned short * _First;
  /* this+0x8 */ unsigned short * _Last;
  /* this+0xc */ unsigned short * _End;
}

class std::vector<bool,std::allocator<bool> > {
  /* this+0x0 */ class std::allocator<bool> allocator;
  /* this+0x4 */ unsigned char * _First;
  /* this+0x8 */ unsigned char * _Last;
  /* this+0xc */ unsigned char * _End;
}

class std::list<REPAIRITEM_INFO,std::allocator<REPAIRITEM_INFO> >::iterator {
  /* this+0x0 */ struct std::list<REPAIRITEM_INFO,std::allocator<REPAIRITEM_INFO> >::_Node * _Ptr;
}

class std::list<REPAIRITEM_INFO,std::allocator<REPAIRITEM_INFO> > {
  /* this+0x0 */ class std::allocator<REPAIRITEM_INFO> allocator;
  /* this+0x4 */ struct std::list<REPAIRITEM_INFO,std::allocator<REPAIRITEM_INFO> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<REPAIRITEM_INFO,std::allocator<REPAIRITEM_INFO> >::const_iterator {
  /* this+0x0 */ struct std::list<REPAIRITEM_INFO,std::allocator<REPAIRITEM_INFO> >::_Node * _Ptr;
}

struct std::list<REPAIRITEM_INFO,std::allocator<REPAIRITEM_INFO> >::_Node {
  /* this+0x0 */ struct std::list<REPAIRITEM_INFO,std::allocator<REPAIRITEM_INFO> >::_Node * _Next;
  /* this+0x4 */ struct std::list<REPAIRITEM_INFO,std::allocator<REPAIRITEM_INFO> >::_Node * _Prev;
  /* this+0x8 */ struct REPAIRITEM_INFO _Value;
}

class UIItemBaseWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_drawNumItem;
  /* this+0x64 */ int m_isBasket;
  /* this+0x68 */ class UIResizer * m_resizer;
  /* this+0x6c */ class UIScrollBar * m_scrollBar;
  /* this+0x70 */ class UIBitmapButton *[0x2] m_button;
  /* this+0x78 */ int m_viewOffset;
  /* this+0x7c */ int m_itemVertNum;
  /* this+0x80 */ int m_itemHorzNum;
  /* this+0x84 */ int m_vertScrEnabled;
  /* this+0x88 */ class std::list<ITEM_INFO,std::allocator<ITEM_INFO> > m_itemList;
}

struct PACKET_CZ_ACTIVE_QUEST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long questID;
  /* this+0x6 */ unsigned char active;
}

class UIEditCtrlWheel {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_selectionOrigin;
  /* this+0x4c */ int m_selectionCursor;
  /* this+0x50 */ int m_maskchar;
  /* this+0x54 */ int m_maxchar;
  /* this+0x58 */ int m_isSingColorFrame;
  /* this+0x5c */ int m_r;
  /* this+0x60 */ int m_g;
  /* this+0x64 */ int m_b;
  /* this+0x68 */ int m_textR;
  /* this+0x6c */ int m_textG;
  /* this+0x70 */ int m_textB;
  /* this+0x74 */ int m_xOffset;
  /* this+0x78 */ int m_yOffset;
  /* this+0x7c */ int m_type;
  /* this+0x80 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text;
}

struct std::list<SKILL_INFO,std::allocator<SKILL_INFO> >::_Node {
  /* this+0x0 */ struct std::list<SKILL_INFO,std::allocator<SKILL_INFO> >::_Node * _Next;
  /* this+0x4 */ struct std::list<SKILL_INFO,std::allocator<SKILL_INFO> >::_Node * _Prev;
  /* this+0x8 */ struct SKILL_INFO _Value;
}

class UIGuildWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct GuildWndInfo * m_info;
  /* this+0x64 */ class UIStaticText *[0x6] m_tabText;
}

class Exemplar {
}

class UIEditCtrlVarId {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_selectionOrigin;
  /* this+0x4c */ int m_selectionCursor;
  /* this+0x50 */ int m_maskchar;
  /* this+0x54 */ int m_maxchar;
  /* this+0x58 */ int m_isSingColorFrame;
  /* this+0x5c */ int m_r;
  /* this+0x60 */ int m_g;
  /* this+0x64 */ int m_b;
  /* this+0x68 */ int m_textR;
  /* this+0x6c */ int m_textG;
  /* this+0x70 */ int m_textB;
  /* this+0x74 */ int m_xOffset;
  /* this+0x78 */ int m_yOffset;
  /* this+0x7c */ int m_type;
  /* this+0x80 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text;
}

class std::list<GUILD_POSITION_INFORMATION,std::allocator<GUILD_POSITION_INFORMATION> >::const_iterator {
  /* this+0x0 */ struct std::list<GUILD_POSITION_INFORMATION,std::allocator<GUILD_POSITION_INFORMATION> >::_Node * _Ptr;
}

struct std::list<GUILD_POSITION_INFORMATION,std::allocator<GUILD_POSITION_INFORMATION> >::_Node {
  /* this+0x0 */ struct std::list<GUILD_POSITION_INFORMATION,std::allocator<GUILD_POSITION_INFORMATION> >::_Node * _Next;
  /* this+0x4 */ struct std::list<GUILD_POSITION_INFORMATION,std::allocator<GUILD_POSITION_INFORMATION> >::_Node * _Prev;
  /* this+0x8 */ struct GUILD_POSITION_INFORMATION _Value;
}

class std::list<SKILL_INFO,std::allocator<SKILL_INFO> >::const_iterator {
  /* this+0x0 */ struct std::list<SKILL_INFO,std::allocator<SKILL_INFO> >::_Node * _Ptr;
}

class std::vector<StringId,std::allocator<StringId> > {
  /* this+0x0 */ class std::allocator<StringId> allocator;
  /* this+0x4 */ struct StringId * _First;
  /* this+0x8 */ struct StringId * _Last;
  /* this+0xc */ struct StringId * _End;
}

struct std::_Bidit<GUILD_POSITION_INFORMATION,int> {
}

struct std::_Bidit<GUILD_MEMBER_INFORMATION,int> {
}

struct std::pair<std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::ited3b5f57 {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

struct std::pair<std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

class UICharInfoBalloonText {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ unsigned char m_isBold;
  /* this+0x4c */ int m_fontSize;
  /* this+0x50 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_strings;
  /* this+0x60 */ unsigned long m_fontColor;
  /* this+0x64 */ unsigned long m_bgColor;
  /* this+0x68 */ unsigned char m_isBack;
  /* this+0x6a */ short m_charfont;
  /* this+0x6c */ struct BOXINFO m_transBoxInfo;
}

struct PACKET_CH_SELECT_CHAR_GOINGTOBEUSED {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long dwAID;
  /* this+0x6 */ int nCountSelectedChar;
  /* this+0xa */ unsigned long[0x9] ardwSelectedGID;
}

struct PACKET_CH_REQ_IS_VALID_CHARNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long dwAID;
  /* this+0x6 */ unsigned long dwGID;
  /* this+0xa */ char[0x18] szCharName;
}

struct PACKET_CZ_MEMORIALDUNGEON_COMMAND {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ enum PACKET_CZ_MEMORIALDUNGEON_COMMAND::enumCOMMAND Command;
}

struct PartyMapInfo {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > mapName;
  /* this+0x10 */ struct MapPosInfo mapPosInfo;
  /* this+0x20 */ class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > cNameList;
}

class UIMiniBtnWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class CBitmapRes * m_OnImgRes;
  /* this+0x64 */ class CBitmapRes * m_OffImgRes;
  /* this+0x68 */ enum WINDOWID m_wndID;
}

class std::list<PartyMapInfo,std::allocator<PartyMapInfo> > {
  /* this+0x0 */ class std::allocator<PartyMapInfo> allocator;
  /* this+0x4 */ struct std::list<PartyMapInfo,std::allocator<PartyMapInfo> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<PartyMapInfo,std::allocator<PartyMapInfo> >::iterator {
  /* this+0x0 */ struct std::list<PartyMapInfo,std::allocator<PartyMapInfo> >::_Node * _Ptr;
}

class std::list<PartyMapInfo,std::allocator<PartyMapInfo> >::const_iterator {
  /* this+0x0 */ struct std::list<PartyMapInfo,std::allocator<PartyMapInfo> >::_Node * _Ptr;
}

struct std::list<PartyMapInfo,std::allocator<PartyMapInfo> >::_Node {
  /* this+0x0 */ struct std::list<PartyMapInfo,std::allocator<PartyMapInfo> >::_Node * _Next;
  /* this+0x4 */ struct std::list<PartyMapInfo,std::allocator<PartyMapInfo> >::_Node * _Prev;
  /* this+0x8 */ struct PartyMapInfo _Value;
}

class UIWaitWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UITextViewer * m_textViewer;
  /* this+0x64 */ class UIBitmapButton * m_pctrCancel;
}

class UIToolTipWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIListBox * m_toolTipList;
}

class UIEmailAddressWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIEditCtrl * m_editCtrl;
}

class UIBitmapButton {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text;
  /* this+0x58 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_toolTip;
  /* this+0x68 */ int m_isDisabled;
  /* this+0x6c */ int m_bitmapWidth;
  /* this+0x70 */ int m_bitmapHeight;
  /* this+0x74 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_normalBitmapName;
  /* this+0x84 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_mouseonBitmapName;
  /* this+0x94 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_pressedBitmapName;
}

class UINoticeConfirmWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UITextViewer * m_textViewer;
  /* this+0x64 */ int m_target;
}

class UIWhisperWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_whisperName;
  /* this+0x70 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_whisperTitle;
  /* this+0x80 */ class UIResizer * m_resizer;
  /* this+0x84 */ class UIChatEditCtrl * m_chatEdit;
  /* this+0x88 */ class UIChatHisBox2 * m_listBox;
  /* this+0x8c */ class UIBitmapButton * m_sysButton;
  /* this+0x90 */ class std::vector<StringId,std::allocator<StringId> > m_menuItems;
  /* this+0xa0 */ struct WhisperWndInfo * m_info;
}

class UIGraffiStrboxWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_skillId;
  /* this+0x64 */ int m_gSkillDx;
  /* this+0x68 */ int m_gSkillDy;
  /* this+0x6c */ int m_skillUseLevel;
  /* this+0x70 */ class UIEditCtrl * m_trapText;
}

class std::allocator<std::pair<char const *,enum TALKTYPE> > {
}

class std::reverse_iterator<std::pair<char const *,enum TALKTYPE> const *,std::pair<char const *,enum TALKTYPE>,std::pair<char const *,enum TALKTYPE> const &,std::pair<char const *,enum TALKTYPE> const *,int> {
}

class std::reverse_iterator<std::pair<char const *,enum TALKTYPE> *,std::pair<char const *,enum TALKTYPE>,std::pair<char const *,enum TALKTYPE> &,std::pair<char const *,enum TALKTYPE> *,int> {
}

class std::allocator<bool> {
}

class std::reverse_iterator<bool const *,bool,bool const &,bool const *,int> {
}

class std::reverse_iterator<bool *,bool,bool &,bool *,int> {
}

class std::list<UIBitmapButton *,std::allocator<UIBitmapButton *> > {
  /* this+0x0 */ class std::allocator<UIBitmapButton *> allocator;
  /* this+0x4 */ struct std::list<UIBitmapButton *,std::allocator<UIBitmapButton *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<UIBitmapButton *,std::allocator<UIBitmapButton *> >::iterator {
  /* this+0x0 */ struct std::list<UIBitmapButton *,std::allocator<UIBitmapButton *> >::_Node * _Ptr;
}

class std::list<UIBitmapButton *,std::allocator<UIBitmapButton *> >::const_iterator {
  /* this+0x0 */ struct std::list<UIBitmapButton *,std::allocator<UIBitmapButton *> >::_Node * _Ptr;
}

struct std::list<UIBitmapButton *,std::allocator<UIBitmapButton *> >::_Node {
  /* this+0x0 */ struct std::list<UIBitmapButton *,std::allocator<UIBitmapButton *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<UIBitmapButton *,std::allocator<UIBitmapButton *> >::_Node * _Prev;
  /* this+0x8 */ class UIBitmapButton * _Value;
}

struct StringId {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > itemName;
  /* this+0x10 */ int id;
}

class UIMessageBoxAutoreturn {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UITextViewer * m_textViewer;
  /* this+0x64 */ class UIBarGraph2 * m_barGraph;
  /* this+0x68 */ int m_isAutoReturn;
  /* this+0x6c */ unsigned long m_openTime;
  /* this+0x70 */ unsigned long m_autoReturnTime;
  /* this+0x74 */ int m_maxSecond;
  /* this+0x78 */ int m_remainSecond;
  /* this+0x7c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_countMsg;
  /* this+0x8c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_msg;
}

class UIMessageBox {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UITextViewer * m_textViewer;
  /* this+0x64 */ class UIRechargeGage * m_barGraph;
  /* this+0x68 */ int m_isAutoReturn;
  /* this+0x6c */ unsigned long m_openTime;
  /* this+0x70 */ unsigned long m_autoReturnTime;
  /* this+0x74 */ int m_maxSecond;
  /* this+0x78 */ int m_remainSecond;
  /* this+0x7c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_countMsg;
  /* this+0x8c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_msg;
}

class UINoticeWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIStaticText *[0x15] m_NoticeMessage;
  /* this+0xb4 */ int m_NoticeTotalLine;
  /* this+0xb8 */ int m_NoticeDisplayLine;
  /* this+0xbc */ char * m_NoticeFileName;
  /* this+0xc0 */ int m_TotalPage;
  /* this+0xc4 */ int m_PresentPage;
  /* this+0xc8 */ int[0xa] m_PageStartLine;
  /* this+0xf0 */ int[0xa] m_PageLastLine;
  /* this+0x118 */ int m_PagePresentLine;
  /* this+0x11c */ class UIScrollBar * m_scrollBar;
}

struct viewSprite {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> >[0x5] actName;
  /* this+0x58 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> >[0x5] sprName;
  /* this+0xa8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > imfName;
  /* this+0xb8 */ int headPalette;
  /* this+0xbc */ int bodyPalette;
  /* this+0xc0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > headPaletteName;
  /* this+0xd0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > bodyPaletteName;
  /* this+0xe0 */ int baseAction;
  /* this+0xe4 */ int curAction;
  /* this+0xe8 */ int curMotion;
}

class UIMakeCharWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIBitmapEditCtrl * m_nameEditCtrl;
  /* this+0x64 */ struct CHARACTER_INFO m_charInfo;
  /* this+0xd0 */ struct CHARACTER_INFO m_charInfo2;
  /* this+0x13c */ struct viewSprite m_viewChar;
  /* this+0x228 */ struct viewSprite m_viewChar2;
  /* this+0x314 */ class UIStaticText *[0x6] m_text;
}

class UIBitmapEditCtrl {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_selectionOrigin;
  /* this+0x4c */ int m_selectionCursor;
  /* this+0x50 */ int m_maskchar;
  /* this+0x54 */ int m_maxchar;
  /* this+0x58 */ int m_isSingColorFrame;
  /* this+0x5c */ int m_r;
  /* this+0x60 */ int m_g;
  /* this+0x64 */ int m_b;
  /* this+0x68 */ int m_textR;
  /* this+0x6c */ int m_textG;
  /* this+0x70 */ int m_textB;
  /* this+0x74 */ int m_xOffset;
  /* this+0x78 */ int m_yOffset;
  /* this+0x7c */ int m_type;
  /* this+0x80 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text;
  /* this+0x90 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bitmapName;
}

class UIChatWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ class UIResizer * m_resizer;
  /* this+0x64 */ class UIEditCtrl * m_lastFocusChat;
  /* this+0x68 */ class UIWhisperEditCtrl * m_whisperChat;
  /* this+0x6c */ class UIChatEditCtrl * m_commonChat;
  /* this+0x70 */ class UIBitmapButton *[0x3] m_buttons;
  /* this+0x7c */ class UIChatHisBox * m_listBox;
  /* this+0x80 */ struct BOXINFO m_boxInfo;
  /* this+0x9c */ int m_comboMode;
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<unsigned long> > {
  /* this+0x0 */ class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<char,std::char_traits<char>,std::allocaf675ba89 _Tr;
}

class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<char,std::char_traits<char>,std::allocab36c677c {
  /* this+0x0 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<char,std::char_traits<char>,std::alloca2358a75c * _Ptr;
}

class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<char,std::char_traits<char>,std::alloca602ef51e {
  /* this+0x0 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<char,std::char_traits<char>,std::alloca2358a75c * _Ptr;
}

struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<char,std::char_traits<char>,std::alloca2358a75c {
  /* this+0x0 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<char,std::char_traits<char>,std::alloca2358a75c * _Left;
  /* this+0x4 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<char,std::char_traits<char>,std::alloca2358a75c * _Parent;
  /* this+0x8 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<char,std::char_traits<char>,std::alloca2358a75c * _Right;
  /* this+0xc */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> _Value;
  /* this+0x20 */ enum std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<char,std::char_traits<char>,std::allocaa316642b _Color;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x10 */ unsigned long second;
}

class UIMonsterInfoWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ struct PACKET_ZC_MONSTER_INFO m_zc_monster_info;
}

struct CSprClip {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int sprIndex;
  /* this+0xc */ int flags;
  /* this+0x10 */ unsigned char r;
  /* this+0x11 */ unsigned char g;
  /* this+0x12 */ unsigned char b;
  /* this+0x13 */ unsigned char a;
  /* this+0x14 */ float zoomx;
  /* this+0x18 */ float zoomy;
  /* this+0x1c */ int angle;
  /* this+0x20 */ int clipType;
}

class UITalkboxTrapInputWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_skillId;
  /* this+0x64 */ int m_gSkillDx;
  /* this+0x68 */ int m_gSkillDy;
  /* this+0x6c */ int m_skillUseLevel;
  /* this+0x70 */ class UIEditCtrl * m_trapText;
}

class UICntWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_target;
  /* this+0x64 */ class UIEditCtrl * m_editCtrl;
  /* this+0x68 */ class UIStaticText * m_newText;
}

class UIBarGraph4 {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ const int * m_pAmount;
  /* this+0x4c */ const int * m_pTotalAmount;
  /* this+0x50 */ unsigned char m_bType;
}

struct std::pair<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<char,std::char_traits<char>,sf0193980 {
  /* this+0x0 */ class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<char,std::char_traits<char>,std::alloca602ef51e first;
  /* this+0x4 */ unsigned char second;
}

class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<char,std::char_traits<char>,std::allocaf675ba89 {
      /* this+0x0 */ class std::allocator<unsigned long> allocator;
  /* this+0x1 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > key_compare;
  /* this+0x4 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<char,std::char_traits<char>,std::alloca2358a75c * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class UIBarGraph {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ float m_percent;
}

class UIBarGraph2 {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ float m_percent;
  /* this+0x4c */ int m_isVertical;
  /* this+0x50 */ int m_backR;
  /* this+0x54 */ int m_backG;
  /* this+0x58 */ int m_backB;
  /* this+0x5c */ int m_r;
  /* this+0x60 */ int m_g;
  /* this+0x64 */ int m_b;
}

class UIBarGraph3 {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ const int * m_pAmount;
  /* this+0x4c */ const int * m_pTotalAmount;
}

class UIBarGraphPlayerHp {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_isPlayerType;
}

class UIBarGraphPlayerSp {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_isPlayerType;
}

class UIGage {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_edgeR;
  /* this+0x4c */ int m_edgeG;
  /* this+0x50 */ int m_edgeB;
  /* this+0x54 */ int m_backR;
  /* this+0x58 */ int m_backG;
  /* this+0x5c */ int m_backB;
  /* this+0x60 */ int m_r;
  /* this+0x64 */ int m_g;
  /* this+0x68 */ int m_b;
  /* this+0x6c */ int m_backR2;
  /* this+0x70 */ int m_backG2;
  /* this+0x74 */ int m_backB2;
  /* this+0x78 */ int m_r2;
  /* this+0x7c */ int m_g2;
  /* this+0x80 */ int m_b2;
}

class UIRechargeGage {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_edgeR;
  /* this+0x4c */ int m_edgeG;
  /* this+0x50 */ int m_edgeB;
  /* this+0x54 */ int m_backR;
  /* this+0x58 */ int m_backG;
  /* this+0x5c */ int m_backB;
  /* this+0x60 */ int m_r;
  /* this+0x64 */ int m_g;
  /* this+0x68 */ int m_b;
  /* this+0x6c */ int m_backR2;
  /* this+0x70 */ int m_backG2;
  /* this+0x74 */ int m_backB2;
  /* this+0x78 */ int m_r2;
  /* this+0x7c */ int m_g2;
  /* this+0x80 */ int m_b2;
  /* this+0x84 */ int m_amount;
  /* this+0x88 */ int m_totalAmount;
}

class UIPcGage {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_edgeR;
  /* this+0x4c */ int m_edgeG;
  /* this+0x50 */ int m_edgeB;
  /* this+0x54 */ int m_backR;
  /* this+0x58 */ int m_backG;
  /* this+0x5c */ int m_backB;
  /* this+0x60 */ int m_r;
  /* this+0x64 */ int m_g;
  /* this+0x68 */ int m_b;
  /* this+0x6c */ int m_backR2;
  /* this+0x70 */ int m_backG2;
  /* this+0x74 */ int m_backB2;
  /* this+0x78 */ int m_r2;
  /* this+0x7c */ int m_g2;
  /* this+0x80 */ int m_b2;
  /* this+0x84 */ int m_dangerR;
  /* this+0x88 */ int m_dangerG;
  /* this+0x8c */ int m_dangerB;
  /* this+0x90 */ int m_mode;
  /* this+0x94 */ int m_hpAmount;
  /* this+0x98 */ int m_hpTotalAmount;
  /* this+0x9c */ int m_spAmount;
  /* this+0xa0 */ int m_spTotalAmount;
}

class UIPlayerGage {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_edgeR;
  /* this+0x4c */ int m_edgeG;
  /* this+0x50 */ int m_edgeB;
  /* this+0x54 */ int m_backR;
  /* this+0x58 */ int m_backG;
  /* this+0x5c */ int m_backB;
  /* this+0x60 */ int m_r;
  /* this+0x64 */ int m_g;
  /* this+0x68 */ int m_b;
  /* this+0x6c */ int m_backR2;
  /* this+0x70 */ int m_backG2;
  /* this+0x74 */ int m_backB2;
  /* this+0x78 */ int m_r2;
  /* this+0x7c */ int m_g2;
  /* this+0x80 */ int m_b2;
  /* this+0x84 */ int m_dangerR;
  /* this+0x88 */ int m_dangerG;
  /* this+0x8c */ int m_dangerB;
  /* this+0x90 */ int m_isPlayerType;
}

class UIListBox {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_bR;
  /* this+0x4c */ int m_bG;
  /* this+0x50 */ int m_bB;
  /* this+0x54 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_items;
  /* this+0x64 */ int m_curItem;
  /* this+0x68 */ int m_vertViewOffset;
  /* this+0x6c */ int m_horzViewOffset;
  /* this+0x70 */ int m_maxTextWidth;
  /* this+0x74 */ int m_vertScrEnabled;
  /* this+0x78 */ int m_horzScrEnabled;
  /* this+0x7c */ class UIScrollBar * m_vertScrollBar;
  /* this+0x80 */ class UIScrollBar * m_horzScrollBar;
  /* this+0x84 */ int m_isTransParent;
  /* this+0x88 */ int m_itemSpacing;
  /* this+0x8c */ char m_noColor;
}

class UIComboBox {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_bR;
  /* this+0x4c */ int m_bG;
  /* this+0x50 */ int m_bB;
  /* this+0x54 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_items;
  /* this+0x64 */ int m_curItem;
  /* this+0x68 */ int m_vertViewOffset;
  /* this+0x6c */ int m_horzViewOffset;
  /* this+0x70 */ int m_maxTextWidth;
  /* this+0x74 */ int m_vertScrEnabled;
  /* this+0x78 */ int m_horzScrEnabled;
  /* this+0x7c */ class UIScrollBar * m_vertScrollBar;
  /* this+0x80 */ class UIScrollBar * m_horzScrollBar;
  /* this+0x84 */ int m_isTransParent;
  /* this+0x88 */ int m_itemSpacing;
  /* this+0x8c */ char m_noColor;
  /* this+0x90 */ enum WINDOWID m_callerWid;
}

class UIChatHisBox {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_bR;
  /* this+0x4c */ int m_bG;
  /* this+0x50 */ int m_bB;
  /* this+0x54 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_items;
  /* this+0x64 */ int m_curItem;
  /* this+0x68 */ int m_vertViewOffset;
  /* this+0x6c */ int m_horzViewOffset;
  /* this+0x70 */ int m_maxTextWidth;
  /* this+0x74 */ int m_vertScrEnabled;
  /* this+0x78 */ int m_horzScrEnabled;
  /* this+0x7c */ class UIScrollBar * m_vertScrollBar;
  /* this+0x80 */ class UIScrollBar * m_horzScrollBar;
  /* this+0x84 */ int m_isTransParent;
  /* this+0x88 */ int m_itemSpacing;
  /* this+0x8c */ char m_noColor;
  /* this+0x90 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_talkerNameList;
  /* this+0xa0 */ class std::vector<unsigned long,std::allocator<unsigned long> > m_itemColors;
  /* this+0xb0 */ int m_maxItem;
}

class UIChatHisBox2 {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_bR;
  /* this+0x4c */ int m_bG;
  /* this+0x50 */ int m_bB;
  /* this+0x54 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_items;
  /* this+0x64 */ int m_curItem;
  /* this+0x68 */ int m_vertViewOffset;
  /* this+0x6c */ int m_horzViewOffset;
  /* this+0x70 */ int m_maxTextWidth;
  /* this+0x74 */ int m_vertScrEnabled;
  /* this+0x78 */ int m_horzScrEnabled;
  /* this+0x7c */ class UIScrollBar * m_vertScrollBar;
  /* this+0x80 */ class UIScrollBar * m_horzScrollBar;
  /* this+0x84 */ int m_isTransParent;
  /* this+0x88 */ int m_itemSpacing;
  /* this+0x8c */ char m_noColor;
  /* this+0x90 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_talkerNameList;
  /* this+0xa0 */ class std::vector<unsigned long,std::allocator<unsigned long> > m_itemColors;
  /* this+0xb0 */ int m_maxItem;
  /* this+0xb4 */ int m_r;
  /* this+0xb8 */ int m_g;
  /* this+0xbc */ int m_b;
}

class UIMemberListBox {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_bR;
  /* this+0x4c */ int m_bG;
  /* this+0x50 */ int m_bB;
  /* this+0x54 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_items;
  /* this+0x64 */ int m_curItem;
  /* this+0x68 */ int m_vertViewOffset;
  /* this+0x6c */ int m_horzViewOffset;
  /* this+0x70 */ int m_maxTextWidth;
  /* this+0x74 */ int m_vertScrEnabled;
  /* this+0x78 */ int m_horzScrEnabled;
  /* this+0x7c */ class UIScrollBar * m_vertScrollBar;
  /* this+0x80 */ class UIScrollBar * m_horzScrollBar;
  /* this+0x84 */ int m_isTransParent;
  /* this+0x88 */ int m_itemSpacing;
  /* this+0x8c */ char m_noColor;
  /* this+0x90 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_talkerNameList;
  /* this+0xa0 */ class std::vector<unsigned long,std::allocator<unsigned long> > m_itemColors;
  /* this+0xb0 */ int m_maxItem;
  /* this+0xb4 */ int m_r;
  /* this+0xb8 */ int m_g;
  /* this+0xbc */ int m_b;
}

class UITextViewer {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_bR;
  /* this+0x4c */ int m_bG;
  /* this+0x50 */ int m_bB;
  /* this+0x54 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_items;
  /* this+0x64 */ int m_curItem;
  /* this+0x68 */ int m_vertViewOffset;
  /* this+0x6c */ int m_horzViewOffset;
  /* this+0x70 */ int m_maxTextWidth;
  /* this+0x74 */ int m_vertScrEnabled;
  /* this+0x78 */ int m_horzScrEnabled;
  /* this+0x7c */ class UIScrollBar * m_vertScrollBar;
  /* this+0x80 */ class UIScrollBar * m_horzScrollBar;
  /* this+0x84 */ int m_isTransParent;
  /* this+0x88 */ int m_itemSpacing;
  /* this+0x8c */ char m_noColor;
  /* this+0x90 */ int m_bgR;
  /* this+0x94 */ int m_bgG;
  /* this+0x98 */ int m_bgB;
}

class UIServerListBox {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_bR;
  /* this+0x4c */ int m_bG;
  /* this+0x50 */ int m_bB;
  /* this+0x54 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_items;
  /* this+0x64 */ int m_curItem;
  /* this+0x68 */ int m_vertViewOffset;
  /* this+0x6c */ int m_horzViewOffset;
  /* this+0x70 */ int m_maxTextWidth;
  /* this+0x74 */ int m_vertScrEnabled;
  /* this+0x78 */ int m_horzScrEnabled;
  /* this+0x7c */ class UIScrollBar * m_vertScrollBar;
  /* this+0x80 */ class UIScrollBar * m_horzScrollBar;
  /* this+0x84 */ int m_isTransParent;
  /* this+0x88 */ int m_itemSpacing;
  /* this+0x8c */ char m_noColor;
  /* this+0x90 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_strings;
  /* this+0xa0 */ class UIBalloonText * m_serverBalloon;
}

class UIColorTransBalloonText {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ unsigned char m_isBold;
  /* this+0x4c */ int m_fontSize;
  /* this+0x50 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_strings;
  /* this+0x60 */ unsigned long m_fontColor;
  /* this+0x64 */ unsigned long m_bgColor;
  /* this+0x68 */ unsigned char m_isBack;
  /* this+0x6a */ short m_charfont;
  /* this+0x6c */ struct BOXINFO m_transBoxInfo;
}

class UIScrollBar {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_drawMode;
  /* this+0x4c */ int m_maxPos;
  /* this+0x50 */ int m_curPos;
  /* this+0x54 */ int m_isVert;
  /* this+0x58 */ int m_startDragX;
  /* this+0x5c */ int m_startDragY;
  /* this+0x60 */ int m_deltaDrag;
  /* this+0x64 */ int m_parentNumItem;
  /* this+0x68 */ int m_parentnumCanDisplayItem;
  /* this+0x6c */ int m_scrollBtnSize;
  /* this+0x70 */ int m_fixedLength;
  /* this+0x74 */ int m_type;
}

class UIScrollBar2 {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_drawMode;
  /* this+0x4c */ int m_maxPos;
  /* this+0x50 */ int m_curPos;
  /* this+0x54 */ int m_isVert;
  /* this+0x58 */ int m_startDragX;
  /* this+0x5c */ int m_startDragY;
  /* this+0x60 */ int m_deltaDrag;
  /* this+0x64 */ int m_parentNumItem;
  /* this+0x68 */ int m_parentnumCanDisplayItem;
  /* this+0x6c */ int m_scrollBtnSize;
  /* this+0x70 */ int m_fixedLength;
  /* this+0x74 */ int m_type;
}

class UIScrollBar3 {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_drawMode;
  /* this+0x4c */ int m_maxPos;
  /* this+0x50 */ int m_curPos;
  /* this+0x54 */ int m_isVert;
  /* this+0x58 */ int m_startDragX;
  /* this+0x5c */ int m_startDragY;
  /* this+0x60 */ int m_deltaDrag;
  /* this+0x64 */ int m_parentNumItem;
  /* this+0x68 */ int m_parentnumCanDisplayItem;
  /* this+0x6c */ int m_scrollBtnSize;
  /* this+0x70 */ int m_fixedLength;
  /* this+0x74 */ int m_type;
}

class UIScrollBar4 {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_drawMode;
  /* this+0x4c */ int m_maxPos;
  /* this+0x50 */ int m_curPos;
  /* this+0x54 */ int m_isVert;
  /* this+0x58 */ int m_startDragX;
  /* this+0x5c */ int m_startDragY;
  /* this+0x60 */ int m_deltaDrag;
  /* this+0x64 */ int m_parentNumItem;
  /* this+0x68 */ int m_parentnumCanDisplayItem;
  /* this+0x6c */ int m_scrollBtnSize;
  /* this+0x70 */ int m_fixedLength;
  /* this+0x74 */ int m_type;
  /* this+0x78 */ int m_thumbSize;
}

class UIImgMenu {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_curMenuIndex;
  /* this+0x4c */ int m_size;
  /* this+0x50 */ int sel_w;
  /* this+0x54 */ int sel_h;
  /* this+0x58 */ int m_type;
  /* this+0x5c */ unsigned char * m_bar;
  /* this+0x60 */ unsigned char * m_disable;
  /* this+0x64 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bgImg;
  /* this+0x74 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bgImgOver;
  /* this+0x84 */ enum WINDOWID m_callerWid;
}

class UITextButton {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text;
  /* this+0x58 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_toolTip;
  /* this+0x68 */ int m_isDisabled;
  /* this+0x6c */ unsigned long m_btnColor;
  /* this+0x70 */ unsigned long m_fontColor;
  /* this+0x74 */ unsigned long m_selectColor;
  /* this+0x78 */ unsigned long m_fontBgColor;
  /* this+0x7c */ unsigned char m_isFontBold;
  /* this+0x80 */ int m_fontSize;
  /* this+0x84 */ int m_fontFace;
  /* this+0x88 */ int m_id2;
  /* this+0x8c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text2;
}

class UIButton {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text;
  /* this+0x58 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_toolTip;
  /* this+0x68 */ int m_isDisabled;
}

class UIBitmapButton2 {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text;
  /* this+0x58 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_toolTip;
  /* this+0x68 */ int m_isDisabled;
  /* this+0x6c */ int m_bitmapWidth;
  /* this+0x70 */ int m_bitmapHeight;
  /* this+0x74 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_normalBitmapName;
  /* this+0x84 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_mouseonBitmapName;
  /* this+0x94 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_pressedBitmapName;
}

class UIChatHisBox3 {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_bR;
  /* this+0x4c */ int m_bG;
  /* this+0x50 */ int m_bB;
  /* this+0x54 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_items;
  /* this+0x64 */ int m_curItem;
  /* this+0x68 */ int m_vertViewOffset;
  /* this+0x6c */ int m_horzViewOffset;
  /* this+0x70 */ int m_maxTextWidth;
  /* this+0x74 */ int m_vertScrEnabled;
  /* this+0x78 */ int m_horzScrEnabled;
  /* this+0x7c */ class UIScrollBar * m_vertScrollBar;
  /* this+0x80 */ class UIScrollBar * m_horzScrollBar;
  /* this+0x84 */ int m_isTransParent;
  /* this+0x88 */ int m_itemSpacing;
  /* this+0x8c */ char m_noColor;
  /* this+0x90 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_talkerNameList;
  /* this+0xa0 */ class std::vector<unsigned long,std::allocator<unsigned long> > m_itemColors;
  /* this+0xb0 */ int m_maxItem;
  /* this+0xb4 */ int m_r;
  /* this+0xb8 */ int m_g;
  /* this+0xbc */ int m_b;
  /* this+0xc0 */ int m_type;
  /* this+0xc4 */ int m_fontSize;
}

class UITabControl {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ unsigned char m_bVerticalType;
  /* this+0x4c */ int m_tab;
  /* this+0x50 */ int m_maxTab;
  /* this+0x54 */ int m_tabHeight;
  /* this+0x58 */ int m_tabWidth;
  /* this+0x5c */ unsigned long m_colorOnTab;
  /* this+0x60 */ unsigned long m_colorOffTab;
  /* this+0x64 */ unsigned long m_colorBgTab;
  /* this+0x68 */ unsigned long m_colorBtmTab;
  /* this+0x6c */ class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_TabStrings;
}

class UIStaticText {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_drawBackGround;
  /* this+0x4c */ int m_backR;
  /* this+0x50 */ int m_backG;
  /* this+0x54 */ int m_backB;
  /* this+0x58 */ int m_textR;
  /* this+0x5c */ int m_textG;
  /* this+0x60 */ int m_textB;
  /* this+0x64 */ int m_drawTwice;
  /* this+0x68 */ int m_drawBold;
  /* this+0x6c */ int m_fontHeight;
  /* this+0x70 */ int m_fontType;
  /* this+0x74 */ int m_isShorten;
  /* this+0x78 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text;
  /* this+0x88 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_fullText;
}

class UIStaticBitmap {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bitmapName;
}

class UICheckBox {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_isDisabled;
  /* this+0x4c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_onBitmapName;
  /* this+0x5c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_offBitmapName;
  /* this+0x6c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_checkMsg;
}

class UISlotBitmap {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bitmapName;
  /* this+0x58 */ int m_nSlotID;
}

class UINoneVisibleButton {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text;
  /* this+0x58 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_toolTip;
  /* this+0x68 */ int m_isDisabled;
}

class UIColorButton {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text;
  /* this+0x58 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_toolTip;
  /* this+0x68 */ int m_isDisabled;
  /* this+0x6c */ int m_r;
  /* this+0x70 */ int m_g;
  /* this+0x74 */ int m_b;
  /* this+0x78 */ int m_br;
  /* this+0x7c */ int m_bg;
  /* this+0x80 */ int m_bb;
}

class UISpriteButton {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text;
  /* this+0x58 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_toolTip;
  /* this+0x68 */ int m_isDisabled;
  /* this+0x6c */ int m_maxAct;
  /* this+0x70 */ int m_maxMot;
  /* this+0x74 */ int m_curAct;
  /* this+0x78 */ int m_curMot;
  /* this+0x7c */ int m_isAnimation;
  /* this+0x80 */ int m_isFitToSize;
  /* this+0x84 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strSprName;
  /* this+0x94 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strActName;
}

class UIBalloonText {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ unsigned char m_isBold;
  /* this+0x4c */ int m_fontSize;
  /* this+0x50 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_strings;
  /* this+0x60 */ unsigned long m_fontColor;
  /* this+0x64 */ unsigned long m_bgColor;
  /* this+0x68 */ unsigned char m_isBack;
  /* this+0x6a */ short m_charfont;
}

class UITransBalloonText {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ unsigned char m_isBold;
  /* this+0x4c */ int m_fontSize;
  /* this+0x50 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_strings;
  /* this+0x60 */ unsigned long m_fontColor;
  /* this+0x64 */ unsigned long m_bgColor;
  /* this+0x68 */ unsigned char m_isBack;
  /* this+0x6a */ short m_charfont;
  /* this+0x6c */ struct BOXINFO m_transBoxInfo;
}

class UINameBalloonText {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ unsigned char m_isBold;
  /* this+0x4c */ int m_fontSize;
  /* this+0x50 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_strings;
  /* this+0x60 */ unsigned long m_fontColor;
  /* this+0x64 */ unsigned long m_bgColor;
  /* this+0x68 */ unsigned char m_isBack;
  /* this+0x6a */ short m_charfont;
  /* this+0x6c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_ebmResName;
  /* this+0x7c */ int m_textWidth;
}

class UIEditCtrl {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_selectionOrigin;
  /* this+0x4c */ int m_selectionCursor;
  /* this+0x50 */ int m_maskchar;
  /* this+0x54 */ int m_maxchar;
  /* this+0x58 */ int m_isSingColorFrame;
  /* this+0x5c */ int m_r;
  /* this+0x60 */ int m_g;
  /* this+0x64 */ int m_b;
  /* this+0x68 */ int m_textR;
  /* this+0x6c */ int m_textG;
  /* this+0x70 */ int m_textB;
  /* this+0x74 */ int m_xOffset;
  /* this+0x78 */ int m_yOffset;
  /* this+0x7c */ int m_type;
  /* this+0x80 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text;
}

class UIEditCtrl2 {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_selectionOrigin;
  /* this+0x4c */ int m_selectionCursor;
  /* this+0x50 */ int m_maskchar;
  /* this+0x54 */ int m_maxchar;
  /* this+0x58 */ int m_isSingColorFrame;
  /* this+0x5c */ int m_r;
  /* this+0x60 */ int m_g;
  /* this+0x64 */ int m_b;
  /* this+0x68 */ int m_textR;
  /* this+0x6c */ int m_textG;
  /* this+0x70 */ int m_textB;
  /* this+0x74 */ int m_xOffset;
  /* this+0x78 */ int m_yOffset;
  /* this+0x7c */ int m_type;
  /* this+0x80 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text;
}

class UIEditCtrl3 {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_selectionOrigin;
  /* this+0x4c */ int m_selectionCursor;
  /* this+0x50 */ int m_maskchar;
  /* this+0x54 */ int m_maxchar;
  /* this+0x58 */ int m_isSingColorFrame;
  /* this+0x5c */ int m_r;
  /* this+0x60 */ int m_g;
  /* this+0x64 */ int m_b;
  /* this+0x68 */ int m_textR;
  /* this+0x6c */ int m_textG;
  /* this+0x70 */ int m_textB;
  /* this+0x74 */ int m_xOffset;
  /* this+0x78 */ int m_yOffset;
  /* this+0x7c */ int m_type;
  /* this+0x80 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text;
  /* this+0x90 */ class UIScrollBar * m_scrollBar;
  /* this+0x94 */ int m_scrEnabled;
  /* this+0x98 */ int m_itemSpacing;
  /* this+0x9c */ int m_itemSize;
  /* this+0xa0 */ int m_lineLength;
  /* this+0xa4 */ int m_curPos;
  /* this+0xa8 */ int m_curPos2;
  /* this+0xac */ int m_curWidth;
  /* this+0xb0 */ int m_prePos;
  /* this+0xb4 */ int m_nextPos;
  /* this+0xb8 */ int m_scrollOffset;
  /* this+0xbc */ unsigned char m_moveScroll;
  /* this+0xbd */ unsigned char m_moveUpCursor;
  /* this+0xbe */ unsigned char m_moveDownCursor;
  /* this+0xc0 */ char * m_upLineText;
  /* this+0xc4 */ char * m_downLineText;
  /* this+0xc8 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > strings;
  /* this+0xd8 */ class std::vector<bool,std::allocator<bool> > enters;
  /* this+0xe8 */ unsigned char m_cursorMove;
  /* this+0xe9 */ unsigned char m_onShiftEnter;
}

class UIWhisperEditCtrl {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_selectionOrigin;
  /* this+0x4c */ int m_selectionCursor;
  /* this+0x50 */ int m_maskchar;
  /* this+0x54 */ int m_maxchar;
  /* this+0x58 */ int m_isSingColorFrame;
  /* this+0x5c */ int m_r;
  /* this+0x60 */ int m_g;
  /* this+0x64 */ int m_b;
  /* this+0x68 */ int m_textR;
  /* this+0x6c */ int m_textG;
  /* this+0x70 */ int m_textB;
  /* this+0x74 */ int m_xOffset;
  /* this+0x78 */ int m_yOffset;
  /* this+0x7c */ int m_type;
  /* this+0x80 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text;
  /* this+0x90 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_hisChat;
  /* this+0xa0 */ int m_curHis;
}

class UIChatEditCtrl {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_selectionOrigin;
  /* this+0x4c */ int m_selectionCursor;
  /* this+0x50 */ int m_maskchar;
  /* this+0x54 */ int m_maxchar;
  /* this+0x58 */ int m_isSingColorFrame;
  /* this+0x5c */ int m_r;
  /* this+0x60 */ int m_g;
  /* this+0x64 */ int m_b;
  /* this+0x68 */ int m_textR;
  /* this+0x6c */ int m_textG;
  /* this+0x70 */ int m_textB;
  /* this+0x74 */ int m_xOffset;
  /* this+0x78 */ int m_yOffset;
  /* this+0x7c */ int m_type;
  /* this+0x80 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text;
  /* this+0x90 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_hisChat;
  /* this+0xa0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_lastEditText;
  /* this+0xb0 */ int m_curHis;
}

class UIResizer {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_bitmapName;
  /* this+0x58 */ int m_startX;
  /* this+0x5c */ int m_startY;
  /* this+0x60 */ enum RESIZERTYPE m_type;
  /* this+0x64 */ int m_parentWidth;
  /* this+0x68 */ int m_parentHeight;
  /* this+0x6c */ unsigned long m_color;
  /* this+0x70 */ unsigned long m_backColor;
}

class UITab {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_numTab;
  /* this+0x4c */ int m_typeTab;
}

class UIRadioBtn {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_text;
  /* this+0x58 */ int m_isEnabled;
  /* this+0x5c */ int m_type;
}

class UIMerchantShopTitle {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ class UIStaticText * m_title;
  /* this+0x4c */ unsigned long m_shopOwnerAid;
  /* this+0x50 */ short m_shopfont;
}

class UIEmblemWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_posx;
  /* this+0x64 */ int m_posy;
  /* this+0x68 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_fileName;
  /* this+0x78 */ unsigned long m_masterAid;
}

class UIWordDisplayWnd {
  /* this+0x4 */ class UIWindow * m_parent;
  /* this+0x8 */ class std::list<UIWindow *,std::allocator<UIWindow *> > m_children;
  /* this+0x14 */ int m_x;
  /* this+0x18 */ int m_y;
  /* this+0x1c */ int m_w;
  /* this+0x20 */ int m_h;
  /* this+0x24 */ int m_isDirty;
  /* this+0x28 */ class CDC * m_dc;
  /* this+0x2c */ int m_id;
  /* this+0x30 */ int m_state;
  /* this+0x34 */ int m_stateCnt;
  /* this+0x38 */ int m_show;
  /* this+0x3c */ unsigned long m_trans;
  /* this+0x40 */ unsigned long m_transTarget;
  /* this+0x44 */ unsigned long m_transTime;
  /* this+0x48 */ int m_startGlobalX;
  /* this+0x4c */ int m_startGlobalY;
  /* this+0x50 */ int m_orgX;
  /* this+0x54 */ int m_orgY;
  /* this+0x58 */ int m_defPushId;
  /* this+0x5c */ int m_defCancelPushId;
  /* this+0x60 */ int m_posx;
  /* this+0x64 */ int m_posy;
  /* this+0x68 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_fileName;
  /* this+0x78 */ unsigned long m_masterAid;
}

class std::list<SnapObject *,std::allocator<SnapObject *> >::const_iterator {
  /* this+0x0 */ struct std::list<SnapObject *,std::allocator<SnapObject *> >::_Node * _Ptr;
}

class std::list<SnapObject *,std::allocator<SnapObject *> >::iterator {
  /* this+0x0 */ struct std::list<SnapObject *,std::allocator<SnapObject *> >::_Node * _Ptr;
}

struct std::list<SnapObject *,std::allocator<SnapObject *> >::_Node {
  /* this+0x0 */ struct std::list<SnapObject *,std::allocator<SnapObject *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<SnapObject *,std::allocator<SnapObject *> >::_Node * _Prev;
  /* this+0x8 */ class SnapObject * _Value;
}

struct C3dWorldRes::lightSrcInfo {
  /* this+0x0 */ char[0x50] name;
  /* this+0x50 */ struct vector3d pos;
  /* this+0x5c */ int red;
  /* this+0x60 */ int green;
  /* this+0x64 */ int blue;
  /* this+0x68 */ float range;
}

struct C3dWorldRes::soundSrcInfo_V19 {
  /* this+0x0 */ char[0x50] name;
  /* this+0x50 */ char[0x50] waveName;
  /* this+0xa0 */ struct vector3d pos;
  /* this+0xac */ float vol;
  /* this+0xb0 */ int width;
  /* this+0xb4 */ int height;
  /* this+0xb8 */ float range;
}

struct C3dWorldRes::soundSrcInfo {
  /* this+0x0 */ char[0x50] name;
  /* this+0x50 */ char[0x50] waveName;
  /* this+0xa0 */ struct vector3d pos;
  /* this+0xac */ float vol;
  /* this+0xb0 */ int width;
  /* this+0xb4 */ int height;
  /* this+0xb8 */ float range;
  /* this+0xbc */ float cycle;
}

class std::list<C3dWorldRes::actorInfo *,std::allocator<C3dWorldRes::actorInfo *> > {
  /* this+0x0 */ class std::allocator<C3dWorldRes::actorInfo *> allocator;
  /* this+0x4 */ struct std::list<C3dWorldRes::actorInfo *,std::allocator<C3dWorldRes::actorInfo *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<C3dWorldRes::effectSrcInfo *,std::allocator<C3dWorldRes::effectSrcInfo *> > {
  /* this+0x0 */ class std::allocator<C3dWorldRes::effectSrcInfo *> allocator;
  /* this+0x4 */ struct std::list<C3dWorldRes::effectSrcInfo *,std::allocator<C3dWorldRes::effectSrcInfo *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<C3dWorldRes::soundSrcInfo *,std::allocator<C3dWorldRes::soundSrcInfo *> > {
  /* this+0x0 */ class std::allocator<C3dWorldRes::soundSrcInfo *> allocator;
  /* this+0x4 */ struct std::list<C3dWorldRes::soundSrcInfo *,std::allocator<C3dWorldRes::soundSrcInfo *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

struct tmpActorInfo {
  /* this+0x0 */ char[0x50] modelName;
  /* this+0x50 */ char[0x50] nodeName;
  /* this+0xa0 */ struct vector3d pos;
  /* this+0xac */ struct vector3d rot;
  /* this+0xb8 */ struct vector3d scale;
}

class std::list<C3dWorldRes::effectSrcInfo *,std::allocator<C3dWorldRes::effectSrcInfo *> >::iterator {
  /* this+0x0 */ struct std::list<C3dWorldRes::effectSrcInfo *,std::allocator<C3dWorldRes::effectSrcInfo *> >::_Node * _Ptr;
}

class std::list<C3dWorldRes::soundSrcInfo *,std::allocator<C3dWorldRes::soundSrcInfo *> >::iterator {
  /* this+0x0 */ struct std::list<C3dWorldRes::soundSrcInfo *,std::allocator<C3dWorldRes::soundSrcInfo *> >::_Node * _Ptr;
}

class std::list<C3dWorldRes::effectSrcInfo *,std::allocator<C3dWorldRes::effectSrcInfo *> >::const_iterator {
  /* this+0x0 */ struct std::list<C3dWorldRes::effectSrcInfo *,std::allocator<C3dWorldRes::effectSrcInfo *> >::_Node * _Ptr;
}

struct std::list<C3dWorldRes::effectSrcInfo *,std::allocator<C3dWorldRes::effectSrcInfo *> >::_Node {
  /* this+0x0 */ struct std::list<C3dWorldRes::effectSrcInfo *,std::allocator<C3dWorldRes::effectSrcInfo *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<C3dWorldRes::effectSrcInfo *,std::allocator<C3dWorldRes::effectSrcInfo *> >::_Node * _Prev;
  /* this+0x8 */ struct C3dWorldRes::effectSrcInfo * _Value;
}

class std::list<C3dWorldRes::soundSrcInfo *,std::allocator<C3dWorldRes::soundSrcInfo *> >::const_iterator {
  /* this+0x0 */ struct std::list<C3dWorldRes::soundSrcInfo *,std::allocator<C3dWorldRes::soundSrcInfo *> >::_Node * _Ptr;
}

struct std::list<C3dWorldRes::soundSrcInfo *,std::allocator<C3dWorldRes::soundSrcInfo *> >::_Node {
  /* this+0x0 */ struct std::list<C3dWorldRes::soundSrcInfo *,std::allocator<C3dWorldRes::soundSrcInfo *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<C3dWorldRes::soundSrcInfo *,std::allocator<C3dWorldRes::soundSrcInfo *> >::_Node * _Prev;
  /* this+0x8 */ struct C3dWorldRes::soundSrcInfo * _Value;
}

class CWave {
  /* this+0x4 */ int m_lockCnt;
  /* this+0x8 */ unsigned long m_timeStamp;
  /* this+0xc */ int m_extIndex;
  /* this+0x10 */ class CHash m_fName;
  /* this+0x110 */ unsigned char * m_fileImage;
  /* this+0x114 */ int m_isDecompress;
}

struct _AILSOUNDINFO {
  /* this+0x0 */ long format;
  /* this+0x4 */ const void * data_ptr;
  /* this+0x8 */ unsigned long data_len;
  /* this+0xc */ unsigned long rate;
  /* this+0x10 */ long bits;
  /* this+0x14 */ long channels;
  /* this+0x18 */ unsigned long samples;
  /* this+0x1c */ unsigned long block_size;
  /* this+0x20 */ const void * initial_ptr;
}

class std::vector<SprImg *,std::allocator<SprImg *> > {
  /* this+0x0 */ class std::allocator<SprImg *> allocator;
  /* this+0x4 */ struct SprImg * * _First;
  /* this+0x8 */ struct SprImg * * _Last;
  /* this+0xc */ struct SprImg * * _End;
}

struct CSprRes::Load::__unnamed {
  /* this+0x0 */ unsigned short cx;
  /* this+0x2 */ unsigned short cy;
}

class CFlare {
  /* this+0x0 */ struct Flare[0xc] m_Flare;
  /* this+0x1e0 */ unsigned long[0xc] m_flareColor;
  /* this+0x210 */ char[0x104] m_strTexName;
  /* this+0x314 */ struct vector3d m_vLightPt;
}

struct Flare {
  /* this+0x0 */ int wType;
  /* this+0x4 */ float fLoc;
  /* this+0x8 */ float fScale;
  /* this+0xc */ float r;
  /* this+0x10 */ float g;
  /* this+0x14 */ float b;
  /* this+0x18 */ struct vector3d vPositionPt;
  /* this+0x24 */ float fRenderSize;
}

class CSkyBox {
  /* this+0x0 */ struct tlvertex3d[0xa] m_pvWall;
  /* this+0x140 */ float m_fLoopRotY;
  /* this+0x144 */ class CFlare m_flare;
}

class CSkyBoxEllipse {
  /* this+0x0 */ class C3dModelRes * m_res;
  /* this+0x4 */ class C3dActor * m_sky;
  /* this+0x8 */ float m_fLoopRotX;
  /* this+0xc */ class CFlare m_flare;
}

struct granny_data_type_definition {
  /* this+0x0 */ enum granny_member_type Type;
  /* this+0x4 */ const char * Name;
  /* this+0x8 */ struct granny_data_type_definition * ReferenceType;
  /* this+0xc */ int ArrayWidth;
  /* this+0x10 */ int[0x3] Extra;
  /* this+0x1c */ unsigned int TraversalID;
}

class C3dAnimModelRes {
  /* this+0x4 */ int m_lockCnt;
  /* this+0x8 */ unsigned long m_timeStamp;
  /* this+0xc */ int m_extIndex;
  /* this+0x10 */ class CHash m_fName;
  /* this+0x110 */ int m_numMaterials;
  /* this+0x114 */ struct MaterialInfo * m_material;
  /* this+0x118 */ class std::list<C3dAnimNodeRes *,std::allocator<C3dAnimNodeRes *> > m_objectList;
  /* this+0x124 */ class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_rootObjList;
  /* this+0x130 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > name;
  /* this+0x140 */ int m_shade;
  /* this+0x144 */ int m_numFrame;
  /* this+0x148 */ int m_tickPerFrame;
  /* this+0x14c */ float m_zoom;
  /* this+0x150 */ int m_isShaded;
  /* this+0x154 */ struct vector3d m_pivot;
  /* this+0x160 */ int m_alpha;
}

struct C3dAnimNodeRes {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > name;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > parentname;
  /* this+0x20 */ class C3dAnimModelRes * model;
  /* this+0x24 */ struct C3dAnimNodeRes * parent;
  /* this+0x28 */ class std::list<C3dAnimNodeRes *,std::allocator<C3dAnimNodeRes *> > child;
  /* this+0x34 */ int m_numVertices;
  /* this+0x38 */ int m_numTVertices;
  /* this+0x3c */ int m_numFaces;
  /* this+0x40 */ int m_numTextures;
  /* this+0x44 */ struct faceLight * m_faceLight;
  /* this+0x48 */ struct C3dFrameState * m_frames;
  /* this+0x4c */ struct face3d * m_faces;
  /* this+0x50 */ class CTexture * * m_textures;
  /* this+0x54 */ int m_tvertIdentity;
}

struct MaterialInfo {
  /* this+0x0 */ char[0x80] name;
  /* this+0x80 */ int numSubMtls;
  /* this+0x84 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > * subMaterials;
}

class std::list<C3dAnimNodeRes *,std::allocator<C3dAnimNodeRes *> > {
  /* this+0x0 */ class std::allocator<C3dAnimNodeRes *> allocator;
  /* this+0x4 */ struct std::list<C3dAnimNodeRes *,std::allocator<C3dAnimNodeRes *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

struct granny_control {
}

struct granny_mesh_binding {
}

struct HairInfo {
  /* this+0x0 */ int nPartMeshIdx;
  /* this+0x4 */ int nSubMeshIdx;
  /* this+0x8 */ struct matrix poseMat;
  /* this+0x38 */ struct vector3d poseLoc;
}

struct granny_skeleton {
  /* this+0x0 */ char * Name;
  /* this+0x4 */ int BoneCount;
  /* this+0x8 */ struct granny_bone * Bones;
}

struct GrannyTexture {
  /* this+0x0 */ const char * Name;
  /* this+0x4 */ class CTexture * tex;
}

struct granny_texture {
  /* this+0x0 */ char * FromFileName;
  /* this+0x4 */ int TextureType;
  /* this+0x8 */ int Width;
  /* this+0xc */ int Height;
  /* this+0x10 */ int Encoding;
  /* this+0x14 */ int SubFormat;
  /* this+0x18 */ struct granny_pixel_layout Layout;
  /* this+0x3c */ int ImageCount;
  /* this+0x40 */ struct granny_texture_image * Images;
  /* this+0x44 */ struct granny_variant ExtendedData;
}

struct granny_material {
  /* this+0x0 */ char * Name;
  /* this+0x4 */ int MapCount;
  /* this+0x8 */ struct granny_material_map * Maps;
  /* this+0xc */ struct granny_texture * Texture;
  /* this+0x10 */ struct granny_variant ExtendedData;
}

class C3dMesh {
  /* this+0x0 */ int m_numVert;
  /* this+0x4 */ int m_numFace;
  /* this+0x8 */ int m_numTVert;
  /* this+0xc */ struct vector3d * m_vert;
  /* this+0x10 */ struct vector3d * m_faceNormal;
  /* this+0x14 */ struct vector3d * m_vertNormal;
  /* this+0x18 */ struct tvertex3d * m_tvert;
  /* this+0x1c */ struct face3d * m_face;
  /* this+0x20 */ class C3dMesh * m_parent;
  /* this+0x24 */ class std::vector<int,std::allocator<int> >[0x20] m_shadeGroup;
  /* this+0x224 */ class CDynamicVB m_vb;
}

class std::list<C3dNodeRes *,std::allocator<C3dNodeRes *> > {
  /* this+0x0 */ class std::allocator<C3dNodeRes *> allocator;
  /* this+0x4 */ struct std::list<C3dNodeRes *,std::allocator<C3dNodeRes *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,C3dMesh *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<C3dMesh *> > {
  /* this+0x0 */ class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<71b1a85e _Tr;
}

struct granny_pixel_layout {
  /* this+0x0 */ int BytesPerPixel;
  /* this+0x4 */ int[0x4] ShiftForComponent;
  /* this+0x14 */ int[0x4] BitsForComponent;
}

class C3dPosAnim {
  /* this+0x0 */ class std::vector<posKeyframe,std::allocator<posKeyframe> > m_animdata;
}

class C3dRotAnim {
  /* this+0x0 */ class std::vector<rotKeyframe,std::allocator<rotKeyframe> > m_animdata;
}

class std::list<C3dNodeRes *,std::allocator<C3dNodeRes *> >::const_iterator {
  /* this+0x0 */ struct std::list<C3dNodeRes *,std::allocator<C3dNodeRes *> >::_Node * _Ptr;
}

class std::list<C3dNodeRes *,std::allocator<C3dNodeRes *> >::iterator {
  /* this+0x0 */ struct std::list<C3dNodeRes *,std::allocator<C3dNodeRes *> >::_Node * _Ptr;
}

struct std::list<C3dNodeRes *,std::allocator<C3dNodeRes *> >::_Node {
  /* this+0x0 */ struct std::list<C3dNodeRes *,std::allocator<C3dNodeRes *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<C3dNodeRes *,std::allocator<C3dNodeRes *> >::_Node * _Prev;
  /* this+0x8 */ struct C3dNodeRes * _Value;
}

struct face3d_v11 {
  /* this+0x0 */ unsigned short[0x3] vertindex;
  /* this+0x6 */ unsigned short[0x3] tvertindex;
  /* this+0xc */ unsigned short meshMtlId;
  /* this+0x10 */ int twoSide;
}

struct CVolumeBox_v21 {
  /* this+0x0 */ struct vector3d m_size;
  /* this+0xc */ struct vector3d m_pos;
  /* this+0x18 */ struct vector3d m_rot;
  /* this+0x24 */ int flag;
}

struct CVolumeBox_v11 {
  /* this+0x0 */ struct vector3d m_size;
  /* this+0xc */ struct vector3d m_pos;
  /* this+0x18 */ struct vector3d m_rot;
}

struct C3dFrameState {
  /* this+0x0 */ struct vector3d * m_vertices;
  /* this+0x4 */ struct tvertex3d * m_tvertices;
}

class std::list<int,std::allocator<int> >::const_iterator {
  /* this+0x0 */ struct std::list<int,std::allocator<int> >::_Node * _Ptr;
}

class std::list<int,std::allocator<int> >::iterator {
  /* this+0x0 */ struct std::list<int,std::allocator<int> >::_Node * _Ptr;
}

struct std::list<int,std::allocator<int> >::_Node {
  /* this+0x0 */ struct std::list<int,std::allocator<int> >::_Node * _Next;
  /* this+0x4 */ struct std::list<int,std::allocator<int> >::_Node * _Prev;
  /* this+0x8 */ int _Value;
}

class std::list<int,std::allocator<int> > {
  /* this+0x0 */ class std::allocator<int> allocator;
  /* this+0x4 */ struct std::list<int,std::allocator<int> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<C3dAnimNodeRes *,std::allocator<C3dAnimNodeRes *> >::const_iterator {
  /* this+0x0 */ struct std::list<C3dAnimNodeRes *,std::allocator<C3dAnimNodeRes *> >::_Node * _Ptr;
}

class std::list<C3dAnimNodeRes *,std::allocator<C3dAnimNodeRes *> >::iterator {
  /* this+0x0 */ struct std::list<C3dAnimNodeRes *,std::allocator<C3dAnimNodeRes *> >::_Node * _Ptr;
}

struct std::list<C3dAnimNodeRes *,std::allocator<C3dAnimNodeRes *> >::_Node {
  /* this+0x0 */ struct std::list<C3dAnimNodeRes *,std::allocator<C3dAnimNodeRes *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<C3dAnimNodeRes *,std::allocator<C3dAnimNodeRes *> >::_Node * _Prev;
  /* this+0x8 */ struct C3dAnimNodeRes * _Value;
}

struct granny_file_info {
  /* this+0x0 */ struct granny_string_table * FileStringTable;
  /* this+0x4 */ struct granny_art_tool_info * ArtToolInfo;
  /* this+0x8 */ struct granny_exporter_info * ExporterInfo;
  /* this+0xc */ char * FromFileName;
  /* this+0x10 */ int TextureCount;
  /* this+0x14 */ struct granny_texture * * Textures;
  /* this+0x18 */ int MaterialCount;
  /* this+0x1c */ struct granny_material * * Materials;
  /* this+0x20 */ int SkeletonCount;
  /* this+0x24 */ struct granny_skeleton * * Skeletons;
  /* this+0x28 */ int VertexDataCount;
  /* this+0x2c */ struct granny_vertex_data * * VertexDatas;
  /* this+0x30 */ int TriTopologyCount;
  /* this+0x34 */ struct granny_tri_topology * * TriTopologies;
  /* this+0x38 */ int MeshCount;
  /* this+0x3c */ struct granny_mesh * * Meshes;
  /* this+0x40 */ int ModelCount;
  /* this+0x44 */ struct granny_model * * Models;
  /* this+0x48 */ int TrackGroupCount;
  /* this+0x4c */ struct granny_track_group * * TrackGroups;
  /* this+0x50 */ int AnimationCount;
  /* this+0x54 */ struct granny_animation * * Animations;
}

struct _W3D_TLVERTEX {
  /* this+0x0 */ float sx;
  /* this+0x4 */ float sy;
  /* this+0x8 */ float sz;
  /* this+0xc */ float rhw;
  /* this+0x10 */ unsigned long color;
  /* this+0x14 */ unsigned long specular;
  /* this+0x18 */ float tu;
  /* this+0x1c */ float tv;
}

class std::allocator<posKeyframe> {
}

class std::allocator<C3dAnimNodeRes *> {
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x10 */ class C3dMesh * second;
}

class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<ec889668 {
  /* this+0x0 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<6f39f99e * _Ptr;
}

class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<71b1a85e {
      /* this+0x0 */ class std::allocator<C3dMesh *> allocator;
  /* this+0x1 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > key_compare;
  /* this+0x4 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<6f39f99e * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<30aa2000 {
  /* this+0x0 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<6f39f99e * _Ptr;
}

struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<6f39f99e {
  /* this+0x0 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<6f39f99e * _Left;
  /* this+0x4 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<6f39f99e * _Parent;
  /* this+0x8 */ struct std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<6f39f99e * _Right;
  /* this+0xc */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *> _Value;
  /* this+0x20 */ enum std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<d630a6e9 _Color;
}

struct std::pair<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,std::char_traits<char>,std::34f63beb {
  /* this+0x0 */ class std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<ec889668 first;
  /* this+0x4 */ unsigned char second;
}

class std::vector<std::vector<ImfData,std::allocator<ImfData> >,std::allocator<std::vector<ImfData,std::allocator<ImfData> > > > {
  /* this+0x0 */ class std::allocator<std::vector<ImfData,std::allocator<ImfData> > > allocator;
  /* this+0x4 */ class std::vector<ImfData,std::allocator<ImfData> > * _First;
  /* this+0x8 */ class std::vector<ImfData,std::allocator<ImfData> > * _Last;
  /* this+0xc */ class std::vector<ImfData,std::allocator<ImfData> > * _End;
}

class std::vector<ImfData,std::allocator<ImfData> > {
  /* this+0x0 */ class std::allocator<ImfData> allocator;
  /* this+0x4 */ struct ImfData * _First;
  /* this+0x8 */ struct ImfData * _Last;
  /* this+0xc */ struct ImfData * _End;
}

class std::allocator<ImfData> {
}

struct ImfData {
  /* this+0x0 */ class std::vector<int,std::allocator<int> > m_Priority;
  /* this+0x10 */ class std::vector<int,std::allocator<int> > m_cx;
  /* this+0x20 */ class std::vector<int,std::allocator<int> > m_cy;
}

class std::reverse_iterator<ImfData const *,ImfData,ImfData const &,ImfData const *,int> {
}

class std::reverse_iterator<ImfData *,ImfData,ImfData &,ImfData *,int> {
}

struct LMIndex {
  /* this+0x0 */ unsigned long a;
  /* this+0x4 */ unsigned long r;
  /* this+0x8 */ unsigned long g;
  /* this+0xc */ unsigned long b;
}

struct ColorChannel {
  /* this+0x0 */ unsigned char[0x28] m_buffer;
}

class CEZeffectRes {
  /* this+0x4 */ int m_lockCnt;
  /* this+0x8 */ unsigned long m_timeStamp;
  /* this+0xc */ int m_extIndex;
  /* this+0x10 */ class CHash m_fName;
  /* this+0x110 */ struct KANICLIP m_aniClips;
  /* this+0xd320 */ int m_nMaxLayer;
  /* this+0xd324 */ class CFile m_fp;
}

struct KANICLIP {
  /* this+0x0 */ int nFPS;
  /* this+0x4 */ int cFrame;
  /* this+0x8 */ int cLayer;
  /* this+0xc */ int cEndLayer;
  /* this+0x10 */ struct KAC_LAYER[0x3c] aLayer;
}

class CEmblemRes {
  /* this+0x4 */ int m_lockCnt;
  /* this+0x8 */ unsigned long m_timeStamp;
  /* this+0xc */ int m_extIndex;
  /* this+0x10 */ class CHash m_fName;
  /* this+0x110 */ class CBitmapRes m_bitmap;
}

struct tagBITMAPINFOHEADER {
  /* this+0x0 */ unsigned long biSize;
  /* this+0x4 */ long biWidth;
  /* this+0x8 */ long biHeight;
  /* this+0xc */ unsigned short biPlanes;
  /* this+0xe */ unsigned short biBitCount;
  /* this+0x10 */ unsigned long biCompression;
  /* this+0x14 */ unsigned long biSizeImage;
  /* this+0x18 */ long biXPelsPerMeter;
  /* this+0x1c */ long biYPelsPerMeter;
  /* this+0x20 */ unsigned long biClrUsed;
  /* this+0x24 */ unsigned long biClrImportant;
}

struct tagRGBQUAD {
  /* this+0x0 */ unsigned char rgbBlue;
  /* this+0x1 */ unsigned char rgbGreen;
  /* this+0x2 */ unsigned char rgbRed;
  /* this+0x3 */ unsigned char rgbReserved;
}

struct tagBITMAPINFO {
  /* this+0x0 */ struct tagBITMAPINFOHEADER bmiHeader;
  /* this+0x28 */ struct tagRGBQUAD[0x1] bmiColors;
}

struct tagBITMAPFILEHEADER {
  /* this+0x0 */ unsigned short bfType;
  /* this+0x2 */ unsigned long bfSize;
  /* this+0x6 */ unsigned short bfReserved1;
  /* this+0x8 */ unsigned short bfReserved2;
  /* this+0xa */ unsigned long bfOffBits;
}

struct CBitmapRes::LoadTGAData::TargaHeader {
  /* this+0x0 */ unsigned char IDLength;
  /* this+0x1 */ unsigned char ColormapType;
  /* this+0x2 */ unsigned char ImageType;
  /* this+0x3 */ unsigned char[0x5] ColormapSpecification;
  /* this+0x8 */ unsigned short XOrigin;
  /* this+0xa */ unsigned short YOrigin;
  /* this+0xc */ unsigned short ImageWidth;
  /* this+0xe */ unsigned short ImageHeight;
  /* this+0x10 */ unsigned char PixelDepth;
  /* this+0x11 */ unsigned char ImageDescriptor;
}

struct _JPEG_PROPERTIES {
  /* this+0x0 */ enum _IJLIOTYPE iotype;
  /* this+0x4 */ struct _IJL_RECT roi;
  /* this+0x14 */ enum _DCTTYPE dcttype;
  /* this+0x18 */ enum _FAST_MCU_PROCESSING_TYPE fast_processing;
  /* this+0x1c */ int interrupt;
  /* this+0x20 */ unsigned char * DIBBytes;
  /* this+0x24 */ int DIBWidth;
  /* this+0x28 */ int DIBHeight;
  /* this+0x2c */ int DIBPadBytes;
  /* this+0x30 */ int DIBChannels;
  /* this+0x34 */ enum _IJL_COLOR DIBColor;
  /* this+0x38 */ enum _IJL_JPGSUBSAMPLING DIBSubsampling;
  /* this+0x3c */ int DIBLineBytes;
  /* this+0x40 */ const char * JPGFile;
  /* this+0x44 */ unsigned char * JPGBytes;
  /* this+0x48 */ int JPGSizeBytes;
  /* this+0x4c */ int JPGWidth;
  /* this+0x50 */ int JPGHeight;
  /* this+0x54 */ int JPGChannels;
  /* this+0x58 */ enum _IJL_COLOR JPGColor;
  /* this+0x5c */ enum _IJL_JPGSUBSAMPLING JPGSubsampling;
  /* this+0x60 */ int JPGThumbWidth;
  /* this+0x64 */ int JPGThumbHeight;
  /* this+0x68 */ int cconversion_reqd;
  /* this+0x6c */ int upsampling_reqd;
  /* this+0x70 */ int jquality;
  /* this+0x74 */ int jinterleaveType;
  /* this+0x78 */ int numxMCUs;
  /* this+0x7c */ int numyMCUs;
  /* this+0x80 */ int nqtables;
  /* this+0x84 */ int maxquantindex;
  /* this+0x88 */ int nhuffActables;
  /* this+0x8c */ int nhuffDctables;
  /* this+0x90 */ int maxhuffindex;
  /* this+0x94 */ struct _QUANT_TABLE[0x4] jFmtQuant;
  /* this+0x364 */ struct _HUFFMAN_TABLE[0x4] jFmtAcHuffman;
  /* this+0x1d24 */ struct _HUFFMAN_TABLE[0x4] jFmtDcHuffman;
  /* this+0x36e4 */ short *[0x4] jEncFmtQuant;
  /* this+0x36f4 */ struct _HUFFMAN_TABLE *[0x4] jEncFmtAcHuffman;
  /* this+0x3704 */ struct _HUFFMAN_TABLE *[0x4] jEncFmtDcHuffman;
  /* this+0x3714 */ int use_external_qtables;
  /* this+0x3718 */ int use_external_htables;
  /* this+0x371c */ struct _JPEGQuantTable[0x4] rawquanttables;
  /* this+0x373c */ struct _JPEGHuffTable[0x8] rawhufftables;
  /* this+0x379c */ char[0x4] HuffIdentifierAC;
  /* this+0x37a0 */ char[0x4] HuffIdentifierDC;
  /* this+0x37a4 */ struct _FRAME jframe;
  /* this+0x37dc */ int needframe;
  /* this+0x37e0 */ struct _SCAN * jscan;
  /* this+0x37e8 */ struct _STATE state;
  /* this+0x4828 */ int SawAdobeMarker;
  /* this+0x482c */ int AdobeXform;
  /* this+0x4830 */ struct _ENTROPYSTRUCT * rowoffsets;
  /* this+0x4834 */ unsigned char * MCUBuf;
  /* this+0x4838 */ unsigned char[0x5a0] tMCUBuf;
  /* this+0x4dd8 */ enum _PROCESSOR_TYPE processor_type;
  /* this+0x4ddc */ struct _RAW_DATA_TYPES_STATE * raw_coefs;
  /* this+0x4de0 */ int progressive_found;
  /* this+0x4de4 */ short * coef_buffer;
  /* this+0x4de8 */ enum _UPSAMPLING_TYPE upsampling_type;
  /* this+0x4dec */ struct _SAMPLING_STATE * sampling_state_ptr;
  /* this+0x4df0 */ unsigned short AdobeVersion;
  /* this+0x4df2 */ unsigned short AdobeFlags0;
  /* this+0x4df4 */ unsigned short AdobeFlags1;
  /* this+0x4df8 */ int jfif_app0_detected;
  /* this+0x4dfc */ unsigned short jfif_app0_version;
  /* this+0x4dfe */ unsigned char jfif_app0_units;
  /* this+0x4e00 */ unsigned short jfif_app0_Xdensity;
  /* this+0x4e02 */ unsigned short jfif_app0_Ydensity;
  /* this+0x4e04 */ char * jpeg_comment;
  /* this+0x4e08 */ unsigned short jpeg_comment_size;
}

struct _JPEG_CORE_PROPERTIES {
  /* this+0x0 */ int UseJPEGPROPERTIES;
  /* this+0x4 */ unsigned char * DIBBytes;
  /* this+0x8 */ int DIBWidth;
  /* this+0xc */ int DIBHeight;
  /* this+0x10 */ int DIBPadBytes;
  /* this+0x14 */ int DIBChannels;
  /* this+0x18 */ enum _IJL_COLOR DIBColor;
  /* this+0x1c */ enum _IJL_JPGSUBSAMPLING DIBSubsampling;
  /* this+0x20 */ const char * JPGFile;
  /* this+0x24 */ unsigned char * JPGBytes;
  /* this+0x28 */ int JPGSizeBytes;
  /* this+0x2c */ int JPGWidth;
  /* this+0x30 */ int JPGHeight;
  /* this+0x34 */ int JPGChannels;
  /* this+0x38 */ enum _IJL_COLOR JPGColor;
  /* this+0x3c */ enum _IJL_JPGSUBSAMPLING JPGSubsampling;
  /* this+0x40 */ int JPGThumbWidth;
  /* this+0x44 */ int JPGThumbHeight;
  /* this+0x48 */ int cconversion_reqd;
  /* this+0x4c */ int upsampling_reqd;
  /* this+0x50 */ int jquality;
  /* this+0x58 */ struct _JPEG_PROPERTIES jprops;
}

struct CAttrCell {
  /* this+0x0 */ float h1;
  /* this+0x4 */ float h2;
  /* this+0x8 */ float h3;
  /* this+0xc */ float h4;
  /* this+0x10 */ int flag;
}

class std::vector<CAttrCell,std::allocator<CAttrCell> > {
  /* this+0x0 */ class std::allocator<CAttrCell> allocator;
  /* this+0x4 */ struct CAttrCell * _First;
  /* this+0x8 */ struct CAttrCell * _Last;
  /* this+0xc */ struct CAttrCell * _End;
}

struct CAction {
  /* this+0x0 */ class std::vector<CMotion,std::allocator<CMotion> > motions;
}

class std::vector<CAction,std::allocator<CAction> > {
  /* this+0x0 */ class std::allocator<CAction> allocator;
  /* this+0x4 */ struct CAction * _First;
  /* this+0x8 */ struct CAction * _Last;
  /* this+0xc */ struct CAction * _End;
}

class CRmaRes {
  /* this+0x4 */ int m_lockCnt;
  /* this+0x8 */ unsigned long m_timeStamp;
  /* this+0xc */ int m_extIndex;
  /* this+0x10 */ class CHash m_fName;
  /* this+0x110 */ class std::vector<CRmaRes::FrameNum,std::allocator<CRmaRes::FrameNum> > m_actionList;
  /* this+0x120 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_rsxNameList;
  /* this+0x130 */ class std::vector<int,std::allocator<int> > m_rsxNameIndexList;
  /* this+0x140 */ float m_interiorZoom;
  /* this+0x144 */ float m_shadowZoom;
  /* this+0x148 */ int m_interiorOffsetX;
  /* this+0x14c */ int m_interiorOffsetY;
  /* this+0x150 */ int m_interiorStartFrame;
  /* this+0x154 */ int m_interiorEndFrame;
}

struct CRmaRes::FrameNum {
  /* this+0x0 */ int startFrame;
  /* this+0x4 */ int endFrame;
  /* this+0x8 */ int motionSpeed;
  /* this+0xc */ class std::vector<int,std::allocator<int> > attackFrameList;
}

class std::vector<CRmaRes::FrameNum,std::allocator<CRmaRes::FrameNum> > {
  /* this+0x0 */ class std::allocator<CRmaRes::FrameNum> allocator;
  /* this+0x4 */ struct CRmaRes::FrameNum * _First;
  /* this+0x8 */ struct CRmaRes::FrameNum * _Last;
  /* this+0xc */ struct CRmaRes::FrameNum * _End;
}

class std::locale::_Locimp {
  /* this+0x4 */ unsigned int _Refs;
  /* this+0x8 */ class std::locale::facet * * _Fv;
  /* this+0xc */ unsigned int _Nfv;
  /* this+0x10 */ int _Cat;
  /* this+0x14 */ unsigned char _Xpar;
  /* this+0x18 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Name;
    }

struct CActRes::Load::__unnamed {
  /* this+0x0 */ unsigned short id;
  /* this+0x2 */ unsigned short ver;
  /* this+0x4 */ unsigned short count;
  /* this+0x6 */ char[0xa] reserved;
}

struct CActRes::Load::CSprOldClip {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int sprIndex;
  /* this+0xc */ int flags;
  /* this+0x10 */ unsigned char r;
  /* this+0x11 */ unsigned char g;
  /* this+0x12 */ unsigned char b;
  /* this+0x13 */ unsigned char a;
  /* this+0x14 */ float zoom;
  /* this+0x18 */ int angle;
  /* this+0x1c */ int clipType;
}

struct CAttachPointInfo {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int m_attr;
}

class std::strstreambuf {
  /* this+0x4 */ char * _Gbeg;
  /* this+0x8 */ char * _Pbeg;
  /* this+0xc */ char * * _IGbeg;
  /* this+0x10 */ char * * _IPbeg;
  /* this+0x14 */ char * _Gnext;
  /* this+0x18 */ char * _Pnext;
  /* this+0x1c */ char * * _IGnext;
  /* this+0x20 */ char * * _IPnext;
  /* this+0x24 */ int _Gcnt;
  /* this+0x28 */ int _Pcnt;
  /* this+0x2c */ int * _IGcnt;
  /* this+0x30 */ int * _IPcnt;
  /* this+0x34 */ class std::locale _Loc;
  /* this+0x38 */ char * _Pendsave;
  /* this+0x3c */ char * _Seekhigh;
  /* this+0x40 */ int _Alsize;
  /* this+0x44 */ int _Strmode;
  /* this+0x48 */ function  * _Palloc;
  /* this+0x4c */ function  * _Pfree;
}

class std::vector<CSprClip,std::allocator<CSprClip> > {
  /* this+0x0 */ class std::allocator<CSprClip> allocator;
  /* this+0x4 */ struct CSprClip * _First;
  /* this+0x8 */ struct CSprClip * _Last;
  /* this+0xc */ struct CSprClip * _End;
}

class std::allocator<CSprClip> {
}

class std::vector<CAttachPointInfo,std::allocator<CAttachPointInfo> > {
  /* this+0x0 */ class std::allocator<CAttachPointInfo> allocator;
  /* this+0x4 */ struct CAttachPointInfo * _First;
  /* this+0x8 */ struct CAttachPointInfo * _Last;
  /* this+0xc */ struct CAttachPointInfo * _End;
}

class std::allocator<CAttachPointInfo> {
}

class std::vector<CMotion,std::allocator<CMotion> > {
  /* this+0x0 */ class std::allocator<CMotion> allocator;
  /* this+0x4 */ struct CMotion * _First;
  /* this+0x8 */ struct CMotion * _Last;
  /* this+0xc */ struct CMotion * _End;
}

class std::allocator<CMotion> {
}

class CSequenceRandomGenerator {
  /* this+0x4 */ int m_holdrand;
  /* this+0x8 */ int m_mulfactor;
  /* this+0xc */ int m_addfactor;
  /* this+0x10 */ struct CSequenceRandomGenerator::tagGenerator m_Generator;
}

class CPacketQueue {
  /* this+0x0 */ char * m_buf;
  /* this+0x4 */ int m_frontPos;
  /* this+0x8 */ int m_rearPos;
  /* this+0xc */ class std::vector<char,std::allocator<char> > m_buffer;
}

class std::vector<char,std::allocator<char> > {
  /* this+0x0 */ class std::allocator<char> allocator;
  /* this+0x4 */ char * _First;
  /* this+0x8 */ char * _Last;
  /* this+0xc */ char * _End;
}

class std::map<int,int,std::less<int>,std::allocator<int> > {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> > _Tr;
}

struct std::pair<int const ,int> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ int second;
}

struct std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn {
}

class std::map<int,int,std::less<int>,std::allocator<int> >::value_compare {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> > {
      /* this+0x0 */ class std::allocator<int> allocator;
  /* this+0x1 */ struct std::less<int> key_compare;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

class std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> >::iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> >::_Node * _Ptr;
}

class std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> >::_Node * _Ptr;
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> >::iterator,std::pair<int const ,int>,std::pair<int const ,int> &,std::pair7626b17e {
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> >::const_iterator,std::pair<int const ,int>,std::pair<int const ,int> const276619d2 {
}

struct std::pair<std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

struct std::pair<std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> >::iterator,std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<ibec8cb27 {
}

struct std::pair<std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> >::const_iterator,std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocddf9e069 {
}

struct std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> >::_Node {
  /* this+0x0 */ struct std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,int> _Value;
  /* this+0x14 */ enum std::_Tree<int,std::pair<int const ,int>,std::map<int,int,std::less<int>,std::allocator<int> >::_Kfn,std::less<int>,std::allocator<int> >::_Redbl _Color;
}

class EncClient {
  /* this+0x0 */ class std::list<coder_data,std::allocator<coder_data> > m_decoderData;
  /* this+0xc */ class std::list<coder_data,std::allocator<coder_data> > m_encoderData;
  /* this+0x18 */ unsigned char * m_coderDestAddr;
}

struct coder_packet {
  /* this+0x0 */ short len;
  /* this+0x2 */ short random;
}

struct coder_data {
  /* this+0x0 */ unsigned long[0x10000] temp;
  /* this+0x40000 */ unsigned char[0x1000] func;
}

class std::list<coder_data,std::allocator<coder_data> >::iterator {
  /* this+0x0 */ struct std::list<coder_data,std::allocator<coder_data> >::_Node * _Ptr;
}

struct _DIOBJECTDATAFORMAT {
  /* this+0x0 */ const struct _GUID * pguid;
  /* this+0x4 */ unsigned long dwOfs;
  /* this+0x8 */ unsigned long dwType;
  /* this+0xc */ unsigned long dwFlags;
}

struct _DIDATAFORMAT {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwObjSize;
  /* this+0x8 */ unsigned long dwFlags;
  /* this+0xc */ unsigned long dwDataSize;
  /* this+0x10 */ unsigned long dwNumObjs;
  /* this+0x14 */ struct _DIOBJECTDATAFORMAT * rgodf;
}

struct _DIMOUSESTATE {
  /* this+0x0 */ long lX;
  /* this+0x4 */ long lY;
  /* this+0x8 */ long lZ;
  /* this+0xc */ unsigned char[0x4] rgbButtons;
}

struct WSAData {
  /* this+0x0 */ unsigned short wVersion;
  /* this+0x2 */ unsigned short wHighVersion;
  /* this+0x4 */ char[0x101] szDescription;
  /* this+0x105 */ char[0x81] szSystemStatus;
  /* this+0x186 */ unsigned short iMaxSockets;
  /* this+0x188 */ unsigned short iMaxUdpDg;
  /* this+0x18c */ char * lpVendorInfo;
}

class CConnection {
  /* this+0x4 */ unsigned int m_socket;
  /* this+0x8 */ struct sockaddr_in m_addr;
  /* this+0x18 */ unsigned char m_bBlock;
  /* this+0x1c */ unsigned long m_dwTime;
  /* this+0x20 */ class CPacketQueue m_sendQueue;
  /* this+0x3c */ class CPacketQueue m_recvQueue;
  /* this+0x58 */ class CPacketQueue m_blockQueue;
        }

struct fd_set {
  /* this+0x0 */ unsigned int fd_count;
  /* this+0x4 */ unsigned int[0x40] fd_array;
}

struct timeval {
  /* this+0x0 */ long tv_sec;
  /* this+0x4 */ long tv_usec;
}

class CRagConnection {
  /* this+0x4 */ unsigned int m_socket;
  /* this+0x8 */ struct sockaddr_in m_addr;
  /* this+0x18 */ unsigned char m_bBlock;
  /* this+0x1c */ unsigned long m_dwTime;
  /* this+0x20 */ class CPacketQueue m_sendQueue;
  /* this+0x3c */ class CPacketQueue m_recvQueue;
  /* this+0x58 */ class CPacketQueue m_blockQueue;
        }

struct IDirectDrawSurface {
}

struct _DDBLTFX {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwDDFX;
  /* this+0x8 */ unsigned long dwROP;
  /* this+0xc */ unsigned long dwDDROP;
  /* this+0x10 */ unsigned long dwRotationAngle;
  /* this+0x14 */ unsigned long dwZBufferOpCode;
  /* this+0x18 */ unsigned long dwZBufferLow;
  /* this+0x1c */ unsigned long dwZBufferHigh;
  /* this+0x20 */ unsigned long dwZBufferBaseDest;
  /* this+0x24 */ unsigned long dwZDestConstBitDepth;
  /* this+0x28 */ unsigned long dwZDestConst;
  /* this+0x28 */ struct IDirectDrawSurface * lpDDSZBufferDest;
  /* this+0x2c */ unsigned long dwZSrcConstBitDepth;
  /* this+0x30 */ unsigned long dwZSrcConst;
  /* this+0x30 */ struct IDirectDrawSurface * lpDDSZBufferSrc;
  /* this+0x34 */ unsigned long dwAlphaEdgeBlendBitDepth;
  /* this+0x38 */ unsigned long dwAlphaEdgeBlend;
  /* this+0x3c */ unsigned long dwReserved;
  /* this+0x40 */ unsigned long dwAlphaDestConstBitDepth;
  /* this+0x44 */ unsigned long dwAlphaDestConst;
  /* this+0x44 */ struct IDirectDrawSurface * lpDDSAlphaDest;
  /* this+0x48 */ unsigned long dwAlphaSrcConstBitDepth;
  /* this+0x4c */ unsigned long dwAlphaSrcConst;
  /* this+0x4c */ struct IDirectDrawSurface * lpDDSAlphaSrc;
  /* this+0x50 */ unsigned long dwFillColor;
  /* this+0x50 */ unsigned long dwFillDepth;
  /* this+0x50 */ unsigned long dwFillPixel;
  /* this+0x50 */ struct IDirectDrawSurface * lpDDSPattern;
  /* this+0x54 */ struct _DDCOLORKEY ddckDestColorkey;
  /* this+0x5c */ struct _DDCOLORKEY ddckSrcColorkey;
}

class CSurfaceWallpaper {
  /* this+0x4 */ unsigned long m_w;
  /* this+0x8 */ unsigned long m_h;
  /* this+0xc */ struct IDirectDrawSurface7 * m_pddsSurface;
}

class CDynamicVB {
  /* this+0x0 */ unsigned long m_vertCount;
  /* this+0x4 */ unsigned long m_vertSize;
  /* this+0x8 */ unsigned long m_vertOffset;
  /* this+0xc */ struct IDirect3DVertexBuffer7 * m_pVB;
}

struct IDirect3DVertexBuffer7 {
}

struct RPRaw {
  /* this+0x0 */ struct matrix world;
  /* this+0x30 */ class CDynamicVB * vb;
  /* this+0x34 */ int vertStart;
  /* this+0x38 */ int numVerts;
  /* this+0x3c */ unsigned short * indices;
  /* this+0x40 */ unsigned long numIndices;
  /* this+0x44 */ class CTexture * tex;
  /* this+0x48 */ class CTexture * tex2;
}

struct _D3DMATRIX {
  /* this+0x0 */ float _11;
  /* this+0x4 */ float _12;
  /* this+0x8 */ float _13;
  /* this+0xc */ float _14;
  /* this+0x10 */ float _21;
  /* this+0x14 */ float _22;
  /* this+0x18 */ float _23;
  /* this+0x1c */ float _24;
  /* this+0x20 */ float _31;
  /* this+0x24 */ float _32;
  /* this+0x28 */ float _33;
  /* this+0x2c */ float _34;
  /* this+0x30 */ float _41;
  /* this+0x34 */ float _42;
  /* this+0x38 */ float _43;
  /* this+0x3c */ float _44;
  /* this+0x0 */ float[0x4][0x4] m;
}

struct vector4d {
  /* this+0x0 */ float x;
  /* this+0x4 */ float y;
  /* this+0x8 */ float z;
  /* this+0xc */ float oow;
}

struct RPLmFace {
  /* this+0x0 */ struct lmtlvertex3d * lmverts;
  /* this+0x4 */ int numVerts;
  /* this+0x8 */ unsigned short * indices;
  /* this+0xc */ unsigned long numIndices;
  /* this+0x10 */ class CTexture * tex;
  /* this+0x14 */ class CTexture * tex2;
  /* this+0x18 */ enum _D3DPRIMITIVETYPE primType;
}

struct RPLmQuadFace {
  /* this+0x0 */ struct lmtlvertex3d * lmverts;
  /* this+0x4 */ int numVerts;
  /* this+0x8 */ unsigned short * indices;
  /* this+0xc */ unsigned long numIndices;
  /* this+0x10 */ class CTexture * tex;
  /* this+0x14 */ class CTexture * tex2;
  /* this+0x18 */ enum _D3DPRIMITIVETYPE primType;
  /* this+0x1c */ struct lmtlvertex3d[0x4] m_lmverts;
}

struct CharPrtLess {
}

struct lmtlvertex3d {
  /* this+0x0 */ struct tlvertex3d vert;
  /* this+0x20 */ struct texCoor lmcoord;
}

class std::list<CacheSurface,std::allocator<CacheSurface> > {
  /* this+0x0 */ class std::allocator<CacheSurface> allocator;
  /* this+0x4 */ struct std::list<CacheSurface,std::allocator<CacheSurface> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

struct CacheSurface {
  /* this+0x0 */ class CTexture * tex;
  /* this+0x4 */ int w;
  /* this+0x8 */ int h;
  /* this+0xc */ int texWidth;
  /* this+0x10 */ int texHeight;
  /* this+0x14 */ class std::vector<CacheInfo,std::allocator<CacheInfo> > info;
  /* this+0x24 */ int isLocked;
  /* this+0x28 */ unsigned long lastTime;
}

struct _D3DCOLORVALUE {
  /* this+0x0 */ float r;
  /* this+0x0 */ float dvR;
  /* this+0x4 */ float g;
  /* this+0x4 */ float dvG;
  /* this+0x8 */ float b;
  /* this+0x8 */ float dvB;
  /* this+0xc */ float a;
  /* this+0xc */ float dvA;
}

struct _D3DVECTOR {
  /* this+0x0 */ float x;
  /* this+0x0 */ float dvX;
  /* this+0x4 */ float y;
  /* this+0x4 */ float dvY;
  /* this+0x8 */ float z;
  /* this+0x8 */ float dvZ;
}

struct _D3DLIGHT7 {
  /* this+0x0 */ enum _D3DLIGHTTYPE dltType;
  /* this+0x4 */ struct _D3DCOLORVALUE dcvDiffuse;
  /* this+0x14 */ struct _D3DCOLORVALUE dcvSpecular;
  /* this+0x24 */ struct _D3DCOLORVALUE dcvAmbient;
  /* this+0x34 */ struct _D3DVECTOR dvPosition;
  /* this+0x40 */ struct _D3DVECTOR dvDirection;
  /* this+0x4c */ float dvRange;
  /* this+0x50 */ float dvFalloff;
  /* this+0x54 */ float dvAttenuation0;
  /* this+0x58 */ float dvAttenuation1;
  /* this+0x5c */ float dvAttenuation2;
  /* this+0x60 */ float dvTheta;
  /* this+0x64 */ float dvPhi;
}

struct std::pair<float,RPFace *> {
  /* this+0x0 */ float first;
  /* this+0x4 */ struct RPFace * second;
}

class CDCSurface {
  /* this+0x4 */ class CSurface m_surface;
}

struct RPTriFace {
  /* this+0x0 */ struct tlvertex3d[0x3] verts;
  /* this+0x60 */ class CTexture * tex;
  /* this+0x64 */ unsigned long srcAlphaMode;
  /* this+0x68 */ unsigned long destAlphaMode;
}

class std::list<CTexture *,std::allocator<CTexture *> >::iterator {
  /* this+0x0 */ struct std::list<CTexture *,std::allocator<CTexture *> >::_Node * _Ptr;
}

class std::list<CTexture *,std::allocator<CTexture *> > {
  /* this+0x0 */ class std::allocator<CTexture *> allocator;
  /* this+0x4 */ struct std::list<CTexture *,std::allocator<CTexture *> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::reverse_bidirectional_iterator<std::list<CTexture *,std::allocator<CTexture *> >::iterator,CTexture *,CTexture * &,CTexture * *,int> {
  /* this+0x0 */ class std::list<CTexture *,std::allocator<CTexture *> >::iterator current;
}

class std::vector<RPRaw *,std::allocator<RPRaw *> > {
  /* this+0x0 */ class std::allocator<RPRaw *> allocator;
  /* this+0x4 */ struct RPRaw * * _First;
  /* this+0x8 */ struct RPRaw * * _Last;
  /* this+0xc */ struct RPRaw * * _End;
}

class std::vector<RPFace *,std::allocator<RPFace *> > {
  /* this+0x0 */ class std::allocator<RPFace *> allocator;
  /* this+0x4 */ struct RPFace * * _First;
  /* this+0x8 */ struct RPFace * * _Last;
  /* this+0xc */ struct RPFace * * _End;
}

class std::vector<RPLmFace *,std::allocator<RPLmFace *> > {
  /* this+0x0 */ class std::allocator<RPLmFace *> allocator;
  /* this+0x4 */ struct RPLmFace * * _First;
  /* this+0x8 */ struct RPLmFace * * _Last;
  /* this+0xc */ struct RPLmFace * * _End;
}

class std::vector<std::pair<float,RPFace *>,std::allocator<std::pair<float,RPFace *> > > {
  /* this+0x0 */ class std::allocator<std::pair<float,RPFace *> > allocator;
  /* this+0x4 */ struct std::pair<float,RPFace *> * _First;
  /* this+0x8 */ struct std::pair<float,RPFace *> * _Last;
  /* this+0xc */ struct std::pair<float,RPFace *> * _End;
}

class std::list<RPFace,std::allocator<RPFace> > {
  /* this+0x0 */ class std::allocator<RPFace> allocator;
  /* this+0x4 */ struct std::list<RPFace,std::allocator<RPFace> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<RPFace,std::allocator<RPFace> >::iterator {
  /* this+0x0 */ struct std::list<RPFace,std::allocator<RPFace> >::_Node * _Ptr;
}

class std::list<RPQuadFace,std::allocator<RPQuadFace> > {
  /* this+0x0 */ class std::allocator<RPQuadFace> allocator;
  /* this+0x4 */ struct std::list<RPQuadFace,std::allocator<RPQuadFace> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<RPQuadFace,std::allocator<RPQuadFace> >::iterator {
  /* this+0x0 */ struct std::list<RPQuadFace,std::allocator<RPQuadFace> >::_Node * _Ptr;
}

class std::list<RPLmQuadFace,std::allocator<RPLmQuadFace> > {
  /* this+0x0 */ class std::allocator<RPLmQuadFace> allocator;
  /* this+0x4 */ struct std::list<RPLmQuadFace,std::allocator<RPLmQuadFace> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<RPLmQuadFace,std::allocator<RPLmQuadFace> >::iterator {
  /* this+0x0 */ struct std::list<RPLmQuadFace,std::allocator<RPLmQuadFace> >::_Node * _Ptr;
}

class std::vector<tlvertex3d,std::allocator<tlvertex3d> > {
  /* this+0x0 */ class std::allocator<tlvertex3d> allocator;
  /* this+0x4 */ struct tlvertex3d * _First;
  /* this+0x8 */ struct tlvertex3d * _Last;
  /* this+0xc */ struct tlvertex3d * _End;
}

class std::list<CTexture *,std::allocator<CTexture *> >::const_iterator {
  /* this+0x0 */ struct std::list<CTexture *,std::allocator<CTexture *> >::_Node * _Ptr;
}

struct std::list<CTexture *,std::allocator<CTexture *> >::_Node {
  /* this+0x0 */ struct std::list<CTexture *,std::allocator<CTexture *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<CTexture *,std::allocator<CTexture *> >::_Node * _Prev;
  /* this+0x8 */ class CTexture * _Value;
}

class std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> >::iterator {
  /* this+0x0 */ struct std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> >::_Node * _Ptr;
}

class std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> > {
      /* this+0x0 */ class std::allocator<CTexture *> allocator;
  /* this+0x1 */ struct CharPrtLess key_compare;
  /* this+0x4 */ struct std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> >::_Node * _Head;
  /* this+0x8 */ unsigned char _Multi;
  /* this+0xc */ unsigned int _Size;
}

struct std::pair<std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> >::iterator,bool> {
  /* this+0x0 */ class std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> >::iterator first;
  /* this+0x4 */ unsigned char second;
}

struct std::pair<char const * const,CTexture *> {
  /* this+0x0 */ const char * const first;
  /* this+0x4 */ class CTexture * second;
}

class std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> >::const_iterator {
  /* this+0x0 */ struct std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> >::_Node * _Ptr;
}

struct std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> >::_Node {
  /* this+0x0 */ struct std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> >::_Node * _Right;
  /* this+0xc */ struct std::pair<char const * const,CTexture *> _Value;
  /* this+0x14 */ enum std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> >::_Redbl _Color;
}

class std::vector<CacheInfo,std::allocator<CacheInfo> > {
  /* this+0x0 */ class std::allocator<CacheInfo> allocator;
  /* this+0x4 */ struct CacheInfo * _First;
  /* this+0x8 */ struct CacheInfo * _Last;
  /* this+0xc */ struct CacheInfo * _End;
}

class std::list<CacheSurface,std::allocator<CacheSurface> >::iterator {
  /* this+0x0 */ struct std::list<CacheSurface,std::allocator<CacheSurface> >::_Node * _Ptr;
}

class std::list<CacheSurface,std::allocator<CacheSurface> >::const_iterator {
  /* this+0x0 */ struct std::list<CacheSurface,std::allocator<CacheSurface> >::_Node * _Ptr;
}

struct std::list<CacheSurface,std::allocator<CacheSurface> >::_Node {
  /* this+0x0 */ struct std::list<CacheSurface,std::allocator<CacheSurface> >::_Node * _Next;
  /* this+0x4 */ struct std::list<CacheSurface,std::allocator<CacheSurface> >::_Node * _Prev;
  /* this+0x8 */ struct CacheSurface _Value;
}

class std::list<RPFace,std::allocator<RPFace> >::const_iterator {
  /* this+0x0 */ struct std::list<RPFace,std::allocator<RPFace> >::_Node * _Ptr;
}

struct std::list<RPFace,std::allocator<RPFace> >::_Node {
  /* this+0x0 */ struct std::list<RPFace,std::allocator<RPFace> >::_Node * _Next;
  /* this+0x4 */ struct std::list<RPFace,std::allocator<RPFace> >::_Node * _Prev;
  /* this+0x8 */ struct RPFace _Value;
}

class std::list<RPQuadFace,std::allocator<RPQuadFace> >::const_iterator {
  /* this+0x0 */ struct std::list<RPQuadFace,std::allocator<RPQuadFace> >::_Node * _Ptr;
}

struct std::list<RPQuadFace,std::allocator<RPQuadFace> >::_Node {
  /* this+0x0 */ struct std::list<RPQuadFace,std::allocator<RPQuadFace> >::_Node * _Next;
  /* this+0x4 */ struct std::list<RPQuadFace,std::allocator<RPQuadFace> >::_Node * _Prev;
  /* this+0x8 */ struct RPQuadFace _Value;
}

class std::list<RPLmQuadFace,std::allocator<RPLmQuadFace> >::const_iterator {
  /* this+0x0 */ struct std::list<RPLmQuadFace,std::allocator<RPLmQuadFace> >::_Node * _Ptr;
}

struct std::list<RPLmQuadFace,std::allocator<RPLmQuadFace> >::_Node {
  /* this+0x0 */ struct std::list<RPLmQuadFace,std::allocator<RPLmQuadFace> >::_Node * _Next;
  /* this+0x4 */ struct std::list<RPLmQuadFace,std::allocator<RPLmQuadFace> >::_Node * _Prev;
  /* this+0x8 */ struct RPLmQuadFace _Value;
}

struct CRenderer::RPFaceTexPrtLess {
}

struct std::binary_function<RPFace const *,RPFace const *,bool> {
}

struct CRenderer::RPRawTexPrtLess {
}

struct std::binary_function<RPRaw const *,RPRaw const *,bool> {
}

struct CRenderer::RPLmFaceTexPrtLess {
}

struct std::binary_function<RPLmFace const *,RPLmFace const *,bool> {
}

struct w3d_quaternion {
  /* this+0x0 */ float qw;
  /* this+0x4 */ float qx;
  /* this+0x8 */ float qy;
  /* this+0xc */ float qz;
}

class std::allocator<unsigned short> {
}

class std::reverse_iterator<unsigned short const *,unsigned short,unsigned short const &,unsigned short const *,int> {
}

class std::reverse_iterator<unsigned short *,unsigned short,unsigned short &,unsigned short *,int> {
}

class FontMgr {
  /* this+0x0 */ class std::vector<FontInfo,std::allocator<FontInfo> > m_fontInfoList;
}

class std::vector<FontInfo,std::allocator<FontInfo> > {
  /* this+0x0 */ class std::allocator<FontInfo> allocator;
  /* this+0x4 */ struct FontInfo * _First;
  /* this+0x8 */ struct FontInfo * _Last;
  /* this+0xc */ struct FontInfo * _End;
}

struct FontInfo {
  /* this+0x0 */ int fontType;
  /* this+0x4 */ int fontHeight;
  /* this+0x8 */ int fontCharset;
  /* this+0xc */ unsigned char fontBold;
  /* this+0x10 */ struct HFONT__ * hFont;
}

struct tagLOGFONTA {
  /* this+0x0 */ long lfHeight;
  /* this+0x4 */ long lfWidth;
  /* this+0x8 */ long lfEscapement;
  /* this+0xc */ long lfOrientation;
  /* this+0x10 */ long lfWeight;
  /* this+0x14 */ unsigned char lfItalic;
  /* this+0x15 */ unsigned char lfUnderline;
  /* this+0x16 */ unsigned char lfStrikeOut;
  /* this+0x17 */ unsigned char lfCharSet;
  /* this+0x18 */ unsigned char lfOutPrecision;
  /* this+0x19 */ unsigned char lfClipPrecision;
  /* this+0x1a */ unsigned char lfQuality;
  /* this+0x1b */ unsigned char lfPitchAndFamily;
  /* this+0x1c */ char[0x20] lfFaceName;
}

struct tagTEXTMETRICA {
  /* this+0x0 */ long tmHeight;
  /* this+0x4 */ long tmAscent;
  /* this+0x8 */ long tmDescent;
  /* this+0xc */ long tmInternalLeading;
  /* this+0x10 */ long tmExternalLeading;
  /* this+0x14 */ long tmAveCharWidth;
  /* this+0x18 */ long tmMaxCharWidth;
  /* this+0x1c */ long tmWeight;
  /* this+0x20 */ long tmOverhang;
  /* this+0x24 */ long tmDigitizedAspectX;
  /* this+0x28 */ long tmDigitizedAspectY;
  /* this+0x2c */ unsigned char tmFirstChar;
  /* this+0x2d */ unsigned char tmLastChar;
  /* this+0x2e */ unsigned char tmDefaultChar;
  /* this+0x2f */ unsigned char tmBreakChar;
  /* this+0x30 */ unsigned char tmItalic;
  /* this+0x31 */ unsigned char tmUnderlined;
  /* this+0x32 */ unsigned char tmStruckOut;
  /* this+0x33 */ unsigned char tmPitchAndFamily;
  /* this+0x34 */ unsigned char tmCharSet;
}

struct IDirectDrawClipper {
}

struct _D3DVIEWPORT7 {
  /* this+0x0 */ unsigned long dwX;
  /* this+0x4 */ unsigned long dwY;
  /* this+0x8 */ unsigned long dwWidth;
  /* this+0xc */ unsigned long dwHeight;
  /* this+0x10 */ float dvMinZ;
  /* this+0x14 */ float dvMaxZ;
}

struct _D3DRECT {
  /* this+0x0 */ long x1;
  /* this+0x0 */ long lX1;
  /* this+0x4 */ long y1;
  /* this+0x4 */ long lY1;
  /* this+0x8 */ long x2;
  /* this+0x8 */ long lX2;
  /* this+0xc */ long y2;
  /* this+0xc */ long lY2;
}

struct _DDSCAPS {
  /* this+0x0 */ unsigned long dwCaps;
}

struct _DDCAPS_DX7 {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwCaps;
  /* this+0x8 */ unsigned long dwCaps2;
  /* this+0xc */ unsigned long dwCKeyCaps;
  /* this+0x10 */ unsigned long dwFXCaps;
  /* this+0x14 */ unsigned long dwFXAlphaCaps;
  /* this+0x18 */ unsigned long dwPalCaps;
  /* this+0x1c */ unsigned long dwSVCaps;
  /* this+0x20 */ unsigned long dwAlphaBltConstBitDepths;
  /* this+0x24 */ unsigned long dwAlphaBltPixelBitDepths;
  /* this+0x28 */ unsigned long dwAlphaBltSurfaceBitDepths;
  /* this+0x2c */ unsigned long dwAlphaOverlayConstBitDepths;
  /* this+0x30 */ unsigned long dwAlphaOverlayPixelBitDepths;
  /* this+0x34 */ unsigned long dwAlphaOverlaySurfaceBitDepths;
  /* this+0x38 */ unsigned long dwZBufferBitDepths;
  /* this+0x3c */ unsigned long dwVidMemTotal;
  /* this+0x40 */ unsigned long dwVidMemFree;
  /* this+0x44 */ unsigned long dwMaxVisibleOverlays;
  /* this+0x48 */ unsigned long dwCurrVisibleOverlays;
  /* this+0x4c */ unsigned long dwNumFourCCCodes;
  /* this+0x50 */ unsigned long dwAlignBoundarySrc;
  /* this+0x54 */ unsigned long dwAlignSizeSrc;
  /* this+0x58 */ unsigned long dwAlignBoundaryDest;
  /* this+0x5c */ unsigned long dwAlignSizeDest;
  /* this+0x60 */ unsigned long dwAlignStrideAlign;
  /* this+0x64 */ unsigned long[0x8] dwRops;
  /* this+0x84 */ struct _DDSCAPS ddsOldCaps;
  /* this+0x88 */ unsigned long dwMinOverlayStretch;
  /* this+0x8c */ unsigned long dwMaxOverlayStretch;
  /* this+0x90 */ unsigned long dwMinLiveVideoStretch;
  /* this+0x94 */ unsigned long dwMaxLiveVideoStretch;
  /* this+0x98 */ unsigned long dwMinHwCodecStretch;
  /* this+0x9c */ unsigned long dwMaxHwCodecStretch;
  /* this+0xa0 */ unsigned long dwReserved1;
  /* this+0xa4 */ unsigned long dwReserved2;
  /* this+0xa8 */ unsigned long dwReserved3;
  /* this+0xac */ unsigned long dwSVBCaps;
  /* this+0xb0 */ unsigned long dwSVBCKeyCaps;
  /* this+0xb4 */ unsigned long dwSVBFXCaps;
  /* this+0xb8 */ unsigned long[0x8] dwSVBRops;
  /* this+0xd8 */ unsigned long dwVSBCaps;
  /* this+0xdc */ unsigned long dwVSBCKeyCaps;
  /* this+0xe0 */ unsigned long dwVSBFXCaps;
  /* this+0xe4 */ unsigned long[0x8] dwVSBRops;
  /* this+0x104 */ unsigned long dwSSBCaps;
  /* this+0x108 */ unsigned long dwSSBCKeyCaps;
  /* this+0x10c */ unsigned long dwSSBFXCaps;
  /* this+0x110 */ unsigned long[0x8] dwSSBRops;
  /* this+0x130 */ unsigned long dwMaxVideoPorts;
  /* this+0x134 */ unsigned long dwCurrVideoPorts;
  /* this+0x138 */ unsigned long dwSVBCaps2;
  /* this+0x13c */ unsigned long dwNLVBCaps;
  /* this+0x140 */ unsigned long dwNLVBCaps2;
  /* this+0x144 */ unsigned long dwNLVBCKeyCaps;
  /* this+0x148 */ unsigned long dwNLVBFXCaps;
  /* this+0x14c */ unsigned long[0x8] dwNLVBRops;
  /* this+0x16c */ struct _DDSCAPS2 ddsCaps;
}

struct _D3DVERTEXBUFFERDESC {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwCaps;
  /* this+0x8 */ unsigned long dwFVF;
  /* this+0xc */ unsigned long dwNumVertices;
}

class CDCBitmap {
  /* this+0x4 */ unsigned long m_w;
  /* this+0x8 */ unsigned long m_h;
  /* this+0xc */ struct HDC__ * m_dc;
  /* this+0x10 */ struct HBITMAP__ * m_bitmap;
  /* this+0x14 */ struct HBITMAP__ * m_bitmapOld;
  /* this+0x18 */ unsigned long * m_image;
  /* this+0x1c */ unsigned char m_dirty;
  /* this+0x20 */ class std::list<CTexture *,std::allocator<CTexture *> > m_textureList;
}

struct posKeyframe {
  /* this+0x0 */ int frame;
  /* this+0x4 */ float px;
  /* this+0x8 */ float py;
  /* this+0xc */ float pz;
}

struct scaleKeyframe {
  /* this+0x0 */ int frame;
  /* this+0x4 */ float sx;
  /* this+0x8 */ float sy;
  /* this+0xc */ float sz;
  /* this+0x10 */ float qx;
  /* this+0x14 */ float qy;
  /* this+0x18 */ float qz;
  /* this+0x1c */ float qw;
}

class exception {
  /* this+0x4 */ const char * _m_what;
  /* this+0x8 */ int _m_doFree;
}

class std::_Locinfo {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Days;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Months;
  /* this+0x20 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Oname;
  /* this+0x30 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Nname;
}

struct _Ctypevec {
  /* this+0x0 */ unsigned long _Hand;
  /* this+0x4 */ unsigned int _Page;
  /* this+0x8 */ const short * _Table;
  /* this+0xc */ int _Delfl;
}

class std::ios_base::failure {
  /* this+0x4 */ const char * _m_what;
  /* this+0x8 */ int _m_doFree;
  /* this+0xc */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Str;
}

class std::ios_base::Init {
  }

struct std::ios_base::_Iosarray {
  /* this+0x0 */ struct std::ios_base::_Iosarray * _Next;
  /* this+0x4 */ int _Index;
  /* this+0x8 */ long _Lo;
  /* this+0xc */ void * _Vp;
}

struct std::ios_base::_Fnarray {
  /* this+0x0 */ struct std::ios_base::_Fnarray * _Next;
  /* this+0x4 */ int _Index;
  /* this+0x8 */ function  * _Pfn;
}

class std::runtime_error {
  /* this+0x4 */ const char * _m_what;
  /* this+0x8 */ int _m_doFree;
  /* this+0xc */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Str;
}

class std::basic_ostream<char,std::char_traits<char> > {
}

class std::istreambuf_iterator<char,std::char_traits<char> > {
}

class std::num_get<char,std::istreambuf_iterator<char,std::char_traits<char> > > {
}

class std::basic_istream<char,std::char_traits<char> >::sentry {
  /* this+0x0 */ unsigned char _Ok;
}

struct ISequentialStream {
}

union _LARGE_INTEGER {
  /* this+0x0 */ unsigned long LowPart;
  /* this+0x4 */ long HighPart;
  /* this+0x0 */ struct _LARGE_INTEGER::__unnamed u;
  /* this+0x0 */ __int64 QuadPart;
}

union _ULARGE_INTEGER {
  /* this+0x0 */ unsigned long LowPart;
  /* this+0x4 */ unsigned long HighPart;
  /* this+0x0 */ struct _ULARGE_INTEGER::__unnamed u;
  /* this+0x0 */ unsigned __int64 QuadPart;
}

struct tagSTATSTG {
  /* this+0x0 */ unsigned short * pwcsName;
  /* this+0x4 */ unsigned long type;
  /* this+0x8 */ union _ULARGE_INTEGER cbSize;
  /* this+0x10 */ struct _FILETIME mtime;
  /* this+0x18 */ struct _FILETIME ctime;
  /* this+0x20 */ struct _FILETIME atime;
  /* this+0x28 */ unsigned long grfMode;
  /* this+0x2c */ unsigned long grfLocksSupported;
  /* this+0x30 */ struct _GUID clsid;
  /* this+0x40 */ unsigned long grfStateBits;
  /* this+0x44 */ unsigned long reserved;
}

struct std::binary_function<char const *,char const *,bool> {
}

struct tagSAFEARRAY {
  /* this+0x0 */ unsigned short cDims;
  /* this+0x2 */ unsigned short fFeatures;
  /* this+0x4 */ unsigned long cbElements;
  /* this+0x8 */ unsigned long cLocks;
  /* this+0xc */ void * pvData;
  /* this+0x10 */ struct tagSAFEARRAYBOUND[0x1] rgsabound;
}

struct tagDEC {
  /* this+0x0 */ unsigned short wReserved;
  /* this+0x2 */ unsigned char scale;
  /* this+0x3 */ unsigned char sign;
  /* this+0x2 */ unsigned short signscale;
  /* this+0x4 */ unsigned long Hi32;
  /* this+0x8 */ unsigned long Lo32;
  /* this+0xc */ unsigned long Mid32;
  /* this+0x8 */ unsigned __int64 Lo64;
}

struct IRecordInfo {
}

struct _RGNDATA {
  /* this+0x0 */ struct _RGNDATAHEADER rdh;
  /* this+0x20 */ char[0x1] Buffer;
}

struct IDirectDraw {
}

struct _DDBLTBATCH {
  /* this+0x0 */ struct tagRECT * lprDest;
  /* this+0x4 */ struct IDirectDrawSurface * lpDDSSrc;
  /* this+0x8 */ struct tagRECT * lprSrc;
  /* this+0xc */ unsigned long dwFlags;
  /* this+0x10 */ struct _DDBLTFX * lpDDBltFx;
}

struct _DDSURFACEDESC {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ unsigned long dwHeight;
  /* this+0xc */ unsigned long dwWidth;
  /* this+0x10 */ long lPitch;
  /* this+0x10 */ unsigned long dwLinearSize;
  /* this+0x14 */ unsigned long dwBackBufferCount;
  /* this+0x18 */ unsigned long dwMipMapCount;
  /* this+0x18 */ unsigned long dwZBufferBitDepth;
  /* this+0x18 */ unsigned long dwRefreshRate;
  /* this+0x1c */ unsigned long dwAlphaBitDepth;
  /* this+0x20 */ unsigned long dwReserved;
  /* this+0x24 */ void * lpSurface;
  /* this+0x28 */ struct _DDCOLORKEY ddckCKDestOverlay;
  /* this+0x30 */ struct _DDCOLORKEY ddckCKDestBlt;
  /* this+0x38 */ struct _DDCOLORKEY ddckCKSrcOverlay;
  /* this+0x40 */ struct _DDCOLORKEY ddckCKSrcBlt;
  /* this+0x48 */ struct _DDPIXELFORMAT ddpfPixelFormat;
  /* this+0x68 */ struct _DDSCAPS ddsCaps;
}

struct IDirectDrawPalette {
}

struct _DDOVERLAYFX {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwAlphaEdgeBlendBitDepth;
  /* this+0x8 */ unsigned long dwAlphaEdgeBlend;
  /* this+0xc */ unsigned long dwReserved;
  /* this+0x10 */ unsigned long dwAlphaDestConstBitDepth;
  /* this+0x14 */ unsigned long dwAlphaDestConst;
  /* this+0x14 */ struct IDirectDrawSurface * lpDDSAlphaDest;
  /* this+0x18 */ unsigned long dwAlphaSrcConstBitDepth;
  /* this+0x1c */ unsigned long dwAlphaSrcConst;
  /* this+0x1c */ struct IDirectDrawSurface * lpDDSAlphaSrc;
  /* this+0x20 */ struct _DDCOLORKEY dckDestColorkey;
  /* this+0x28 */ struct _DDCOLORKEY dckSrcColorkey;
  /* this+0x30 */ unsigned long dwDDFX;
  /* this+0x34 */ unsigned long dwFlags;
}

struct _DDPIXELFORMAT::__unnamed::__unnamed {
  /* this+0x0 */ unsigned short wFlipMSTypes;
  /* this+0x2 */ unsigned short wBltMSTypes;
}

struct tagDDDEVICEIDENTIFIER2 {
  /* this+0x0 */ char[0x200] szDriver;
  /* this+0x200 */ char[0x200] szDescription;
  /* this+0x400 */ union _LARGE_INTEGER liDriverVersion;
  /* this+0x408 */ unsigned long dwVendorId;
  /* this+0x40c */ unsigned long dwDeviceId;
  /* this+0x410 */ unsigned long dwSubSysId;
  /* this+0x414 */ unsigned long dwRevision;
  /* this+0x418 */ struct _GUID guidDeviceIdentifier;
  /* this+0x428 */ unsigned long dwWHQLLevel;
}

struct _EXCEPTION_RECORD {
  /* this+0x0 */ unsigned long ExceptionCode;
  /* this+0x4 */ unsigned long ExceptionFlags;
  /* this+0x8 */ struct _EXCEPTION_RECORD * ExceptionRecord;
  /* this+0xc */ void * ExceptionAddress;
  /* this+0x10 */ unsigned long NumberParameters;
  /* this+0x14 */ unsigned int[0xf] ExceptionInformation;
}

struct _CONTEXT {
  /* this+0x0 */ unsigned long ContextFlags;
  /* this+0x4 */ unsigned long Dr0;
  /* this+0x8 */ unsigned long Dr1;
  /* this+0xc */ unsigned long Dr2;
  /* this+0x10 */ unsigned long Dr3;
  /* this+0x14 */ unsigned long Dr6;
  /* this+0x18 */ unsigned long Dr7;
  /* this+0x1c */ struct _FLOATING_SAVE_AREA FloatSave;
  /* this+0x8c */ unsigned long SegGs;
  /* this+0x90 */ unsigned long SegFs;
  /* this+0x94 */ unsigned long SegEs;
  /* this+0x98 */ unsigned long SegDs;
  /* this+0x9c */ unsigned long Edi;
  /* this+0xa0 */ unsigned long Esi;
  /* this+0xa4 */ unsigned long Ebx;
  /* this+0xa8 */ unsigned long Edx;
  /* this+0xac */ unsigned long Ecx;
  /* this+0xb0 */ unsigned long Eax;
  /* this+0xb4 */ unsigned long Ebp;
  /* this+0xb8 */ unsigned long Eip;
  /* this+0xbc */ unsigned long SegCs;
  /* this+0xc0 */ unsigned long EFlags;
  /* this+0xc4 */ unsigned long Esp;
  /* this+0xc8 */ unsigned long SegSs;
  /* this+0xcc */ unsigned char[0x200] ExtendedRegisters;
}

struct _FLOATING_SAVE_AREA {
  /* this+0x0 */ unsigned long ControlWord;
  /* this+0x4 */ unsigned long StatusWord;
  /* this+0x8 */ unsigned long TagWord;
  /* this+0xc */ unsigned long ErrorOffset;
  /* this+0x10 */ unsigned long ErrorSelector;
  /* this+0x14 */ unsigned long DataOffset;
  /* this+0x18 */ unsigned long DataSelector;
  /* this+0x1c */ unsigned char[0x50] RegisterArea;
  /* this+0x6c */ unsigned long Cr0NpxState;
}

struct DIDEVCAPS {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ unsigned long dwDevType;
  /* this+0xc */ unsigned long dwAxes;
  /* this+0x10 */ unsigned long dwButtons;
  /* this+0x14 */ unsigned long dwPOVs;
  /* this+0x18 */ unsigned long dwFFSamplePeriod;
  /* this+0x1c */ unsigned long dwFFMinTimeResolution;
  /* this+0x20 */ unsigned long dwFirmwareRevision;
  /* this+0x24 */ unsigned long dwHardwareRevision;
  /* this+0x28 */ unsigned long dwFFDriverVersion;
}

struct DIDEVICEOBJECTINSTANCEA {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ struct _GUID guidType;
  /* this+0x14 */ unsigned long dwOfs;
  /* this+0x18 */ unsigned long dwType;
  /* this+0x1c */ unsigned long dwFlags;
  /* this+0x20 */ char[0x104] tszName;
  /* this+0x124 */ unsigned long dwFFMaxForce;
  /* this+0x128 */ unsigned long dwFFForceResolution;
  /* this+0x12c */ unsigned short wCollectionNumber;
  /* this+0x12e */ unsigned short wDesignatorIndex;
  /* this+0x130 */ unsigned short wUsagePage;
  /* this+0x132 */ unsigned short wUsage;
  /* this+0x134 */ unsigned long dwDimension;
  /* this+0x138 */ unsigned short wExponent;
  /* this+0x13a */ unsigned short wReportId;
}

struct DIPROPHEADER {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwHeaderSize;
  /* this+0x8 */ unsigned long dwObj;
  /* this+0xc */ unsigned long dwHow;
}

struct DIDEVICEOBJECTDATA {
  /* this+0x0 */ unsigned long dwOfs;
  /* this+0x4 */ unsigned long dwData;
  /* this+0x8 */ unsigned long dwTimeStamp;
  /* this+0xc */ unsigned long dwSequence;
}

struct DIDEVICEINSTANCEA {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ struct _GUID guidInstance;
  /* this+0x14 */ struct _GUID guidProduct;
  /* this+0x24 */ unsigned long dwDevType;
  /* this+0x28 */ char[0x104] tszInstanceName;
  /* this+0x12c */ char[0x104] tszProductName;
  /* this+0x230 */ struct _GUID guidFFDriver;
  /* this+0x240 */ unsigned short wUsagePage;
  /* this+0x242 */ unsigned short wUsage;
}

struct _RGNDATAHEADER {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long iType;
  /* this+0x8 */ unsigned long nCount;
  /* this+0xc */ unsigned long nRgnSize;
  /* this+0x10 */ struct tagRECT rcBound;
}

struct tagDISPPARAMS {
  /* this+0x0 */ struct tagVARIANT * rgvarg;
  /* this+0x4 */ long * rgdispidNamedArgs;
  /* this+0x8 */ unsigned int cArgs;
  /* this+0xc */ unsigned int cNamedArgs;
}

struct tagEXCEPINFO {
  /* this+0x0 */ unsigned short wCode;
  /* this+0x2 */ unsigned short wReserved;
  /* this+0x4 */ unsigned short * bstrSource;
  /* this+0x8 */ unsigned short * bstrDescription;
  /* this+0xc */ unsigned short * bstrHelpFile;
  /* this+0x10 */ unsigned long dwHelpContext;
  /* this+0x14 */ void * pvReserved;
  /* this+0x18 */ function  * pfnDeferredFillIn;
  /* this+0x1c */ long scode;
}

struct ITypeComp {
}

struct tagFUNCDESC {
  /* this+0x0 */ long memid;
  /* this+0x4 */ long * lprgscode;
  /* this+0x8 */ struct tagELEMDESC * lprgelemdescParam;
  /* this+0xc */ enum tagFUNCKIND funckind;
  /* this+0x10 */ enum tagINVOKEKIND invkind;
  /* this+0x14 */ enum tagCALLCONV callconv;
  /* this+0x18 */ short cParams;
  /* this+0x1a */ short cParamsOpt;
  /* this+0x1c */ short oVft;
  /* this+0x1e */ short cScodes;
  /* this+0x20 */ struct tagELEMDESC elemdescFunc;
  /* this+0x30 */ unsigned short wFuncFlags;
}

struct tagVARDESC {
  /* this+0x0 */ long memid;
  /* this+0x4 */ unsigned short * lpstrSchema;
  /* this+0x8 */ unsigned long oInst;
  /* this+0x8 */ struct tagVARIANT * lpvarValue;
  /* this+0xc */ struct tagELEMDESC elemdescVar;
  /* this+0x1c */ unsigned short wVarFlags;
  /* this+0x20 */ enum tagVARKIND varkind;
}

struct in_addr::__unnamed::__unnamed {
  /* this+0x0 */ unsigned char s_b1;
  /* this+0x1 */ unsigned char s_b2;
  /* this+0x2 */ unsigned char s_b3;
  /* this+0x3 */ unsigned char s_b4;
}

union in_addr::__unnamed {
  /* this+0x0 */ struct in_addr::__unnamed::__unnamed S_un_b;
  /* this+0x0 */ struct in_addr::__unnamed::__unnamed S_un_w;
  /* this+0x0 */ unsigned long S_addr;
}

struct _D3DPrimCaps {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwMiscCaps;
  /* this+0x8 */ unsigned long dwRasterCaps;
  /* this+0xc */ unsigned long dwZCmpCaps;
  /* this+0x10 */ unsigned long dwSrcBlendCaps;
  /* this+0x14 */ unsigned long dwDestBlendCaps;
  /* this+0x18 */ unsigned long dwAlphaCmpCaps;
  /* this+0x1c */ unsigned long dwShadeCaps;
  /* this+0x20 */ unsigned long dwTextureCaps;
  /* this+0x24 */ unsigned long dwTextureFilterCaps;
  /* this+0x28 */ unsigned long dwTextureBlendCaps;
  /* this+0x2c */ unsigned long dwTextureAddressCaps;
  /* this+0x30 */ unsigned long dwStippleWidth;
  /* this+0x34 */ unsigned long dwStippleHeight;
}

union tagBINDPTR {
  /* this+0x0 */ struct tagFUNCDESC * lpfuncdesc;
  /* this+0x0 */ struct tagVARDESC * lpvardesc;
  /* this+0x0 */ struct ITypeComp * lptcomp;
}

struct tagELEMDESC {
  /* this+0x0 */ struct tagTYPEDESC tdesc;
  /* this+0x8 */ struct tagIDLDESC idldesc;
  /* this+0x8 */ struct tagPARAMDESC paramdesc;
}

struct tagSAFEARRAYBOUND {
  /* this+0x0 */ unsigned long cElements;
  /* this+0x4 */ long lLbound;
}

struct tagTYPEDESC {
  /* this+0x0 */ struct tagTYPEDESC * lptdesc;
  /* this+0x0 */ struct tagARRAYDESC * lpadesc;
  /* this+0x0 */ unsigned long hreftype;
  /* this+0x4 */ unsigned short vt;
}

struct tagIDLDESC {
  /* this+0x0 */ unsigned long dwReserved;
  /* this+0x4 */ unsigned short wIDLFlags;
}

struct _D3DDRAWPRIMITIVESTRIDEDDATA {
  /* this+0x0 */ struct _D3DDP_PTRSTRIDE position;
  /* this+0x8 */ struct _D3DDP_PTRSTRIDE normal;
  /* this+0x10 */ struct _D3DDP_PTRSTRIDE diffuse;
  /* this+0x18 */ struct _D3DDP_PTRSTRIDE specular;
  /* this+0x20 */ struct _D3DDP_PTRSTRIDE[0x8] textureCoords;
}

struct _D3DMATERIAL7 {
  /* this+0x0 */ struct _D3DCOLORVALUE diffuse;
  /* this+0x0 */ struct _D3DCOLORVALUE dcvDiffuse;
  /* this+0x10 */ struct _D3DCOLORVALUE ambient;
  /* this+0x10 */ struct _D3DCOLORVALUE dcvAmbient;
  /* this+0x20 */ struct _D3DCOLORVALUE specular;
  /* this+0x20 */ struct _D3DCOLORVALUE dcvSpecular;
  /* this+0x30 */ struct _D3DCOLORVALUE emissive;
  /* this+0x30 */ struct _D3DCOLORVALUE dcvEmissive;
  /* this+0x40 */ float power;
  /* this+0x40 */ float dvPower;
}

struct _D3DCLIPSTATUS {
  /* this+0x0 */ unsigned long dwFlags;
  /* this+0x4 */ unsigned long dwStatus;
  /* this+0x8 */ float minx;
  /* this+0xc */ float maxx;
  /* this+0x10 */ float miny;
  /* this+0x14 */ float maxy;
  /* this+0x18 */ float minz;
  /* this+0x1c */ float maxz;
}

struct std::output_iterator_tag {
}

class std::reverse_iterator<posKeyframe const *,posKeyframe,posKeyframe const &,posKeyframe const *,int> {
}

class std::reverse_iterator<posKeyframe *,posKeyframe,posKeyframe &,posKeyframe *,int> {
}

class std::allocator<rotKeyframe> {
}

class std::reverse_iterator<rotKeyframe const *,rotKeyframe,rotKeyframe const &,rotKeyframe const *,int> {
}

class std::reverse_iterator<rotKeyframe *,rotKeyframe,rotKeyframe &,rotKeyframe *,int> {
}

class std::allocator<scaleKeyframe> {
}

class std::reverse_iterator<scaleKeyframe const *,scaleKeyframe,scaleKeyframe const &,scaleKeyframe const *,int> {
}

class std::reverse_iterator<scaleKeyframe *,scaleKeyframe,scaleKeyframe &,scaleKeyframe *,int> {
}

class std::vector<RPMesh *,std::allocator<RPMesh *> > {
  /* this+0x0 */ class std::allocator<RPMesh *> allocator;
  /* this+0x4 */ struct RPMesh * * _First;
  /* this+0x8 */ struct RPMesh * * _Last;
  /* this+0xc */ struct RPMesh * * _End;
}

struct std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn {
}

class std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::value_compare {
  /* this+0x0 */ struct CharPrtLess comp;
}

class std::allocator<CTexture *> {
}

class std::reverse_bidirectional_iterator<std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> >::iterator,std::pair<char fcf0a3ea {
}

class std::reverse_bidirectional_iterator<std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> >::const_iterator,std::paircdef0af3 {
}

struct std::pair<std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> >::iterator,std::_Tree<char const *,std::pair<char co5893000b {
}

struct std::pair<std::_Tree<char const *,std::pair<char const * const,CTexture *>,std::map<char const *,CTexture *,CharPrtLess,std::allocator<CTexture *> >::_Kfn,CharPrtLess,std::allocator<CTexture *> >::const_iterator,std::_Tree<char const *,std::pair<c3288d1f2 {
}

class std::allocator<RPRaw *> {
}

class std::reverse_iterator<RPRaw * const *,RPRaw *,RPRaw * const &,RPRaw * const *,int> {
}

class std::reverse_iterator<RPRaw * *,RPRaw *,RPRaw * &,RPRaw * *,int> {
}

class std::allocator<RPFace *> {
}

class std::reverse_iterator<RPFace * const *,RPFace *,RPFace * const &,RPFace * const *,int> {
}

class std::reverse_iterator<RPFace * *,RPFace *,RPFace * &,RPFace * *,int> {
}

class std::allocator<RPMesh *> {
}

class std::reverse_iterator<RPMesh * const *,RPMesh *,RPMesh * const &,RPMesh * const *,int> {
}

class std::reverse_iterator<RPMesh * *,RPMesh *,RPMesh * &,RPMesh * *,int> {
}

class std::allocator<RPLmFace *> {
}

class std::reverse_iterator<RPLmFace * const *,RPLmFace *,RPLmFace * const &,RPLmFace * const *,int> {
}

class std::reverse_iterator<RPLmFace * *,RPLmFace *,RPLmFace * &,RPLmFace * *,int> {
}

class std::allocator<std::pair<float,RPFace *> > {
}

class std::reverse_iterator<std::pair<float,RPFace *> const *,std::pair<float,RPFace *>,std::pair<float,RPFace *> const &,std::pair<float,RPFace *> const *,int> {
}

class std::reverse_iterator<std::pair<float,RPFace *> *,std::pair<float,RPFace *>,std::pair<float,RPFace *> &,std::pair<float,RPFace *> *,int> {
}

struct std::list<CacheSurface,std::allocator<CacheSurface> >::_Acc {
}

class std::allocator<CacheSurface> {
}

class std::reverse_bidirectional_iterator<std::list<CacheSurface,std::allocator<CacheSurface> >::iterator,CacheSurface,CacheSurface &,CacheSurface *,int> {
  /* this+0x0 */ class std::list<CacheSurface,std::allocator<CacheSurface> >::iterator current;
}

class std::reverse_bidirectional_iterator<std::list<CacheSurface,std::allocator<CacheSurface> >::const_iterator,CacheSurface,CacheSurface const &,CacheSurface const *,int> {
}

class std::binder2nd<std::not_equal_to<CacheSurface> > {
  /* this+0x0 */ struct std::not_equal_to<CacheSurface> op;
  /* this+0x4 */ struct CacheSurface value;
}

struct std::not_equal_to<CacheSurface> {
}

struct std::greater<CacheSurface> {
}

class std::allocator<CacheInfo> {
}

class std::reverse_iterator<CacheInfo const *,CacheInfo,CacheInfo const &,CacheInfo const *,int> {
}

class std::reverse_iterator<CacheInfo *,CacheInfo,CacheInfo &,CacheInfo *,int> {
}

struct std::list<CTexture *,std::allocator<CTexture *> >::_Acc {
}

class std::reverse_bidirectional_iterator<std::list<CTexture *,std::allocator<CTexture *> >::const_iterator,CTexture *,CTexture * const &,CTexture * const *,int> {
}

class std::binder2nd<std::not_equal_to<CTexture *> > {
  /* this+0x0 */ struct std::not_equal_to<CTexture *> op;
  /* this+0x4 */ class CTexture * value;
}

struct std::not_equal_to<CTexture *> {
}

struct std::greater<CTexture *> {
}

struct std::list<RPFace,std::allocator<RPFace> >::_Acc {
}

class std::allocator<RPFace> {
}

class std::reverse_bidirectional_iterator<std::list<RPFace,std::allocator<RPFace> >::iterator,RPFace,RPFace &,RPFace *,int> {
}

class std::reverse_bidirectional_iterator<std::list<RPFace,std::allocator<RPFace> >::const_iterator,RPFace,RPFace const &,RPFace const *,int> {
}

class std::binder2nd<std::not_equal_to<RPFace> > {
  /* this+0x0 */ struct std::not_equal_to<RPFace> op;
  /* this+0x4 */ struct RPFace value;
}

struct std::not_equal_to<RPFace> {
}

struct std::greater<RPFace> {
}

struct std::list<RPQuadFace,std::allocator<RPQuadFace> >::_Acc {
}

class std::allocator<RPQuadFace> {
}

class std::reverse_bidirectional_iterator<std::list<RPQuadFace,std::allocator<RPQuadFace> >::iterator,RPQuadFace,RPQuadFace &,RPQuadFace *,int> {
}

class std::reverse_bidirectional_iterator<std::list<RPQuadFace,std::allocator<RPQuadFace> >::const_iterator,RPQuadFace,RPQuadFace const &,RPQuadFace const *,int> {
}

class std::binder2nd<std::not_equal_to<RPQuadFace> > {
  /* this+0x0 */ struct std::not_equal_to<RPQuadFace> op;
  /* this+0x4 */ struct RPQuadFace value;
}

struct std::not_equal_to<RPQuadFace> {
}

struct std::greater<RPQuadFace> {
}

struct std::list<RPLmQuadFace,std::allocator<RPLmQuadFace> >::_Acc {
}

class std::allocator<RPLmQuadFace> {
}

class std::reverse_bidirectional_iterator<std::list<RPLmQuadFace,std::allocator<RPLmQuadFace> >::iterator,RPLmQuadFace,RPLmQuadFace &,RPLmQuadFace *,int> {
}

class std::reverse_bidirectional_iterator<std::list<RPLmQuadFace,std::allocator<RPLmQuadFace> >::const_iterator,RPLmQuadFace,RPLmQuadFace const &,RPLmQuadFace const *,int> {
}

class std::binder2nd<std::not_equal_to<RPLmQuadFace> > {
  /* this+0x0 */ struct std::not_equal_to<RPLmQuadFace> op;
  /* this+0x4 */ struct RPLmQuadFace value;
}

struct std::not_equal_to<RPLmQuadFace> {
}

struct std::greater<RPLmQuadFace> {
}

class std::allocator<tlvertex3d> {
}

class std::reverse_iterator<tlvertex3d const *,tlvertex3d,tlvertex3d const &,tlvertex3d const *,int> {
}

class std::reverse_iterator<tlvertex3d *,tlvertex3d,tlvertex3d &,tlvertex3d *,int> {
}

class std::allocator<CAction> {
}

class std::reverse_iterator<CAction const *,CAction,CAction const &,CAction const *,int> {
}

class std::reverse_iterator<CAction *,CAction,CAction &,CAction *,int> {
}

class std::allocator<float> {
}

class std::reverse_iterator<float const *,float,float const &,float const *,int> {
}

class std::reverse_iterator<float *,float,float &,float *,int> {
}

class std::allocator<CRmaRes::FrameNum> {
}

class std::reverse_iterator<CRmaRes::FrameNum const *,CRmaRes::FrameNum,CRmaRes::FrameNum const &,CRmaRes::FrameNum const *,int> {
}

class std::reverse_iterator<CRmaRes::FrameNum *,CRmaRes::FrameNum,CRmaRes::FrameNum &,CRmaRes::FrameNum *,int> {
}

class std::allocator<SprImg *> {
}

class std::reverse_iterator<SprImg * const *,SprImg *,SprImg * const &,SprImg * const *,int> {
}

class std::reverse_iterator<SprImg * *,SprImg *,SprImg * &,SprImg * *,int> {
}

struct HBITMAP__ {
  /* this+0x0 */ int unused;
}

struct std::_Bidit<CTexture *,int> {
}

class std::reverse_iterator<CSprClip const *,CSprClip,CSprClip const &,CSprClip const *,int> {
}

class std::reverse_iterator<CSprClip *,CSprClip,CSprClip &,CSprClip *,int> {
}

class std::reverse_iterator<CAttachPointInfo const *,CAttachPointInfo,CAttachPointInfo const &,CAttachPointInfo const *,int> {
}

class std::reverse_iterator<CAttachPointInfo *,CAttachPointInfo,CAttachPointInfo &,CAttachPointInfo *,int> {
}

struct std::unary_function<CTexture *,bool> {
}

struct std::binary_function<CTexture *,CTexture *,bool> {
}

struct std::_Ranit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> {
}

class std::reverse_iterator<CMotion const *,CMotion,CMotion const &,CMotion const *,int> {
}

class std::reverse_iterator<CMotion *,CMotion,CMotion &,CMotion *,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,CTexture *,int> {
}

struct std::unary_function<std::pair<char const * const,CTexture *>,char const *> {
}

struct std::binary_function<std::pair<char const * const,CTexture *>,std::pair<char const * const,CTexture *>,bool> {
}

struct std::_Bidit<std::pair<char const * const,CTexture *>,int> {
}

struct std::_Bidit<RPLmQuadFace,int> {
}

struct std::unary_function<RPLmQuadFace,bool> {
}

struct std::binary_function<RPLmQuadFace,RPLmQuadFace,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,RPLmQuadFace,int> {
}

struct std::_Bidit<RPFace,int> {
}

struct std::unary_function<RPFace,bool> {
}

struct std::binary_function<RPFace,RPFace,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,RPFace,int> {
}

struct std::_Bidit<CacheSurface,int> {
}

struct std::unary_function<CacheSurface,bool> {
}

struct std::binary_function<CacheSurface,CacheSurface,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,CacheSurface,int> {
}

struct std::_Bidit<RPQuadFace,int> {
}

struct std::unary_function<RPQuadFace,bool> {
}

struct std::binary_function<RPQuadFace,RPQuadFace,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,RPQuadFace,int> {
}

struct std::bidirectional_iterator_tag {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<char const * const,CTexture *>,int> {
}

struct _RTL_CRITICAL_SECTION {
  /* this+0x0 */ struct _RTL_CRITICAL_SECTION_DEBUG * DebugInfo;
  /* this+0x4 */ long LockCount;
  /* this+0x8 */ long RecursionCount;
  /* this+0xc */ void * OwningThread;
  /* this+0x10 */ void * LockSemaphore;
  /* this+0x14 */ unsigned long SpinCount;
}

struct std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn {
}

class std::map<char const *,int,CharPrtLess,std::allocator<int> >::value_compare {
  /* this+0x0 */ struct CharPrtLess comp;
}

class std::reverse_bidirectional_iterator<std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> >::iterator,std::pair<char const * const,int>,std::pair557fc028 {
}

class std::reverse_bidirectional_iterator<std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> >::const_iterator,std::pair<char const * const,int>,std3a820a46 {
}

struct std::pair<std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> >::iterator,std::_Tree<char const *,std::pair<char const * const,int>,std::map<che3fc4276 {
}

struct std::pair<std::_Tree<char const *,std::pair<char const * const,int>,std::map<char const *,int,CharPrtLess,std::allocator<int> >::_Kfn,CharPrtLess,std::allocator<int> >::const_iterator,std::_Tree<char const *,std::pair<char const * const,int>,std::089f0f15 {
}

struct std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn {
}

class std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::value_compare {
  /* this+0x0 */ struct ResPtrLess comp;
}

struct ResPtrLess {
}

class std::allocator<CRes *> {
}

class std::reverse_bidirectional_iterator<std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> >::iterator,std::pair<CHash * const,CRes *>,std::pair<CHash 153cb824 {
}

class std::reverse_bidirectional_iterator<std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> >::const_iterator,std::pair<CHash * const,CRes *>,std::pair<5b8bc8a2 {
}

struct std::pair<std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> >::iterator,std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *aab52502 {
}

struct std::pair<std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >::_Kfn,ResPtrLess,std::allocator<CRes *> >::const_iterator,std::_Tree<CHash *,std::pair<CHash * const,CRes *>,std::map<CHash *,2f822fb8 {
}

class std::reverse_iterator<CRes * const *,CRes *,CRes * const &,CRes * const *,int> {
}

class std::reverse_iterator<CRes * *,CRes *,CRes * &,CRes * *,int> {
}

class std::allocator<std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> > > {
}

class std::reverse_iterator<std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> > const *,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> > const &,std::map<CHash *,CRes *,ResPte4259896 {
}

class std::reverse_iterator<std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> > *,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> >,std::map<CHash *,CRes *,ResPtrLess,std::allocator<CRes *> > &,std::map<CHash *,CRes *,ResPtrLess,std::a74a5836b {
}

struct std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std:db8b942c {
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std:7cbc3be5 {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
}

class std::reverse_bidirectional_iterator<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>5bc04220 {
}

class std::reverse_bidirectional_iterator<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>2438c080 {
}

struct std::pair<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,35929796 {
}

struct std::pair<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,9d70b644 {
}

struct HWAVEOUT__ {
  /* this+0x0 */ int unused;
}

struct wavehdr_tag {
  /* this+0x0 */ char * lpData;
  /* this+0x4 */ unsigned long dwBufferLength;
  /* this+0x8 */ unsigned long dwBytesRecorded;
  /* this+0xc */ unsigned long dwUser;
  /* this+0x10 */ unsigned long dwFlags;
  /* this+0x14 */ unsigned long dwLoops;
  /* this+0x18 */ struct wavehdr_tag * lpNext;
  /* this+0x1c */ unsigned long reserved;
}

struct pcmwaveformat_tag {
  /* this+0x0 */ struct waveformat_tag wf;
  /* this+0xe */ unsigned short wBitsPerSample;
}

struct DPINFO {
  /* this+0x0 */ long active;
  /* this+0x4 */ unsigned long provider;
  /* this+0x8 */ union DPINFO::__unnamed TYPE;
}

struct ASISTAGE {
  /* this+0x0 */ function  * ASI_stream_open;
  /* this+0x4 */ function  * ASI_stream_process;
  /* this+0x8 */ function  * ASI_stream_seek;
  /* this+0xc */ function  * ASI_stream_close;
  /* this+0x10 */ function  * ASI_stream_attribute;
  /* this+0x14 */ function  * ASI_stream_set_preference;
  /* this+0x18 */ unsigned long INPUT_BIT_RATE;
  /* this+0x1c */ unsigned long INPUT_SAMPLE_RATE;
  /* this+0x20 */ unsigned long INPUT_BITS;
  /* this+0x24 */ unsigned long INPUT_CHANNELS;
  /* this+0x28 */ unsigned long OUTPUT_BIT_RATE;
  /* this+0x2c */ unsigned long OUTPUT_SAMPLE_RATE;
  /* this+0x30 */ unsigned long OUTPUT_BITS;
  /* this+0x34 */ unsigned long OUTPUT_CHANNELS;
  /* this+0x38 */ unsigned long POSITION;
  /* this+0x3c */ unsigned long PERCENT_DONE;
  /* this+0x40 */ unsigned long MIN_INPUT_BLOCK_SIZE;
  /* this+0x44 */ unsigned long RAW_RATE;
  /* this+0x48 */ unsigned long RAW_BITS;
  /* this+0x4c */ unsigned long RAW_CHANNELS;
  /* this+0x50 */ unsigned long REQUESTED_RATE;
  /* this+0x54 */ unsigned long REQUESTED_BITS;
  /* this+0x58 */ unsigned long REQUESTED_CHANS;
  /* this+0x5c */ long stream;
}

struct _ADPCMDATATAG {
  /* this+0x0 */ unsigned long blocksize;
  /* this+0x4 */ unsigned long extrasamples;
  /* this+0x8 */ unsigned long blockleft;
  /* this+0xc */ unsigned long step;
  /* this+0x10 */ unsigned long savesrc;
  /* this+0x14 */ unsigned long sample;
  /* this+0x18 */ unsigned long destend;
  /* this+0x1c */ unsigned long srcend;
  /* this+0x20 */ unsigned long samplesL;
  /* this+0x24 */ unsigned long samplesR;
  /* this+0x28 */ unsigned short[0x10] moresamples;
}

struct MIXSTAGE {
  /* this+0x0 */ function  * MSS_mixer_flush;
  /* this+0x4 */ function  * MSS_mixer_merge;
  /* this+0x8 */ function  * MSS_mixer_copy;
}

struct FLTSTAGE {
  /* this+0x0 */ struct _FLTPROVIDER * provider;
  /* this+0x4 */ long sample_state;
}

union DPINFO::__unnamed {
  /* this+0x0 */ struct ASISTAGE ASI;
  /* this+0x0 */ struct MIXSTAGE MIX;
  /* this+0x0 */ struct FLTSTAGE FLT;
}

struct _FLTPROVIDER {
  /* this+0x0 */ function  * PROVIDER_query_attribute;
  /* this+0x4 */ function  * startup;
  /* this+0x8 */ function  * error;
  /* this+0xc */ function  * shutdown;
  /* this+0x10 */ function  * set_provider_preference;
  /* this+0x14 */ function  * open_driver;
  /* this+0x18 */ function  * close_driver;
  /* this+0x1c */ function  * premix_process;
  /* this+0x20 */ function  * postmix_process;
  /* this+0x24 */ function  * open_sample;
  /* this+0x28 */ function  * close_sample;
  /* this+0x2c */ function  * sample_process;
  /* this+0x30 */ function  * sample_attribute;
  /* this+0x34 */ function  * set_sample_preference;
  /* this+0x38 */ struct _DIG_DRIVER * dig;
  /* this+0x3c */ unsigned long provider;
  /* this+0x40 */ long driver_state;
  /* this+0x44 */ struct _FLTPROVIDER * next;
}

struct tagCANDIDATELIST {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwStyle;
  /* this+0x8 */ unsigned long dwCount;
  /* this+0xc */ unsigned long dwSelection;
  /* this+0x10 */ unsigned long dwPageStart;
  /* this+0x14 */ unsigned long dwPageSize;
  /* this+0x18 */ unsigned long[0x1] dwOffset;
}

class std::deque<unsigned long,std::allocator<unsigned long> >::iterator {
  /* this+0x0 */ unsigned long * _First;
  /* this+0x4 */ unsigned long * _Last;
  /* this+0x8 */ unsigned long * _Next;
  /* this+0xc */ unsigned long * * _Map;
}

class std::reverse_iterator<std::deque<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long,unsigned long const &,unsigned long const *,int> {
}

class std::reverse_iterator<std::deque<unsigned long,std::allocator<unsigned long> >::iterator,unsigned long,unsigned long &,unsigned long *,int> {
}

struct TCINPUTKEY {
  /* this+0x0 */ unsigned char offset;
  /* this+0x1 */ char[0x3] text;
}

struct std::list<unsigned char,std::allocator<unsigned char> >::_Acc {
}

class std::reverse_bidirectional_iterator<std::list<unsigned char,std::allocator<unsigned char> >::iterator,unsigned char,unsigned char &,unsigned char *,int> {
  /* this+0x0 */ class std::list<unsigned char,std::allocator<unsigned char> >::iterator current;
}

class std::reverse_bidirectional_iterator<std::list<unsigned char,std::allocator<unsigned char> >::const_iterator,unsigned char,unsigned char const &,unsigned char const *,int> {
}

class std::binder2nd<std::not_equal_to<unsigned char> > {
  /* this+0x0 */ struct std::not_equal_to<unsigned char> op;
  /* this+0x1 */ unsigned char value;
}

struct std::not_equal_to<unsigned char> {
}

struct std::greater<unsigned char> {
}

struct std::list<UIWindow *,std::allocator<UIWindow *> >::_Acc {
}

class std::allocator<UIWindow *> {
}

class std::reverse_bidirectional_iterator<std::list<UIWindow *,std::allocator<UIWindow *> >::const_iterator,UIWindow *,UIWindow * const &,UIWindow * const *,int> {
}

class std::binder2nd<std::not_equal_to<UIWindow *> > {
  /* this+0x0 */ struct std::not_equal_to<UIWindow *> op;
  /* this+0x4 */ class UIWindow * value;
}

struct std::not_equal_to<UIWindow *> {
}

struct std::greater<UIWindow *> {
}

struct std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn {
}

class std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::value_compare {
  /* this+0x0 */ struct std::less<UIWindow *> comp;
}

struct std::less<UIWindow *> {
}

class std::allocator<CSnapInfo> {
}

class std::reverse_bidirectional_iterator<std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> >::iterator,std::e9deb82f {
}

class std::reverse_bidirectional_iterator<std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> >::const_iterator3651e085 {
}

struct std::pair<std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> >::iterator,std::_Tree<UIWindow *,std::pair9e06b278 {
}

struct std::pair<std::_Tree<UIWindow *,std::pair<UIWindow * const,CSnapInfo>,std::map<UIWindow *,CSnapInfo,std::less<UIWindow *>,std::allocator<CSnapInfo> >::_Kfn,std::less<UIWindow *>,std::allocator<CSnapInfo> >::const_iterator,std::_Tree<UIWindow *,stdd808b67d {
}

struct std::list<StringAndColor,std::allocator<StringAndColor> >::_Acc {
}

class std::allocator<StringAndColor> {
}

class std::reverse_bidirectional_iterator<std::list<StringAndColor,std::allocator<StringAndColor> >::iterator,StringAndColor,StringAndColor &,StringAndColor *,int> {
}

class std::reverse_bidirectional_iterator<std::list<StringAndColor,std::allocator<StringAndColor> >::const_iterator,StringAndColor,StringAndColor const &,StringAndColor const *,int> {
}

class std::binder2nd<std::not_equal_to<StringAndColor> > {
  /* this+0x0 */ struct std::not_equal_to<StringAndColor> op;
  /* this+0x4 */ struct StringAndColor value;
}

struct std::not_equal_to<StringAndColor> {
}

struct std::greater<StringAndColor> {
}

struct std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UIWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<UIWindow *> >::_Kfn {
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UIWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<UIWindow *> >::value_compare {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
}

class std::reverse_bidirectional_iterator<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,s14538a8d {
}

class std::reverse_bidirectional_iterator<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,s3f523d63 {
}

struct std::pair<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,std::char_traits<char>,std:e24466f4 {
}

struct std::pair<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::map<std::basic_string<char,std::char_traits<char>,std:f49b1a75 {
}

class std::allocator<FontInfo> {
}

class std::reverse_iterator<FontInfo const *,FontInfo,FontInfo const &,FontInfo const *,int> {
}

class std::reverse_iterator<FontInfo *,FontInfo,FontInfo &,FontInfo *,int> {
}

struct std::_Bidit<unsigned char,int> {
}

struct std::unary_function<unsigned char,bool> {
}

struct std::binary_function<unsigned char,unsigned char,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,unsigned char,int> {
}

struct std::_Bidit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> {
}

struct std::unary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool> {
}

struct std::binary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> {
}

struct std::unary_function<std::pair<UIWindow * const,CSnapInfo>,UIWindow *> {
}

struct std::binary_function<std::pair<UIWindow * const,CSnapInfo>,std::pair<UIWindow * const,CSnapInfo>,bool> {
}

struct std::binary_function<UIWindow *,UIWindow *,bool> {
}

struct std::_Bidit<std::pair<UIWindow * const,CSnapInfo>,int> {
}

struct std::_Bidit<StringAndColor,int> {
}

struct std::unary_function<StringAndColor,bool> {
}

struct std::binary_function<StringAndColor,StringAndColor,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,StringAndColor,int> {
}

struct std::_Ranit<unsigned long,int> {
}

struct std::iterator<std::random_access_iterator_tag,unsigned long,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<UIWindow * const,CSnapInfo>,int> {
}

struct std::_Bidit<UIWindow *,int> {
}

struct std::unary_function<UIWindow *,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,UIWindow *,int> {
}

struct std::unary_function<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
}

struct std::binary_function<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,bool> {
}

struct std::_Bidit<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UIWindow *>,int> {
}

struct std::random_access_iterator_tag {
}

struct tvertex3d {
  /* this+0x0 */ unsigned long color;
  /* this+0x4 */ float u;
  /* this+0x8 */ float v;
}

struct SKILL_USE_INFO {
  /* this+0x0 */ enum ENUM_SKILL_USE_TYPE m_skillUseType;
  /* this+0x4 */ int m_skillId;
  /* this+0x8 */ int m_attackRange;
  /* this+0xc */ int m_useLevel;
}

struct SERVER_ADDR {
  /* this+0x0 */ unsigned long ip;
  /* this+0x4 */ short port;
  /* this+0x6 */ unsigned char[0x14] name;
  /* this+0x1a */ unsigned short usercount;
  /* this+0x1c */ unsigned short state;
  /* this+0x1e */ unsigned short property;
}

struct BILLING_INFO {
  /* this+0x0 */ char dummy1;
  /* this+0x1 */ unsigned long code;
  /* this+0x5 */ unsigned long time1;
  /* this+0x9 */ unsigned long time2;
  /* this+0xd */ char[0x7] dummy2;
}

struct ViewInfo3d {
  /* this+0x0 */ struct vector3d at;
  /* this+0xc */ float latitude;
  /* this+0x10 */ float longitude;
  /* this+0x14 */ float distance;
}

struct std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn {
}

class std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::value_compare {
  /* this+0x0 */ struct std::less<unsigned long> comp;
}

class std::allocator<NamePair> {
}

class std::reverse_bidirectional_iterator<std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> >::it02afcd25 {
}

class std::reverse_bidirectional_iterator<std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> >::co1e1dc27a {
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> >::iterator,std::_Tree<unsigned123fb26b {
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,NamePair>,std::map<unsigned long,NamePair,std::less<unsigned long>,std::allocator<NamePair> >::_Kfn,std::less<unsigned long>,std::allocator<NamePair> >::const_iterator,std::_Tree<un41857117 {
}

struct std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn {
}

class std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::value_compare {
  /* this+0x0 */ struct std::less<unsigned long> comp;
}

class std::reverse_bidirectional_iterator<std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<05a4b640 {
}

class std::reverse_bidirectional_iterator<std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<809a8034 {
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> >::iteratorcdfecbc5 {
  /* this+0x0 */ class std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> >::iterator first;
  /* this+0x4 */ class std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> >::iterator second;
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,unsigned long>,std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::_Kfn,std::less<unsigned long>,std::allocator<unsigned long> >::const_ite88fc6b5 {
}

struct std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn {
}

class std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::value_compare {
  /* this+0x0 */ struct std::less<unsigned long> comp;
}

class std::reverse_bidirectional_iterator<std::_Tree<unsigned long,std::pair<unsigned long const ,int>,std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn,std::less<unsigned long>,std::allocator<int> >::iterator,std::pair<uns31723e50 {
}

class std::reverse_bidirectional_iterator<std::_Tree<unsigned long,std::pair<unsigned long const ,int>,std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn,std::less<unsigned long>,std::allocator<int> >::const_iterator,std::paa4022d47 {
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,int>,std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn,std::less<unsigned long>,std::allocator<int> >::iterator,bool> {
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,int>,std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn,std::less<unsigned long>,std::allocator<int> >::iterator,std::_Tree<unsigned long,std::pair<unsicfab34f0 {
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,int>,std::map<unsigned long,int,std::less<unsigned long>,std::allocator<int> >::_Kfn,std::less<unsigned long>,std::allocator<int> >::const_iterator,std::_Tree<unsigned long,std::pai82cd74c1 {
}

struct std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn {
}

class std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::value_compare {
  /* this+0x0 */ struct std::less<unsigned long> comp;
}

class std::reverse_bidirectional_iterator<std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> >::iterat1eaf5d38 {
}

class std::reverse_bidirectional_iterator<std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> >::const_cce3e2dd {
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> >::iterator,std::_Tree<unsigned lon6a97b7e9 {
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,CellPos>,std::map<unsigned long,CellPos,std::less<unsigned long>,std::allocator<CellPos> >::_Kfn,std::less<unsigned long>,std::allocator<CellPos> >::const_iterator,std::_Tree<unsign9be7c5f2 {
}

struct std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn {
}

class std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::value_compare {
  /* this+0x0 */ struct std::less<unsigned long> comp;
}

class std::reverse_bidirectional_iterator<std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<Colb4c24d8e {
}

class std::reverse_bidirectional_iterator<std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<Cole0340bb9 {
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos> >::iterator,std41dab0e6 {
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos>,std::map<unsigned long,ColorCellPos,std::less<unsigned long>,std::allocator<ColorCellPos> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos> >::const_iterat01ab49ec {
}

struct std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn {
}

class std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::value_compare {
  /* this+0x0 */ struct std::less<unsigned long> comp;
}

struct ColorCellPos2 {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ int type;
  /* this+0xc */ unsigned long color;
  /* this+0x10 */ unsigned long startTime;
}

class std::reverse_bidirectional_iterator<std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<d3a3e1e8 {
}

class std::reverse_bidirectional_iterator<std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<20350459 {
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos2> >::iterator33f36f20 {
}

struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,ColorCellPos2>,std::map<unsigned long,ColorCellPos2,std::less<unsigned long>,std::allocator<ColorCellPos2> >::_Kfn,std::less<unsigned long>,std::allocator<ColorCellPos2> >::const_it16c622a7 {
}

class std::allocator<PLAY_WAVE_INFO> {
}

class std::reverse_iterator<PLAY_WAVE_INFO const *,PLAY_WAVE_INFO,PLAY_WAVE_INFO const &,PLAY_WAVE_INFO const *,int> {
}

class std::reverse_iterator<PLAY_WAVE_INFO *,PLAY_WAVE_INFO,PLAY_WAVE_INFO &,PLAY_WAVE_INFO *,int> {
}

struct ACTOR_COLOR {
  /* this+0x0 */ unsigned char a;
  /* this+0x1 */ unsigned char r;
  /* this+0x2 */ unsigned char g;
  /* this+0x3 */ unsigned char b;
}

struct std::list<SKILL_INFO,std::allocator<SKILL_INFO> >::_Acc {
}

class std::allocator<SKILL_INFO> {
}

class std::reverse_bidirectional_iterator<std::list<SKILL_INFO,std::allocator<SKILL_INFO> >::iterator,SKILL_INFO,SKILL_INFO &,SKILL_INFO *,int> {
}

class std::reverse_bidirectional_iterator<std::list<SKILL_INFO,std::allocator<SKILL_INFO> >::const_iterator,SKILL_INFO,SKILL_INFO const &,SKILL_INFO const *,int> {
}

class std::binder2nd<std::not_equal_to<SKILL_INFO> > {
  /* this+0x0 */ struct std::not_equal_to<SKILL_INFO> op;
  /* this+0x4 */ struct SKILL_INFO value;
}

struct std::not_equal_to<SKILL_INFO> {
}

struct std::greater<SKILL_INFO> {
}

struct std::list<QUEST_INFO,std::allocator<QUEST_INFO> >::_Acc {
}

class std::allocator<QUEST_INFO> {
}

class std::reverse_bidirectional_iterator<std::list<QUEST_INFO,std::allocator<QUEST_INFO> >::iterator,QUEST_INFO,QUEST_INFO &,QUEST_INFO *,int> {
}

class std::reverse_bidirectional_iterator<std::list<QUEST_INFO,std::allocator<QUEST_INFO> >::const_iterator,QUEST_INFO,QUEST_INFO const &,QUEST_INFO const *,int> {
}

class std::binder2nd<std::not_equal_to<QUEST_INFO> > {
  /* this+0x0 */ struct std::not_equal_to<QUEST_INFO> op;
  /* this+0x4 */ struct QUEST_INFO value;
}

struct std::not_equal_to<QUEST_INFO> {
}

struct std::greater<QUEST_INFO> {
}

class std::allocator<CHAT_PROHIBIT_LOG> {
}

class std::reverse_iterator<CHAT_PROHIBIT_LOG const *,CHAT_PROHIBIT_LOG,CHAT_PROHIBIT_LOG const &,CHAT_PROHIBIT_LOG const *,int> {
}

class std::reverse_iterator<CHAT_PROHIBIT_LOG *,CHAT_PROHIBIT_LOG,CHAT_PROHIBIT_LOG &,CHAT_PROHIBIT_LOG *,int> {
}

class std::allocator<REQ_ACCOUNT_AID> {
}

class std::reverse_iterator<REQ_ACCOUNT_AID const *,REQ_ACCOUNT_AID,REQ_ACCOUNT_AID const &,REQ_ACCOUNT_AID const *,int> {
}

class std::reverse_iterator<REQ_ACCOUNT_AID *,REQ_ACCOUNT_AID,REQ_ACCOUNT_AID &,REQ_ACCOUNT_AID *,int> {
}

class std::allocator<REQ_ACCOUNTNAME_INFO> {
}

class std::reverse_iterator<REQ_ACCOUNTNAME_INFO const *,REQ_ACCOUNTNAME_INFO,REQ_ACCOUNTNAME_INFO const &,REQ_ACCOUNTNAME_INFO const *,int> {
}

class std::reverse_iterator<REQ_ACCOUNTNAME_INFO *,REQ_ACCOUNTNAME_INFO,REQ_ACCOUNTNAME_INFO &,REQ_ACCOUNTNAME_INFO *,int> {
}

class std::allocator<FORCE_ANIM_TICK> {
}

class std::reverse_iterator<FORCE_ANIM_TICK const *,FORCE_ANIM_TICK,FORCE_ANIM_TICK const &,FORCE_ANIM_TICK const *,int> {
}

class std::reverse_iterator<FORCE_ANIM_TICK *,FORCE_ANIM_TICK,FORCE_ANIM_TICK &,FORCE_ANIM_TICK *,int> {
}

struct std::list<ITEM_INFO,std::allocator<ITEM_INFO> >::_Acc {
}

class std::allocator<ITEM_INFO> {
}

class std::reverse_bidirectional_iterator<std::list<ITEM_INFO,std::allocator<ITEM_INFO> >::iterator,ITEM_INFO,ITEM_INFO &,ITEM_INFO *,int> {
}

class std::reverse_bidirectional_iterator<std::list<ITEM_INFO,std::allocator<ITEM_INFO> >::const_iterator,ITEM_INFO,ITEM_INFO const &,ITEM_INFO const *,int> {
}

class std::binder2nd<std::not_equal_to<ITEM_INFO> > {
  /* this+0x0 */ struct std::not_equal_to<ITEM_INFO> op;
  /* this+0x4 */ struct ITEM_INFO value;
}

struct std::not_equal_to<ITEM_INFO> {
}

struct std::greater<ITEM_INFO> {
}

struct std::list<FRIEND_INFO,std::allocator<FRIEND_INFO> >::_Acc {
}

class std::allocator<FRIEND_INFO> {
}

class std::reverse_bidirectional_iterator<std::list<FRIEND_INFO,std::allocator<FRIEND_INFO> >::iterator,FRIEND_INFO,FRIEND_INFO &,FRIEND_INFO *,int> {
}

class std::reverse_bidirectional_iterator<std::list<FRIEND_INFO,std::allocator<FRIEND_INFO> >::const_iterator,FRIEND_INFO,FRIEND_INFO const &,FRIEND_INFO const *,int> {
}

class std::binder2nd<std::not_equal_to<FRIEND_INFO> > {
  /* this+0x0 */ struct std::not_equal_to<FRIEND_INFO> op;
  /* this+0x4 */ struct FRIEND_INFO value;
}

struct std::not_equal_to<FRIEND_INFO> {
}

struct std::greater<FRIEND_INFO> {
}

class std::allocator<std::pair<char const *,char const *> > {
}

class std::reverse_iterator<std::pair<char const *,char const *> const *,std::pair<char const *,char const *>,std::pair<char const *,char const *> const &,std::pair<char const *,char const *> const *,int> {
}

class std::reverse_iterator<std::pair<char const *,char const *> *,std::pair<char const *,char const *>,std::pair<char const *,char const *> &,std::pair<char const *,char const *> *,int> {
}

class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocabde66aac {
}

class std::reverse_iterator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std:84882627 {
}

class std::reverse_iterator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std:4c6daab5 {
}

class std::allocator<std::pair<char const *,bool> > {
}

class std::reverse_iterator<std::pair<char const *,bool> const *,std::pair<char const *,bool>,std::pair<char const *,bool> const &,std::pair<char const *,bool> const *,int> {
}

class std::reverse_iterator<std::pair<char const *,bool> *,std::pair<char const *,bool>,std::pair<char const *,bool> &,std::pair<char const *,bool> *,int> {
}

class std::allocator<std::pair<int,enum TALKTYPE> > {
}

class std::reverse_iterator<std::pair<int,enum TALKTYPE> const *,std::pair<int,enum TALKTYPE>,std::pair<int,enum TALKTYPE> const &,std::pair<int,enum TALKTYPE> const *,int> {
}

class std::reverse_iterator<std::pair<int,enum TALKTYPE> *,std::pair<int,enum TALKTYPE>,std::pair<int,enum TALKTYPE> &,std::pair<int,enum TALKTYPE> *,int> {
}

class std::allocator<std::pair<char const *,unsigned long> > {
}

class std::reverse_iterator<std::pair<char const *,unsigned long> const *,std::pair<char const *,unsigned long>,std::pair<char const *,unsigned long> const &,std::pair<char const *,unsigned long> const *,int> {
}

class std::reverse_iterator<std::pair<char const *,unsigned long> *,std::pair<char const *,unsigned long>,std::pair<char const *,unsigned long> &,std::pair<char const *,unsigned long> *,int> {
}

class std::allocator<MAIL_LIST> {
}

class std::reverse_iterator<MAIL_LIST const *,MAIL_LIST,MAIL_LIST const &,MAIL_LIST const *,int> {
}

class std::reverse_iterator<MAIL_LIST *,MAIL_LIST,MAIL_LIST &,MAIL_LIST *,int> {
}

class std::allocator<AUCTION_ITEM_SEARCH_INFO> {
}

class std::reverse_iterator<AUCTION_ITEM_SEARCH_INFO const *,AUCTION_ITEM_SEARCH_INFO,AUCTION_ITEM_SEARCH_INFO const &,AUCTION_ITEM_SEARCH_INFO const *,int> {
}

class std::reverse_iterator<AUCTION_ITEM_SEARCH_INFO *,AUCTION_ITEM_SEARCH_INFO,AUCTION_ITEM_SEARCH_INFO &,AUCTION_ITEM_SEARCH_INFO *,int> {
}

struct std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MapPosInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<MapPosInfo> >::_Kfn {
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MapPosInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<MapPosInfo> >::value_compare {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
}

class std::reverse_bidirectional_iterator<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,s53328cb2 {
}

class std::reverse_bidirectional_iterator<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,s919f32b4 {
}

struct std::pair<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,std::char_traits<char>,std:e7a3b94f {
}

struct std::pair<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::map<std::basic_string<char,std::char_traits<char>,std:eef42705 {
}

struct std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn {
}

class std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::value_compare {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> >::iterator,std::pair<int const ,MapPosInfo>,st5d776dd6 {
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> >::const_iterator,std::pair<int const ,MapPosIn715df67d {
}

struct std::pair<std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> >::iterator,std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,c9959001 {
}

struct std::pair<std::_Tree<int,std::pair<int const ,MapPosInfo>,std::map<int,MapPosInfo,std::less<int>,std::allocator<MapPosInfo> >::_Kfn,std::less<int>,std::allocator<MapPosInfo> >::const_iterator,std::_Tree<int,std::pair<int const ,MapPosInfo>,std::macf8e8860 {
}

struct std::list<C3dNodeRes *,std::allocator<C3dNodeRes *> >::_Acc {
}

class std::allocator<C3dNodeRes *> {
}

class std::reverse_bidirectional_iterator<std::list<C3dNodeRes *,std::allocator<C3dNodeRes *> >::iterator,C3dNodeRes *,C3dNodeRes * &,C3dNodeRes * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<C3dNodeRes *,std::allocator<C3dNodeRes *> >::const_iterator,C3dNodeRes *,C3dNodeRes * const &,C3dNodeRes * const *,int> {
}

class std::binder2nd<std::not_equal_to<C3dNodeRes *> > {
  /* this+0x0 */ struct std::not_equal_to<C3dNodeRes *> op;
  /* this+0x4 */ struct C3dNodeRes * value;
}

struct std::not_equal_to<C3dNodeRes *> {
}

struct std::greater<C3dNodeRes *> {
}

struct std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,C3dMesh *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<C3dMesh *> >::_Kfn {
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,C3dMesh *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<C3dMesh *> >::value_compare {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
}

class std::allocator<C3dMesh *> {
}

class std::reverse_bidirectional_iterator<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,stb535294d {
}

class std::reverse_bidirectional_iterator<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,stfb41511b {
}

struct std::pair<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,std::char_traits<char>,std::c997de2c {
}

struct std::pair<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::map<std::basic_string<char,std::char_traits<char>,std::5f4358db {
}

struct std::list<CVolumeBox *,std::allocator<CVolumeBox *> >::_Acc {
}

class std::allocator<CVolumeBox *> {
}

class std::reverse_bidirectional_iterator<std::list<CVolumeBox *,std::allocator<CVolumeBox *> >::iterator,CVolumeBox *,CVolumeBox * &,CVolumeBox * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<CVolumeBox *,std::allocator<CVolumeBox *> >::const_iterator,CVolumeBox *,CVolumeBox * const &,CVolumeBox * const *,int> {
}

class std::binder2nd<std::not_equal_to<CVolumeBox *> > {
  /* this+0x0 */ struct std::not_equal_to<CVolumeBox *> op;
  /* this+0x4 */ struct CVolumeBox * value;
}

struct std::not_equal_to<CVolumeBox *> {
}

struct std::greater<CVolumeBox *> {
}

struct std::unary_function<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
}

struct std::binary_function<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,bool> {
}

struct std::_Bidit<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,int> {
}

struct faceLight {
  /* this+0x0 */ unsigned long[0x3] color;
  /* this+0x0 */ struct COLOR[0x3] argb;
}

struct std::list<C3dAnimNodeRes *,std::allocator<C3dAnimNodeRes *> >::_Acc {
}

class std::reverse_bidirectional_iterator<std::list<C3dAnimNodeRes *,std::allocator<C3dAnimNodeRes *> >::iterator,C3dAnimNodeRes *,C3dAnimNodeRes * &,C3dAnimNodeRes * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<C3dAnimNodeRes *,std::allocator<C3dAnimNodeRes *> >::const_iterator,C3dAnimNodeRes *,C3dAnimNodeRes * const &,C3dAnimNodeRes * const *,int> {
}

class std::binder2nd<std::not_equal_to<C3dAnimNodeRes *> > {
  /* this+0x0 */ struct std::not_equal_to<C3dAnimNodeRes *> op;
  /* this+0x4 */ struct C3dAnimNodeRes * value;
}

struct std::not_equal_to<C3dAnimNodeRes *> {
}

struct std::greater<C3dAnimNodeRes *> {
}

struct granny_track_group {
  /* this+0x0 */ char * Name;
  /* this+0x4 */ int ScalarTrackCount;
  /* this+0x8 */ struct granny_scalar_track * ScalarTracks;
  /* this+0xc */ int TransformTrackCount;
  /* this+0x10 */ struct granny_transform_track * TransformTracks;
  /* this+0x14 */ int TextTrackCount;
  /* this+0x18 */ struct granny_text_track * TextTracks;
  /* this+0x1c */ struct granny_transform InitialPlacement;
  /* this+0x60 */ int AccumulationFlags;
  /* this+0x64 */ float[0x3] LoopTranslation;
  /* this+0x70 */ struct granny_periodic_loop * PeriodicLoop;
  /* this+0x74 */ struct granny_variant ExtendedData;
}

struct granny_camera {
  /* this+0x0 */ float WpOverHp;
  /* this+0x4 */ float WrOverHr;
  /* this+0x8 */ float WwOverHw;
  /* this+0xc */ float FOVY;
  /* this+0x10 */ float NearClipPlane;
  /* this+0x14 */ float FarClipPlane;
  /* this+0x18 */ float[0x4] Orientation;
  /* this+0x28 */ float[0x3] Position;
  /* this+0x34 */ float[0x3] EAR;
  /* this+0x40 */ float[0x3] Offset;
  /* this+0x4c */ float[0x4][0x4] View4x4;
  /* this+0x8c */ float[0x4][0x4] InverseView4x4;
  /* this+0xcc */ float[0x4][0x4] Projection4x4;
  /* this+0x10c */ float[0x4][0x4] InverseProjection4x4;
}

struct granny_local_pose {
}

struct granny_transform {
  /* this+0x0 */ unsigned int Flags;
  /* this+0x4 */ float[0x3] Position;
  /* this+0x10 */ float[0x4] Orientation;
  /* this+0x20 */ float[0x3][0x3] ScaleShear;
}

struct granny_model_mesh_binding {
  /* this+0x0 */ struct granny_mesh * Mesh;
}

struct granny_mesh_deformer {
}

struct granny_vertex_data {
  /* this+0x0 */ struct granny_data_type_definition * VertexType;
  /* this+0x4 */ int VertexCount;
  /* this+0x8 */ unsigned char * Vertices;
  /* this+0xc */ int VertexAnnotationSetCount;
  /* this+0x10 */ struct granny_vertex_annotation_set * VertexAnnotationSets;
}

struct granny_morph_target {
  /* this+0x0 */ char * ScalarName;
  /* this+0x4 */ struct granny_vertex_data * VertexData;
}

struct granny_tri_topology {
  /* this+0x0 */ int GroupCount;
  /* this+0x4 */ struct granny_tri_material_group * Groups;
  /* this+0x8 */ int IndexCount;
  /* this+0xc */ int * Indices;
  /* this+0x10 */ int IndexCount16;
  /* this+0x14 */ unsigned short * Indices16;
  /* this+0x18 */ int VertexToVertexCount;
  /* this+0x1c */ int * VertexToVertexMap;
  /* this+0x20 */ int VertexToTriangleCount;
  /* this+0x24 */ int * VertexToTriangleMap;
  /* this+0x28 */ int SideToNeighborCount;
  /* this+0x2c */ unsigned int * SideToNeighborMap;
  /* this+0x30 */ int BonesForTriangleCount;
  /* this+0x34 */ int * BonesForTriangle;
  /* this+0x38 */ int TriangleToBoneCount;
  /* this+0x3c */ int * TriangleToBoneIndices;
  /* this+0x40 */ int TriAnnotationSetCount;
  /* this+0x44 */ struct granny_tri_annotation_set * TriAnnotationSets;
}

struct granny_material_binding {
  /* this+0x0 */ struct granny_material * Material;
}

struct granny_bone_binding {
  /* this+0x0 */ char * BoneName;
  /* this+0x4 */ float[0x3] OBBMin;
  /* this+0x10 */ float[0x3] OBBMax;
  /* this+0x1c */ int TriangleCount;
  /* this+0x20 */ int * TriangleIndices;
}

struct granny_variant {
  /* this+0x0 */ struct granny_data_type_definition * Type;
  /* this+0x4 */ void * Object;
}

struct granny_grn_file_header {
  /* this+0x0 */ unsigned int Version;
  /* this+0x4 */ unsigned int TotalSize;
  /* this+0x8 */ unsigned int CRC;
  /* this+0xc */ unsigned int SectionArrayOffset;
  /* this+0x10 */ unsigned int SectionArrayCount;
  /* this+0x14 */ struct granny_grn_reference RootObjectTypeDefinition;
  /* this+0x1c */ struct granny_grn_reference RootObject;
  /* this+0x24 */ unsigned int TypeTag;
  /* this+0x28 */ unsigned int[0x4] ExtraTags;
}

struct granny_bone {
  /* this+0x0 */ char * Name;
  /* this+0x4 */ int ParentIndex;
  /* this+0x8 */ struct granny_transform LocalTransform;
  /* this+0x4c */ float[0x4][0x4] InverseWorld4x4;
  /* this+0x8c */ struct granny_light_info * LightInfo;
  /* this+0x90 */ struct granny_camera_info * CameraInfo;
  /* this+0x94 */ struct granny_variant ExtendedData;
}

struct granny_texture_image {
  /* this+0x0 */ int MIPLevelCount;
  /* this+0x4 */ struct granny_texture_mip_level * MIPLevels;
}

struct granny_material_map {
  /* this+0x0 */ char * Usage;
  /* this+0x4 */ struct granny_material * Material;
}

class std::allocator<PathNode *> {
}

class std::reverse_iterator<PathNode * const *,PathNode *,PathNode * const &,PathNode * const *,int> {
}

class std::reverse_iterator<PathNode * *,PathNode *,PathNode * &,PathNode * *,int> {
}

struct std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn {
}

class std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::value_compare {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> >::iterator,std::pair<int const ,PathNode *>,st933e51ef {
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> >::const_iterator,std::pair<int const ,PathNode0386f642 {
}

struct std::pair<std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> >::iterator,std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,0f7060a6 {
}

struct std::pair<std::_Tree<int,std::pair<int const ,PathNode *>,std::map<int,PathNode *,std::less<int>,std::allocator<PathNode *> >::_Kfn,std::less<int>,std::allocator<PathNode *> >::const_iterator,std::_Tree<int,std::pair<int const ,PathNode *>,std::ma58463259 {
}

struct std::_Bidit<std::pair<int const ,PathNode *>,int> {
}

struct global_State {
  /* this+0x0 */ struct stringtable strt;
  /* this+0xc */ union GCObject * rootgc;
  /* this+0x10 */ union GCObject * rootudata;
  /* this+0x14 */ union GCObject * tmudata;
  /* this+0x18 */ struct Mbuffer buff;
  /* this+0x20 */ unsigned long GCthreshold;
  /* this+0x24 */ unsigned long nblocks;
  /* this+0x28 */ function  * panic;
  /* this+0x30 */ struct lua_TObject _registry;
  /* this+0x40 */ struct lua_TObject _defaultmeta;
  /* this+0x50 */ struct lua_State * mainthread;
  /* this+0x58 */ struct Node[0x1] dummynode;
  /* this+0x80 */ union TString *[0xf] tmname;
}

struct std::list<WBA,std::allocator<WBA> >::_Acc {
}

class std::allocator<WBA> {
}

class std::reverse_bidirectional_iterator<std::list<WBA,std::allocator<WBA> >::iterator,WBA,WBA &,WBA *,int> {
}

class std::reverse_bidirectional_iterator<std::list<WBA,std::allocator<WBA> >::const_iterator,WBA,WBA const &,WBA const *,int> {
}

class std::binder2nd<std::not_equal_to<WBA> > {
  /* this+0x0 */ struct std::not_equal_to<WBA> op;
  /* this+0x4 */ struct WBA value;
}

struct std::not_equal_to<WBA> {
}

struct std::greater<WBA> {
}

struct std::list<CMsgEffect *,std::allocator<CMsgEffect *> >::_Acc {
}

class std::allocator<CMsgEffect *> {
}

class std::reverse_bidirectional_iterator<std::list<CMsgEffect *,std::allocator<CMsgEffect *> >::iterator,CMsgEffect *,CMsgEffect * &,CMsgEffect * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<CMsgEffect *,std::allocator<CMsgEffect *> >::const_iterator,CMsgEffect *,CMsgEffect * const &,CMsgEffect * const *,int> {
}

class std::binder2nd<std::not_equal_to<CMsgEffect *> > {
  /* this+0x0 */ struct std::not_equal_to<CMsgEffect *> op;
  /* this+0x4 */ class CMsgEffect * value;
}

struct std::not_equal_to<CMsgEffect *> {
}

struct std::greater<CMsgEffect *> {
}

class std::allocator<CSprRes *> {
}

class std::reverse_iterator<CSprRes * const *,CSprRes *,CSprRes * const &,CSprRes * const *,int> {
}

class std::reverse_iterator<CSprRes * *,CSprRes *,CSprRes * &,CSprRes * *,int> {
}

class std::allocator<CActRes *> {
}

class std::reverse_iterator<CActRes * const *,CActRes *,CActRes * const &,CActRes * const *,int> {
}

class std::reverse_iterator<CActRes * *,CActRes *,CActRes * &,CActRes * *,int> {
}

struct granny_system_clock {
  /* this+0x0 */ unsigned int[0x4] Data;
}

class std::allocator<vector3d> {
}

class std::reverse_iterator<vector3d const *,vector3d,vector3d const &,vector3d const *,int> {
}

class std::reverse_iterator<vector3d *,vector3d,vector3d &,vector3d *,int> {
}

struct objectSegment {
  /* this+0x0 */ struct vector3d pos;
  /* this+0xc */ struct vector3d deltaPos;
  /* this+0x18 */ float longitude;
  /* this+0x1c */ float latitude;
  /* this+0x20 */ struct matrix mat;
}

struct KAC_KEYFRAME {
  /* this+0x0 */ int iFrame;
  /* this+0x4 */ unsigned long dwType;
  /* this+0x8 */ struct KAC_XFORMDATA XformData;
}

struct TeiEffect {
  /* this+0x0 */ char life;
  /* this+0x2 */ short alphaB;
  /* this+0x4 */ short alphaT;
  /* this+0x6 */ short full_display_angle;
  /* this+0x8 */ float max_height;
  /* this+0xc */ int process;
  /* this+0x10 */ short RotStart;
  /* this+0x14 */ float[0x15] height;
  /* this+0x68 */ char[0x15] flag1;
  /* this+0x7e */ short rise_angle;
  /* this+0x80 */ float distance;
  /* this+0x84 */ struct vector3d vecB_now;
  /* this+0x90 */ struct vector3d vecT_now;
  /* this+0x9c */ struct vector3d vecB_pre;
  /* this+0xa8 */ struct vector3d vecT_pre;
}

struct PrimSegment {
  /* this+0x0 */ struct vector3d pos;
  /* this+0xc */ struct vector3d[0x4] segPos;
  /* this+0x3c */ float radius;
  /* this+0x40 */ float size;
  /* this+0x44 */ float longitude;
  /* this+0x48 */ struct matrix mat;
  /* this+0x78 */ int red;
  /* this+0x7c */ int green;
  /* this+0x80 */ int blue;
  /* this+0x84 */ float alpha;
  /* this+0x88 */ unsigned long argb;
}

struct std::list<CEffectPrim *,std::allocator<CEffectPrim *> >::_Node {
  /* this+0x0 */ struct std::list<CEffectPrim *,std::allocator<CEffectPrim *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<CEffectPrim *,std::allocator<CEffectPrim *> >::_Node * _Prev;
  /* this+0x8 */ class CEffectPrim * _Value;
}

struct std::list<CEffectPrim *,std::allocator<CEffectPrim *> >::_Acc {
}

class std::allocator<CEffectPrim *> {
}

class std::list<CEffectPrim *,std::allocator<CEffectPrim *> >::const_iterator {
  /* this+0x0 */ struct std::list<CEffectPrim *,std::allocator<CEffectPrim *> >::_Node * _Ptr;
}

class std::reverse_bidirectional_iterator<std::list<CEffectPrim *,std::allocator<CEffectPrim *> >::iterator,CEffectPrim *,CEffectPrim * &,CEffectPrim * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<CEffectPrim *,std::allocator<CEffectPrim *> >::const_iterator,CEffectPrim *,CEffectPrim * const &,CEffectPrim * const *,int> {
}

class std::binder2nd<std::not_equal_to<CEffectPrim *> > {
  /* this+0x0 */ struct std::not_equal_to<CEffectPrim *> op;
  /* this+0x4 */ class CEffectPrim * value;
}

struct std::not_equal_to<CEffectPrim *> {
}

struct std::greater<CEffectPrim *> {
}

class std::allocator<WeatherInfo> {
}

class std::reverse_iterator<WeatherInfo const *,WeatherInfo,WeatherInfo const &,WeatherInfo const *,int> {
}

class std::reverse_iterator<WeatherInfo *,WeatherInfo,WeatherInfo &,WeatherInfo *,int> {
}

struct _IJL_RECT {
  /* this+0x0 */ long left;
  /* this+0x4 */ long top;
  /* this+0x8 */ long right;
  /* this+0xc */ long bottom;
}

struct _QUANT_TABLE {
  /* this+0x0 */ int precision;
  /* this+0x4 */ int ident;
  /* this+0x8 */ short * elements;
  /* this+0xc */ short[0x54] elarray;
}

struct _HUFFMAN_TABLE {
  /* this+0x0 */ int huff_class;
  /* this+0x4 */ int ident;
  /* this+0x8 */ unsigned int[0x100] huffelem;
  /* this+0x408 */ unsigned short[0x100] huffval;
  /* this+0x608 */ unsigned short[0x11] mincode;
  /* this+0x62a */ short[0x12] maxcode;
  /* this+0x64e */ unsigned short[0x11] valptr;
}

struct _JPEGQuantTable {
  /* this+0x0 */ unsigned char * quantizer;
  /* this+0x4 */ unsigned char ident;
}

struct _JPEGHuffTable {
  /* this+0x0 */ unsigned char * bits;
  /* this+0x4 */ unsigned char * vals;
  /* this+0x8 */ unsigned char hclass;
  /* this+0x9 */ unsigned char ident;
}

struct _FRAME {
  /* this+0x0 */ int precision;
  /* this+0x4 */ int width;
  /* this+0x8 */ int height;
  /* this+0xc */ int MCUheight;
  /* this+0x10 */ int MCUwidth;
  /* this+0x14 */ int max_hsampling;
  /* this+0x18 */ int max_vsampling;
  /* this+0x1c */ int ncomps;
  /* this+0x20 */ int horMCU;
  /* this+0x24 */ long totalMCU;
  /* this+0x28 */ struct _FRAME_COMPONENT * comps;
  /* this+0x2c */ int restart_interv;
  /* this+0x30 */ int SeenAllDCScans;
  /* this+0x34 */ int SeenAllACScans;
}

struct _SCAN {
  /* this+0x0 */ int ncomps;
  /* this+0x4 */ int gray_scale;
  /* this+0x8 */ int start_spec;
  /* this+0xc */ int end_spec;
  /* this+0x10 */ int approx_high;
  /* this+0x14 */ int approx_low;
  /* this+0x18 */ unsigned int restart_interv;
  /* this+0x1c */ int curxMCU;
  /* this+0x20 */ int curyMCU;
  /* this+0x24 */ int[0x4] dc_diff;
  /* this+0x34 */ struct _SCAN_COMPONENT * comps;
}

struct _STATE {
  /* this+0x0 */ unsigned __int64 bit_buffer_64;
  /* this+0x8 */ unsigned int bit_buffer_32;
  /* this+0xc */ int bitbuf_bits_valid;
  /* this+0x10 */ unsigned char * cur_entropy_ptr;
  /* this+0x14 */ unsigned char * start_entropy_ptr;
  /* this+0x18 */ unsigned char * end_entropy_ptr;
  /* this+0x1c */ int entropy_bytes_processed;
  /* this+0x20 */ int entropy_buf_maxsize;
  /* this+0x24 */ int entropy_bytes_left;
  /* this+0x28 */ int Prog_EndOfBlock_Run;
  /* this+0x2c */ unsigned char * DIB_ptr;
  /* this+0x30 */ unsigned char unread_marker;
  /* this+0x34 */ enum _PROCESSOR_TYPE processor_type;
  /* this+0x38 */ int cur_scan_comp;
  /* this+0x3c */ void * file;
  /* this+0x40 */ unsigned char[0x1000] JPGBuffer;
}

struct _ENTROPYSTRUCT {
  /* this+0x0 */ unsigned int offset;
  /* this+0x4 */ int dcval1;
  /* this+0x8 */ int dcval2;
  /* this+0xc */ int dcval3;
  /* this+0x10 */ int dcval4;
  /* this+0x18 */ unsigned __int64 bit_buffer_64;
  /* this+0x20 */ int bitbuf_bits_valid;
  /* this+0x24 */ unsigned char unread_marker;
}

struct _RAW_DATA_TYPES_STATE {
  /* this+0x0 */ int data_type;
  /* this+0x4 */ unsigned short *[0x4] raw_ptrs;
}

struct _SAMPLING_STATE {
  /* this+0x0 */ short * top_row;
  /* this+0x4 */ short * cur_row;
  /* this+0x8 */ short * bottom_row;
  /* this+0xc */ short * last_row;
  /* this+0x10 */ int cur_row_number;
}

struct std::_Bidit<SKILL_INFO,int> {
}

struct std::unary_function<SKILL_INFO,bool> {
}

struct std::binary_function<SKILL_INFO,SKILL_INFO,bool> {
}

struct std::_Bidit<QUEST_INFO,int> {
}

struct std::unary_function<QUEST_INFO,bool> {
}

struct std::binary_function<QUEST_INFO,QUEST_INFO,bool> {
}

struct std::_Bidit<C3dNodeRes *,int> {
}

struct std::unary_function<C3dNodeRes *,bool> {
}

struct std::binary_function<C3dNodeRes *,C3dNodeRes *,bool> {
}

struct std::_Bidit<CVolumeBox *,int> {
}

struct std::unary_function<CVolumeBox *,bool> {
}

struct std::binary_function<CVolumeBox *,CVolumeBox *,bool> {
}

struct std::_Bidit<C3dAnimNodeRes *,int> {
}

struct std::unary_function<C3dAnimNodeRes *,bool> {
}

struct std::binary_function<C3dAnimNodeRes *,C3dAnimNodeRes *,bool> {
}

struct std::unary_function<std::pair<int const ,PathNode *>,int> {
}

struct std::binary_function<std::pair<int const ,PathNode *>,std::pair<int const ,PathNode *>,bool> {
}

struct std::binary_function<int,int,bool> {
}

struct std::_Bidit<CMsgEffect *,int> {
}

struct std::unary_function<CMsgEffect *,bool> {
}

struct std::binary_function<CMsgEffect *,CMsgEffect *,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,C3dNodeRes *,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,C3dAnimNodeRes *,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<int const ,PathNode *>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,CMsgEffect *,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,SKILL_INFO,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,QUEST_INFO,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,C3dMesh *>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,CVolumeBox *,int> {
}

struct std::unary_function<std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,int> {
}

struct std::binary_function<std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,bool> {
}

struct std::_Bidit<std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,int> {
}

struct std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn {
}

class std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::value_compare {
  /* this+0x0 */ struct std::less<long> comp;
}

struct std::less<long> {
}

class std::allocator<POINTER_FUNC> {
}

class std::reverse_bidirectional_iterator<std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> >::iterator,std::pair<long co18c7cce1 {
}

class std::reverse_bidirectional_iterator<std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> >::const_iterator,std::pair<l4746e24d {
}

struct std::pair<std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> >::iterator,std::_Tree<long,std::pair<long const ,POINT47174446 {
}

struct std::pair<std::_Tree<long,std::pair<long const ,POINTER_FUNC>,std::multimap<long,POINTER_FUNC,std::less<long>,std::allocator<POINTER_FUNC> >::_Kfn,std::less<long>,std::allocator<POINTER_FUNC> >::const_iterator,std::_Tree<long,std::pair<long const b16cafa7 {
}

struct std::unary_function<std::pair<int const ,ITEM_DESC>,int> {
}

struct std::binary_function<std::pair<int const ,ITEM_DESC>,std::pair<int const ,ITEM_DESC>,bool> {
}

struct std::_Bidit<std::pair<int const ,ITEM_DESC>,int> {
}

struct std::unary_function<std::pair<int const ,CARD_DESC>,int> {
}

struct std::binary_function<std::pair<int const ,CARD_DESC>,std::pair<int const ,CARD_DESC>,bool> {
}

struct std::_Bidit<std::pair<int const ,CARD_DESC>,int> {
}

struct granny_grn_reference {
  /* this+0x0 */ unsigned int SectionIndex;
  /* this+0x4 */ unsigned int Offset;
}

struct std::unary_function<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
}

struct std::binary_function<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,bool> {
}

struct std::_Bidit<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,int> {
}

struct std::unary_function<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
}

struct std::binary_function<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocato6f175b65 {
}

struct std::_Bidit<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,int> {
}

struct std::unary_function<std::pair<unsigned long const ,int>,unsigned long> {
}

struct std::binary_function<std::pair<unsigned long const ,int>,std::pair<unsigned long const ,int>,bool> {
}

struct std::binary_function<unsigned long,unsigned long,bool> {
}

struct std::_Bidit<std::pair<unsigned long const ,int>,int> {
}

struct std::unary_function<std::pair<unsigned long const ,ColorCellPos>,unsigned long> {
}

struct std::binary_function<std::pair<unsigned long const ,ColorCellPos>,std::pair<unsigned long const ,ColorCellPos>,bool> {
}

struct std::_Bidit<std::pair<unsigned long const ,ColorCellPos>,int> {
}

struct std::_Bidit<CEffectPrim *,int> {
}

struct std::unary_function<CEffectPrim *,bool> {
}

struct std::binary_function<CEffectPrim *,CEffectPrim *,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,CEffectPrim *,int> {
}

struct std::unary_function<std::pair<unsigned long const ,NamePair>,unsigned long> {
}

struct std::binary_function<std::pair<unsigned long const ,NamePair>,std::pair<unsigned long const ,NamePair>,bool> {
}

struct std::_Bidit<std::pair<unsigned long const ,NamePair>,int> {
}

struct std::unary_function<std::pair<int const ,QUEST_DESC>,int> {
}

struct std::binary_function<std::pair<int const ,QUEST_DESC>,std::pair<int const ,QUEST_DESC>,bool> {
}

struct std::_Bidit<std::pair<int const ,QUEST_DESC>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,int> {
}

struct std::unary_function<std::pair<unsigned long const ,CellPos>,unsigned long> {
}

struct std::binary_function<std::pair<unsigned long const ,CellPos>,std::pair<unsigned long const ,CellPos>,bool> {
}

struct std::_Bidit<std::pair<unsigned long const ,CellPos>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<unsigned long const ,ColorCellPos>,int> {
}

struct std::_Bidit<FRIEND_INFO,int> {
}

struct std::unary_function<FRIEND_INFO,bool> {
}

struct std::binary_function<FRIEND_INFO,FRIEND_INFO,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,FRIEND_INFO,int> {
}

struct std::_Bidit<WBA,int> {
}

struct std::unary_function<WBA,bool> {
}

struct std::binary_function<WBA,WBA,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,WBA,int> {
}

struct std::unary_function<std::pair<unsigned long const ,ColorCellPos2>,unsigned long> {
}

struct std::binary_function<std::pair<unsigned long const ,ColorCellPos2>,std::pair<unsigned long const ,ColorCellPos2>,bool> {
}

struct std::_Bidit<std::pair<unsigned long const ,ColorCellPos2>,int> {
}

struct std::_Bidit<unsigned long,int> {
}

struct std::unary_function<unsigned long,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,unsigned long,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<int const ,QUEST_DESC>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<int const ,CARD_DESC>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,MapPosInfo>,int> {
}

struct std::unary_function<std::pair<int const ,MapPosInfo>,int> {
}

struct std::binary_function<std::pair<int const ,MapPosInfo>,std::pair<int const ,MapPosInfo>,bool> {
}

struct std::_Bidit<std::pair<int const ,MapPosInfo>,int> {
}

struct std::unary_function<std::pair<unsigned long const ,unsigned long>,unsigned long> {
}

struct std::binary_function<std::pair<unsigned long const ,unsigned long>,std::pair<unsigned long const ,unsigned long>,bool> {
}

struct std::_Bidit<std::pair<unsigned long const ,unsigned long>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<int const ,std::vector<char const *,std::allocator<char const *> > >,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<unsigned long const ,CellPos>,int> {
}

struct std::_Bidit<ITEM_INFO,int> {
}

struct std::unary_function<ITEM_INFO,bool> {
}

struct std::binary_function<ITEM_INFO,ITEM_INFO,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,ITEM_INFO,int> {
}

struct std::unary_function<std::pair<int const ,SKILL_DESC>,int> {
}

struct std::binary_function<std::pair<int const ,SKILL_DESC>,std::pair<int const ,SKILL_DESC>,bool> {
}

struct std::_Bidit<std::pair<int const ,SKILL_DESC>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<int const ,MapPosInfo>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<int const ,ITEM_DESC>,int> {
}

struct std::unary_function<std::pair<long const ,POINTER_FUNC>,long> {
}

struct std::binary_function<std::pair<long const ,POINTER_FUNC>,std::pair<long const ,POINTER_FUNC>,bool> {
}

struct std::binary_function<long,long,bool> {
}

struct std::_Bidit<std::pair<long const ,POINTER_FUNC>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<unsigned long const ,NamePair>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<unsigned long const ,unsigned long>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<int const ,SKILL_DESC>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<unsigned long const ,int>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<unsigned long const ,ColorCellPos2>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<long const ,POINTER_FUNC>,int> {
}

struct _FRAME_COMPONENT {
  /* this+0x0 */ int ident;
  /* this+0x4 */ int hsampling;
  /* this+0x8 */ int vsampling;
  /* this+0xc */ int quant_sel;
}

struct _SCAN_COMPONENT {
  /* this+0x0 */ int comp;
  /* this+0x4 */ int hsampling;
  /* this+0x8 */ int vsampling;
  /* this+0xc */ struct _HUFFMAN_TABLE * dc_table;
  /* this+0x10 */ struct _HUFFMAN_TABLE * ac_table;
  /* this+0x14 */ struct _QUANT_TABLE * quant_table;
}

struct granny_texture_mip_level {
  /* this+0x0 */ int Stride;
  /* this+0x4 */ int Size;
  /* this+0x8 */ void * Pixels;
}

struct granny_vertex_annotation_set {
  /* this+0x0 */ const char * Name;
  /* this+0x4 */ struct granny_data_type_definition * VertexAnnotationType;
  /* this+0x8 */ int VertexAnnotationCount;
  /* this+0xc */ unsigned char * VertexAnnotations;
  /* this+0x10 */ int VertexAnnotationIndexCount;
  /* this+0x14 */ int * VertexAnnotationIndices;
}

struct granny_tri_material_group {
  /* this+0x0 */ int MaterialIndex;
  /* this+0x4 */ int TriFirst;
  /* this+0x8 */ int TriCount;
}

struct granny_tri_annotation_set {
  /* this+0x0 */ const char * Name;
  /* this+0x4 */ struct granny_data_type_definition * TriAnnotationType;
  /* this+0x8 */ int TriAnnotationCount;
  /* this+0xc */ unsigned char * TriAnnotations;
  /* this+0x10 */ int TriAnnotationIndexCount;
  /* this+0x14 */ int * TriAnnotationIndices;
}

struct granny_scalar_track {
  /* this+0x0 */ char * Name;
  /* this+0x4 */ struct granny_curve ValueCurve;
}

struct granny_transform_track {
  /* this+0x0 */ char * Name;
  /* this+0x4 */ struct granny_curve PositionCurve;
  /* this+0x18 */ struct granny_curve OrientationCurve;
  /* this+0x2c */ struct granny_curve ScaleShearCurve;
}

struct granny_text_track {
  /* this+0x0 */ char * Name;
  /* this+0x4 */ int EntryCount;
  /* this+0x8 */ struct granny_text_track_entry * Entries;
}

struct granny_periodic_loop {
  /* this+0x0 */ float Radius;
  /* this+0x4 */ float dAngle;
  /* this+0x8 */ float dZ;
  /* this+0xc */ float[0x3] BasisX;
  /* this+0x18 */ float[0x3] BasisY;
  /* this+0x24 */ float[0x3] Axis;
}

struct granny_light_info {
  /* this+0x0 */ struct granny_variant ExtendedData;
}

struct granny_camera_info {
  /* this+0x0 */ struct granny_variant ExtendedData;
}

class std::allocator<CRagEffect *> {
}

class std::reverse_bidirectional_iterator<std::list<CRagEffect *,std::allocator<CRagEffect *> >::iterator,CRagEffect *,CRagEffect * &,CRagEffect * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<CRagEffect *,std::allocator<CRagEffect *> >::const_iterator,CRagEffect *,CRagEffect * const &,CRagEffect * const *,int> {
}

class std::binder2nd<std::not_equal_to<CRagEffect *> > {
  /* this+0x0 */ struct std::not_equal_to<CRagEffect *> op;
  /* this+0x4 */ class CRagEffect * value;
}

struct std::not_equal_to<CRagEffect *> {
}

struct std::greater<CRagEffect *> {
}

class std::allocator<PathCell> {
}

class std::reverse_iterator<PathCell const *,PathCell,PathCell const &,PathCell const *,int> {
}

class std::reverse_iterator<PathCell *,PathCell,PathCell &,PathCell *,int> {
}

struct granny_curve {
  /* this+0x0 */ int Degree;
  /* this+0x4 */ int KnotCount;
  /* this+0x8 */ float * Knots;
  /* this+0xc */ int ControlCount;
  /* this+0x10 */ float * Controls;
}

struct granny_text_track_entry {
  /* this+0x0 */ float TimeStamp;
  /* this+0x4 */ char * Text;
}

class std::list<coder_data,std::allocator<coder_data> > {
  /* this+0x0 */ class std::allocator<coder_data> allocator;
  /* this+0x4 */ struct std::list<coder_data,std::allocator<coder_data> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

struct std::list<coder_data,std::allocator<coder_data> >::_Node {
  /* this+0x0 */ struct std::list<coder_data,std::allocator<coder_data> >::_Node * _Next;
  /* this+0x4 */ struct std::list<coder_data,std::allocator<coder_data> >::_Node * _Prev;
  /* this+0x8 */ struct coder_data _Value;
}

struct std::list<coder_data,std::allocator<coder_data> >::_Acc {
}

class std::allocator<coder_data> {
}

class std::list<coder_data,std::allocator<coder_data> >::const_iterator {
  /* this+0x0 */ struct std::list<coder_data,std::allocator<coder_data> >::_Node * _Ptr;
}

class std::reverse_bidirectional_iterator<std::list<coder_data,std::allocator<coder_data> >::iterator,coder_data,coder_data &,coder_data *,int> {
}

class std::reverse_bidirectional_iterator<std::list<coder_data,std::allocator<coder_data> >::const_iterator,coder_data,coder_data const &,coder_data const *,int> {
}

class std::binder2nd<std::not_equal_to<coder_data> > {
  /* this+0x0 */ struct std::not_equal_to<coder_data> op;
  /* this+0x4 */ struct coder_data value;
}

struct std::not_equal_to<coder_data> {
}

struct std::greater<coder_data> {
}

struct std::_Bidit<coder_data,int> {
}

struct std::unary_function<coder_data,bool> {
}

struct std::binary_function<coder_data,coder_data,bool> {
}

struct std::unary_function<std::pair<int const ,int>,int> {
}

struct std::binary_function<std::pair<int const ,int>,std::pair<int const ,int>,bool> {
}

struct std::_Bidit<std::pair<int const ,int>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,coder_data,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<int const ,int>,int> {
}

struct CSequenceRandomGenerator::tagGenerator {
  /* this+0x0 */ unsigned char bExist;
  /* this+0x4 */ int holdrand;
  /* this+0x8 */ int addfactor;
  /* this+0xc */ int mulfactor;
  /* this+0x10 */ unsigned int deformed_seed_factor;
  /* this+0x14 */ unsigned int deformed_add_factor;
  /* this+0x18 */ unsigned long issue_time;
}

struct CSequenceRandomGenerator::tagSeedFactor {
  /* this+0x0 */ struct CSequenceRandomGenerator::tagSeedFactor::__unnamed::tagBit bit;
  /* this+0x0 */ unsigned int seedfactor;
}

struct CSequenceRandomGenerator::tagSeedFactor::__unnamed::tagBit {
}

class std::allocator<CAttrCell> {
}

class std::reverse_iterator<CAttrCell const *,CAttrCell,CAttrCell const &,CAttrCell const *,int> {
}

class std::reverse_iterator<CAttrCell *,CAttrCell,CAttrCell &,CAttrCell *,int> {
}

class std::allocator<std::vector<ImfData,std::allocator<ImfData> > > {
}

class std::reverse_iterator<std::vector<ImfData,std::allocator<ImfData> > const *,std::vector<ImfData,std::allocator<ImfData> >,std::vector<ImfData,std::allocator<ImfData> > const &,std::vector<ImfData,std::allocator<ImfData> > const *,int> {
}

class std::reverse_iterator<std::vector<ImfData,std::allocator<ImfData> > *,std::vector<ImfData,std::allocator<ImfData> >,std::vector<ImfData,std::allocator<ImfData> > &,std::vector<ImfData,std::allocator<ImfData> > *,int> {
}

class std::allocator<CGndSurface> {
}

class std::reverse_iterator<CGndSurface const *,CGndSurface,CGndSurface const &,CGndSurface const *,int> {
}

class std::reverse_iterator<CGndSurface *,CGndSurface,CGndSurface &,CGndSurface *,int> {
}

class std::reverse_iterator<LightmapRGBIntensity const *,LightmapRGBIntensity,LightmapRGBIntensity const &,LightmapRGBIntensity const *,int> {
}

class std::reverse_iterator<LightmapRGBIntensity *,LightmapRGBIntensity,LightmapRGBIntensity &,LightmapRGBIntensity *,int> {
}

class std::reverse_iterator<CGndCell const *,CGndCell,CGndCell const &,CGndCell const *,int> {
}

class std::reverse_iterator<CGndCell *,CGndCell,CGndCell &,CGndCell *,int> {
}

struct std::list<CGameObject *,std::allocator<CGameObject *> >::_Acc {
}

class std::allocator<CGameObject *> {
}

class std::reverse_bidirectional_iterator<std::list<CGameObject *,std::allocator<CGameObject *> >::iterator,CGameObject *,CGameObject * &,CGameObject * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<CGameObject *,std::allocator<CGameObject *> >::const_iterator,CGameObject *,CGameObject * const &,CGameObject * const *,int> {
}

class std::binder2nd<std::not_equal_to<CGameObject *> > {
  /* this+0x0 */ struct std::not_equal_to<CGameObject *> op;
  /* this+0x4 */ class CGameObject * value;
}

struct std::not_equal_to<CGameObject *> {
}

struct std::greater<CGameObject *> {
}

struct std::list<CGameActor *,std::allocator<CGameActor *> >::_Acc {
}

class std::allocator<CGameActor *> {
}

class std::reverse_bidirectional_iterator<std::list<CGameActor *,std::allocator<CGameActor *> >::iterator,CGameActor *,CGameActor * &,CGameActor * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<CGameActor *,std::allocator<CGameActor *> >::const_iterator,CGameActor *,CGameActor * const &,CGameActor * const *,int> {
}

class std::binder2nd<std::not_equal_to<CGameActor *> > {
  /* this+0x0 */ struct std::not_equal_to<CGameActor *> op;
  /* this+0x4 */ class CGameActor * value;
}

struct std::not_equal_to<CGameActor *> {
}

struct std::greater<CGameActor *> {
}

struct std::list<CItem *,std::allocator<CItem *> >::_Acc {
}

class std::allocator<CItem *> {
}

class std::reverse_bidirectional_iterator<std::list<CItem *,std::allocator<CItem *> >::iterator,CItem *,CItem * &,CItem * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<CItem *,std::allocator<CItem *> >::const_iterator,CItem *,CItem * const &,CItem * const *,int> {
}

class std::binder2nd<std::not_equal_to<CItem *> > {
  /* this+0x0 */ struct std::not_equal_to<CItem *> op;
  /* this+0x4 */ class CItem * value;
}

struct std::not_equal_to<CItem *> {
}

struct std::greater<CItem *> {
}

struct std::list<CSkill *,std::allocator<CSkill *> >::_Acc {
}

class std::allocator<CSkill *> {
}

class std::reverse_bidirectional_iterator<std::list<CSkill *,std::allocator<CSkill *> >::iterator,CSkill *,CSkill * &,CSkill * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<CSkill *,std::allocator<CSkill *> >::const_iterator,CSkill *,CSkill * const &,CSkill * const *,int> {
}

class std::binder2nd<std::not_equal_to<CSkill *> > {
  /* this+0x0 */ struct std::not_equal_to<CSkill *> op;
  /* this+0x4 */ class CSkill * value;
}

struct std::not_equal_to<CSkill *> {
}

struct std::greater<CSkill *> {
}

class std::allocator<C3dActor *> {
}

class std::reverse_iterator<C3dActor * const *,C3dActor *,C3dActor * const &,C3dActor * const *,int> {
}

class std::reverse_iterator<C3dActor * *,C3dActor *,C3dActor * &,C3dActor * *,int> {
}

struct std::list<C3dWorldRes::actorInfo *,std::allocator<C3dWorldRes::actorInfo *> >::_Acc {
}

class std::allocator<C3dWorldRes::actorInfo *> {
}

class std::reverse_bidirectional_iterator<std::list<C3dWorldRes::actorInfo *,std::allocator<C3dWorldRes::actorInfo *> >::iterator,C3dWorldRes::actorInfo *,C3dWorldRes::actorInfo * &,C3dWorldRes::actorInfo * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<C3dWorldRes::actorInfo *,std::allocator<C3dWorldRes::actorInfo *> >::const_iterator,C3dWorldRes::actorInfo *,C3dWorldRes::actorInfo * const &,C3dWorldRes::actorInfo * const *,int> {
}

class std::binder2nd<std::not_equal_to<C3dWorldRes::actorInfo *> > {
  /* this+0x0 */ struct std::not_equal_to<C3dWorldRes::actorInfo *> op;
  /* this+0x4 */ struct C3dWorldRes::actorInfo * value;
}

struct std::not_equal_to<C3dWorldRes::actorInfo *> {
}

struct std::greater<C3dWorldRes::actorInfo *> {
}

struct std::list<C3dWorldRes::effectSrcInfo *,std::allocator<C3dWorldRes::effectSrcInfo *> >::_Acc {
}

class std::allocator<C3dWorldRes::effectSrcInfo *> {
}

class std::reverse_bidirectional_iterator<std::list<C3dWorldRes::effectSrcInfo *,std::allocator<C3dWorldRes::effectSrcInfo *> >::iterator,C3dWorldRes::effectSrcInfo *,C3dWorldRes::effectSrcInfo * &,C3dWorldRes::effectSrcInfo * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<C3dWorldRes::effectSrcInfo *,std::allocator<C3dWorldRes::effectSrcInfo *> >::const_iterator,C3dWorldRes::effectSrcInfo *,C3dWorldRes::effectSrcInfo * const &,C3dWorldRes::effectSrcInfo * const *,int> {
}

class std::binder2nd<std::not_equal_to<C3dWorldRes::effectSrcInfo *> > {
  /* this+0x0 */ struct std::not_equal_to<C3dWorldRes::effectSrcInfo *> op;
  /* this+0x4 */ struct C3dWorldRes::effectSrcInfo * value;
}

struct std::not_equal_to<C3dWorldRes::effectSrcInfo *> {
}

struct std::greater<C3dWorldRes::effectSrcInfo *> {
}

struct std::list<C3dWorldRes::soundSrcInfo *,std::allocator<C3dWorldRes::soundSrcInfo *> >::_Acc {
}

class std::allocator<C3dWorldRes::soundSrcInfo *> {
}

class std::reverse_bidirectional_iterator<std::list<C3dWorldRes::soundSrcInfo *,std::allocator<C3dWorldRes::soundSrcInfo *> >::iterator,C3dWorldRes::soundSrcInfo *,C3dWorldRes::soundSrcInfo * &,C3dWorldRes::soundSrcInfo * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<C3dWorldRes::soundSrcInfo *,std::allocator<C3dWorldRes::soundSrcInfo *> >::const_iterator,C3dWorldRes::soundSrcInfo *,C3dWorldRes::soundSrcInfo * const &,C3dWorldRes::soundSrcInfo * const *,int> {
}

class std::binder2nd<std::not_equal_to<C3dWorldRes::soundSrcInfo *> > {
  /* this+0x0 */ struct std::not_equal_to<C3dWorldRes::soundSrcInfo *> op;
  /* this+0x4 */ struct C3dWorldRes::soundSrcInfo * value;
}

struct std::not_equal_to<C3dWorldRes::soundSrcInfo *> {
}

struct std::greater<C3dWorldRes::soundSrcInfo *> {
}

struct std::list<int,std::allocator<int> >::_Acc {
}

class std::reverse_bidirectional_iterator<std::list<int,std::allocator<int> >::iterator,int,int &,int *,int> {
}

class std::reverse_bidirectional_iterator<std::list<int,std::allocator<int> >::const_iterator,int,int const &,int const *,int> {
}

class std::binder2nd<std::not_equal_to<int> > {
  /* this+0x0 */ struct std::not_equal_to<int> op;
  /* this+0x4 */ int value;
}

struct std::not_equal_to<int> {
}

struct std::greater<int> {
}

struct std::_Bidit<int,int> {
}

struct std::unary_function<int,bool> {
}

struct granny_string_table {
  /* this+0x0 */ int StringCount;
  /* this+0x4 */ int * StringOffsets;
  /* this+0x8 */ int CharacterCount;
  /* this+0xc */ unsigned char * Characters;
}

struct granny_art_tool_info {
  /* this+0x0 */ char * FromArtToolName;
  /* this+0x4 */ int ArtToolMajorRevision;
  /* this+0x8 */ int ArtToolMinorRevision;
  /* this+0xc */ float UnitsPerMeter;
  /* this+0x10 */ float[0x3] Origin;
  /* this+0x1c */ float[0x3] RightVector;
  /* this+0x28 */ float[0x3] UpVector;
  /* this+0x34 */ float[0x3] BackVector;
}

struct granny_exporter_info {
  /* this+0x0 */ char * ExporterName;
  /* this+0x4 */ int ExporterMajorRevision;
  /* this+0x8 */ int ExporterMinorRevision;
  /* this+0xc */ int ExporterCustomization;
  /* this+0x10 */ int ExporterBuildNumber;
}

struct std::_Bidit<C3dWorldRes::actorInfo *,int> {
}

struct std::unary_function<C3dWorldRes::actorInfo *,bool> {
}

struct std::binary_function<C3dWorldRes::actorInfo *,C3dWorldRes::actorInfo *,bool> {
}

struct std::_Bidit<C3dWorldRes::effectSrcInfo *,int> {
}

struct std::unary_function<C3dWorldRes::effectSrcInfo *,bool> {
}

struct std::binary_function<C3dWorldRes::effectSrcInfo *,C3dWorldRes::effectSrcInfo *,bool> {
}

struct std::_Bidit<C3dWorldRes::soundSrcInfo *,int> {
}

struct std::unary_function<C3dWorldRes::soundSrcInfo *,bool> {
}

struct std::binary_function<C3dWorldRes::soundSrcInfo *,C3dWorldRes::soundSrcInfo *,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,int,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,C3dWorldRes::actorInfo *,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,C3dWorldRes::effectSrcInfo *,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,C3dWorldRes::soundSrcInfo *,int> {
}

struct std::list<SceneGraphNode *,std::allocator<SceneGraphNode *> >::_Acc {
}

class std::allocator<SceneGraphNode *> {
}

class std::reverse_bidirectional_iterator<std::list<SceneGraphNode *,std::allocator<SceneGraphNode *> >::iterator,SceneGraphNode *,SceneGraphNode * &,SceneGraphNode * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<SceneGraphNode *,std::allocator<SceneGraphNode *> >::const_iterator,SceneGraphNode *,SceneGraphNode * const &,SceneGraphNode * const *,int> {
}

class std::binder2nd<std::not_equal_to<SceneGraphNode *> > {
  /* this+0x0 */ struct std::not_equal_to<SceneGraphNode *> op;
  /* this+0x4 */ struct SceneGraphNode * value;
}

struct std::not_equal_to<SceneGraphNode *> {
}

struct std::greater<SceneGraphNode *> {
}

struct std::_Bidit<CGameObject *,int> {
}

struct std::unary_function<CGameObject *,bool> {
}

struct std::binary_function<CGameObject *,CGameObject *,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,CGameObject *,int> {
}

struct std::_Bidit<SceneGraphNode *,int> {
}

struct std::unary_function<SceneGraphNode *,bool> {
}

struct std::binary_function<SceneGraphNode *,SceneGraphNode *,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,SceneGraphNode *,int> {
}

struct std::_Bidit<CGameActor *,int> {
}

struct std::unary_function<CGameActor *,bool> {
}

struct std::binary_function<CGameActor *,CGameActor *,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,CGameActor *,int> {
}

struct std::_Bidit<CSkill *,int> {
}

struct std::unary_function<CSkill *,bool> {
}

struct std::binary_function<CSkill *,CSkill *,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,CSkill *,int> {
}

struct std::_Bidit<CItem *,int> {
}

struct std::unary_function<CItem *,bool> {
}

struct std::binary_function<CItem *,CItem *,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,CItem *,int> {
}

class std::allocator<CLightmap> {
}

class std::reverse_iterator<CLightmap const *,CLightmap,CLightmap const &,CLightmap const *,int> {
}

class std::reverse_iterator<CLightmap *,CLightmap,CLightmap &,CLightmap *,int> {
}

class std::reverse_iterator<CTexture * const *,CTexture *,CTexture * const &,CTexture * const *,int> {
}

class std::reverse_iterator<CTexture * *,CTexture *,CTexture * &,CTexture * *,int> {
  /* this+0x0 */ class CTexture * * current;
}

struct std::list<C3dNode *,std::allocator<C3dNode *> >::_Acc {
}

class std::allocator<C3dNode *> {
}

class std::reverse_bidirectional_iterator<std::list<C3dNode *,std::allocator<C3dNode *> >::iterator,C3dNode *,C3dNode * &,C3dNode * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<C3dNode *,std::allocator<C3dNode *> >::const_iterator,C3dNode *,C3dNode * const &,C3dNode * const *,int> {
}

class std::binder2nd<std::not_equal_to<C3dNode *> > {
  /* this+0x0 */ struct std::not_equal_to<C3dNode *> op;
  /* this+0x4 */ class C3dNode * value;
}

struct std::not_equal_to<C3dNode *> {
}

struct std::greater<C3dNode *> {
}

class std::allocator<C3dNode::ColorInfo> {
}

class std::reverse_iterator<C3dNode::ColorInfo const *,C3dNode::ColorInfo,C3dNode::ColorInfo const &,C3dNode::ColorInfo const *,int> {
}

class std::reverse_iterator<C3dNode::ColorInfo *,C3dNode::ColorInfo,C3dNode::ColorInfo &,C3dNode::ColorInfo *,int> {
}

class std::allocator<StringId> {
}

class std::reverse_iterator<StringId const *,StringId,StringId const &,StringId const *,int> {
}

class std::reverse_iterator<StringId *,StringId,StringId &,StringId *,int> {
}

struct std::list<UIBitmapButton *,std::allocator<UIBitmapButton *> >::_Acc {
}

class std::allocator<UIBitmapButton *> {
}

class std::reverse_bidirectional_iterator<std::list<UIBitmapButton *,std::allocator<UIBitmapButton *> >::iterator,UIBitmapButton *,UIBitmapButton * &,UIBitmapButton * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<UIBitmapButton *,std::allocator<UIBitmapButton *> >::const_iterator,UIBitmapButton *,UIBitmapButton * const &,UIBitmapButton * const *,int> {
}

class std::binder2nd<std::not_equal_to<UIBitmapButton *> > {
  /* this+0x0 */ struct std::not_equal_to<UIBitmapButton *> op;
  /* this+0x4 */ class UIBitmapButton * value;
}

struct std::not_equal_to<UIBitmapButton *> {
}

struct std::greater<UIBitmapButton *> {
}

struct std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<unsigned long> >::_Kfn {
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<unsigned long> >::value_compare {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
}

class std::reverse_bidirectional_iterator<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<chad7569dee {
}

class std::reverse_bidirectional_iterator<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<cha5806d96c {
}

struct std::pair<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<char,std::char_traits<char>,s5c2ee12c {
}

struct std::pair<std::_Tree<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::map<std::basic_string<char,std::char_traits<char>,s3499a93a {
}

struct std::list<PartyMapInfo,std::allocator<PartyMapInfo> >::_Acc {
}

class std::allocator<PartyMapInfo> {
}

class std::reverse_bidirectional_iterator<std::list<PartyMapInfo,std::allocator<PartyMapInfo> >::iterator,PartyMapInfo,PartyMapInfo &,PartyMapInfo *,int> {
}

class std::reverse_bidirectional_iterator<std::list<PartyMapInfo,std::allocator<PartyMapInfo> >::const_iterator,PartyMapInfo,PartyMapInfo const &,PartyMapInfo const *,int> {
}

class std::binder2nd<std::not_equal_to<PartyMapInfo> > {
  /* this+0x0 */ struct std::not_equal_to<PartyMapInfo> op;
  /* this+0x4 */ struct PartyMapInfo value;
}

struct std::not_equal_to<PartyMapInfo> {
}

struct std::greater<PartyMapInfo> {
}

struct std::list<SnapObject *,std::allocator<SnapObject *> >::_Acc {
}

class std::allocator<SnapObject *> {
}

class std::reverse_bidirectional_iterator<std::list<SnapObject *,std::allocator<SnapObject *> >::iterator,SnapObject *,SnapObject * &,SnapObject * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<SnapObject *,std::allocator<SnapObject *> >::const_iterator,SnapObject *,SnapObject * const &,SnapObject * const *,int> {
}

class std::binder2nd<std::not_equal_to<SnapObject *> > {
  /* this+0x0 */ struct std::not_equal_to<SnapObject *> op;
  /* this+0x4 */ class SnapObject * value;
}

struct std::not_equal_to<SnapObject *> {
}

struct std::greater<SnapObject *> {
}

struct std::_Bidit<SnapObject *,int> {
}

struct std::unary_function<SnapObject *,bool> {
}

struct std::binary_function<SnapObject *,SnapObject *,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,SnapObject *,int> {
}

struct std::unary_function<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
}

struct std::binary_function<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,bool> {
}

struct std::_Bidit<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,int> {
}

struct std::_Bidit<UIBitmapButton *,int> {
}

struct std::unary_function<UIBitmapButton *,bool> {
}

struct std::binary_function<UIBitmapButton *,UIBitmapButton *,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,UIBitmapButton *,int> {
}

struct std::_Bidit<PartyMapInfo,int> {
}

struct std::unary_function<PartyMapInfo,bool> {
}

struct std::binary_function<PartyMapInfo,PartyMapInfo,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,PartyMapInfo,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,int> {
}

struct std::list<REPAIRITEM_INFO,std::allocator<REPAIRITEM_INFO> >::_Acc {
}

class std::allocator<REPAIRITEM_INFO> {
}

class std::reverse_bidirectional_iterator<std::list<REPAIRITEM_INFO,std::allocator<REPAIRITEM_INFO> >::iterator,REPAIRITEM_INFO,REPAIRITEM_INFO &,REPAIRITEM_INFO *,int> {
}

class std::reverse_bidirectional_iterator<std::list<REPAIRITEM_INFO,std::allocator<REPAIRITEM_INFO> >::const_iterator,REPAIRITEM_INFO,REPAIRITEM_INFO const &,REPAIRITEM_INFO const *,int> {
}

class std::binder2nd<std::not_equal_to<REPAIRITEM_INFO> > {
  /* this+0x0 */ struct std::not_equal_to<REPAIRITEM_INFO> op;
  /* this+0x1 */ struct REPAIRITEM_INFO value;
}

struct std::not_equal_to<REPAIRITEM_INFO> {
}

struct std::greater<REPAIRITEM_INFO> {
}

class std::allocator<accountInfo> {
}

class std::reverse_iterator<accountInfo const *,accountInfo,accountInfo const &,accountInfo const *,int> {
}

class std::reverse_iterator<accountInfo *,accountInfo,accountInfo &,accountInfo *,int> {
}

struct std::iterator<std::random_access_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> {
}

struct BINKRECT {
  /* this+0x0 */ long Left;
  /* this+0x4 */ long Top;
  /* this+0x8 */ long Width;
  /* this+0xc */ long Height;
}

struct BINKIO {
  /* this+0x0 */ function  * ReadHeader;
  /* this+0x4 */ function  * ReadFrame;
  /* this+0x8 */ function  * GetBufferSize;
  /* this+0xc */ function  * SetInfo;
  /* this+0x10 */ function  * Idle;
  /* this+0x14 */ function  * Close;
  /* this+0x18 */ struct BINK * bink;
  /* this+0x1c */ volatile unsigned long ReadError;
  /* this+0x20 */ volatile unsigned long DoingARead;
  /* this+0x24 */ volatile unsigned long BytesRead;
  /* this+0x28 */ volatile unsigned long Working;
  /* this+0x2c */ volatile unsigned long TotalTime;
  /* this+0x30 */ volatile unsigned long ForegroundTime;
  /* this+0x34 */ volatile unsigned long IdleTime;
  /* this+0x38 */ volatile unsigned long ThreadTime;
  /* this+0x3c */ volatile unsigned long BufSize;
  /* this+0x40 */ volatile unsigned long BufHighUsed;
  /* this+0x44 */ volatile unsigned long CurBufSize;
  /* this+0x48 */ volatile unsigned long CurBufUsed;
  /* this+0x4c */ volatile unsigned char[0xa0] iodata;
  /* this+0xec */ function  * suspend_callback;
  /* this+0xf0 */ function  * try_suspend_callback;
  /* this+0xf4 */ function  * resume_callback;
  /* this+0xf8 */ function  * idle_on_callback;
  /* this+0xfc */ volatile unsigned long[0x10] callback_control;
}

struct BINKSND {
  /* this+0x0 */ function  * Ready;
  /* this+0x4 */ function  * Lock;
  /* this+0x8 */ function  * Unlock;
  /* this+0xc */ function  * Volume;
  /* this+0x10 */ function  * Pan;
  /* this+0x14 */ function  * Pause;
  /* this+0x18 */ function  * SetOnOff;
  /* this+0x1c */ function  * Close;
  /* this+0x20 */ function  * MixBins;
  /* this+0x24 */ function  * MixBinVols;
  /* this+0x28 */ unsigned long sndbufsize;
  /* this+0x2c */ unsigned char * sndbuf;
  /* this+0x30 */ unsigned char * sndend;
  /* this+0x34 */ unsigned char * sndwritepos;
  /* this+0x38 */ unsigned char * sndreadpos;
  /* this+0x3c */ unsigned long sndcomp;
  /* this+0x40 */ unsigned long sndamt;
  /* this+0x44 */ unsigned long sndconvert8;
  /* this+0x48 */ unsigned long sndendframe;
  /* this+0x4c */ unsigned long sndprime;
  /* this+0x50 */ unsigned long sndpad;
  /* this+0x54 */ unsigned long BestSizeIn16;
  /* this+0x58 */ unsigned long BestSizeMask;
  /* this+0x5c */ unsigned long SoundDroppedOut;
  /* this+0x60 */ long OnOff;
  /* this+0x64 */ unsigned long Latency;
  /* this+0x68 */ unsigned long VideoScale;
  /* this+0x6c */ unsigned long freq;
  /* this+0x70 */ long bits;
  /* this+0x74 */ long chans;
  /* this+0x78 */ unsigned char[0x100] snddata;
}

struct BUNDLEPOINTERS {
  /* this+0x0 */ void * typeptr;
  /* this+0x4 */ void * type16ptr;
  /* this+0x8 */ void * colorptr;
  /* this+0xc */ void * bits2ptr;
  /* this+0x10 */ void * motionXptr;
  /* this+0x14 */ void * motionYptr;
  /* this+0x18 */ void * dctptr;
  /* this+0x1c */ void * mdctptr;
  /* this+0x20 */ void * patptr;
}

struct PACKET_ZC_MONSTER_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short job;
  /* this+0x4 */ short level;
  /* this+0x6 */ short size;
  /* this+0x8 */ int hp;
  /* this+0xc */ short def;
  /* this+0xe */ short raceType;
  /* this+0x10 */ short mdefPower;
  /* this+0x12 */ short property;
  /* this+0x14 */ struct PACKET_ZC_MONSTER_INFO::__unnamed propertyTable;
}

struct PACKET_ZC_MONSTER_INFO::__unnamed {
  /* this+0x0 */ unsigned char water;
  /* this+0x1 */ unsigned char earth;
  /* this+0x2 */ unsigned char fire;
  /* this+0x3 */ unsigned char wind;
  /* this+0x4 */ unsigned char poison;
  /* this+0x5 */ unsigned char saint;
  /* this+0x6 */ unsigned char dark;
  /* this+0x7 */ unsigned char mental;
  /* this+0x8 */ unsigned char undead;
}

class std::allocator<Insult> {
}

class std::reverse_iterator<Insult const *,Insult,Insult const &,Insult const *,int> {
}

class std::reverse_iterator<Insult *,Insult,Insult &,Insult *,int> {
}

class std::allocator<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > {
}

class std::reverse_iterator<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const *,std::vector<std::basic_string<char,std::char_tra93395e0a {
}

class std::reverse_iterator<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > *,std::vector<std::basic_string<char,std::char_traits<ch73b4526a {
}

struct std::list<GUILD_POSITION_INFORMATION,std::allocator<GUILD_POSITION_INFORMATION> >::_Acc {
}

class std::reverse_bidirectional_iterator<std::list<GUILD_POSITION_INFORMATION,std::allocator<GUILD_POSITION_INFORMATION> >::iterator,GUILD_POSITION_INFORMATION,GUILD_POSITION_INFORMATION &,GUILD_POSITION_INFORMATION *,int> {
}

class std::reverse_bidirectional_iterator<std::list<GUILD_POSITION_INFORMATION,std::allocator<GUILD_POSITION_INFORMATION> >::const_iterator,GUILD_POSITION_INFORMATION,GUILD_POSITION_INFORMATION const &,GUILD_POSITION_INFORMATION const *,int> {
}

class std::binder2nd<std::not_equal_to<GUILD_POSITION_INFORMATION> > {
  /* this+0x0 */ struct std::not_equal_to<GUILD_POSITION_INFORMATION> op;
  /* this+0x4 */ struct GUILD_POSITION_INFORMATION value;
}

struct std::not_equal_to<GUILD_POSITION_INFORMATION> {
}

struct std::greater<GUILD_POSITION_INFORMATION> {
}

struct std::list<RELATED_GUILD_INFORMATION,std::allocator<RELATED_GUILD_INFORMATION> >::_Acc {
}

class std::allocator<RELATED_GUILD_INFORMATION> {
}

class std::reverse_bidirectional_iterator<std::list<RELATED_GUILD_INFORMATION,std::allocator<RELATED_GUILD_INFORMATION> >::iterator,RELATED_GUILD_INFORMATION,RELATED_GUILD_INFORMATION &,RELATED_GUILD_INFORMATION *,int> {
}

class std::reverse_bidirectional_iterator<std::list<RELATED_GUILD_INFORMATION,std::allocator<RELATED_GUILD_INFORMATION> >::const_iterator,RELATED_GUILD_INFORMATION,RELATED_GUILD_INFORMATION const &,RELATED_GUILD_INFORMATION const *,int> {
}

class std::binder2nd<std::not_equal_to<RELATED_GUILD_INFORMATION> > {
  /* this+0x0 */ struct std::not_equal_to<RELATED_GUILD_INFORMATION> op;
  /* this+0x4 */ struct RELATED_GUILD_INFORMATION value;
}

struct std::not_equal_to<RELATED_GUILD_INFORMATION> {
}

struct std::greater<RELATED_GUILD_INFORMATION> {
}

struct std::list<SGUILD_BANISH_INFO,std::allocator<SGUILD_BANISH_INFO> >::_Acc {
}

class std::allocator<SGUILD_BANISH_INFO> {
}

class std::reverse_bidirectional_iterator<std::list<SGUILD_BANISH_INFO,std::allocator<SGUILD_BANISH_INFO> >::iterator,SGUILD_BANISH_INFO,SGUILD_BANISH_INFO &,SGUILD_BANISH_INFO *,int> {
}

class std::reverse_bidirectional_iterator<std::list<SGUILD_BANISH_INFO,std::allocator<SGUILD_BANISH_INFO> >::const_iterator,SGUILD_BANISH_INFO,SGUILD_BANISH_INFO const &,SGUILD_BANISH_INFO const *,int> {
}

class std::binder2nd<std::not_equal_to<SGUILD_BANISH_INFO> > {
  /* this+0x0 */ struct std::not_equal_to<SGUILD_BANISH_INFO> op;
  /* this+0x4 */ struct SGUILD_BANISH_INFO value;
}

struct std::not_equal_to<SGUILD_BANISH_INFO> {
}

struct std::greater<SGUILD_BANISH_INFO> {
}

struct std::list<SGUILD_INFO,std::allocator<SGUILD_INFO> >::_Acc {
}

class std::allocator<SGUILD_INFO> {
}

class std::reverse_bidirectional_iterator<std::list<SGUILD_INFO,std::allocator<SGUILD_INFO> >::iterator,SGUILD_INFO,SGUILD_INFO &,SGUILD_INFO *,int> {
}

class std::reverse_bidirectional_iterator<std::list<SGUILD_INFO,std::allocator<SGUILD_INFO> >::const_iterator,SGUILD_INFO,SGUILD_INFO const &,SGUILD_INFO const *,int> {
}

class std::binder2nd<std::not_equal_to<SGUILD_INFO> > {
  /* this+0x0 */ struct std::not_equal_to<SGUILD_INFO> op;
  /* this+0x4 */ struct SGUILD_INFO value;
}

struct std::not_equal_to<SGUILD_INFO> {
}

struct std::greater<SGUILD_INFO> {
}

struct std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Kfn {
}

class std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::value_compare {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::al2164b6c7 {
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::al60dc1eb4 {
}

struct std::pair<std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<631bcbfa {
}

struct std::pair<std::_Tree<int,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::basic_string<823a1540 {
}

struct std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn {
}

class std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::value_compare {
  /* this+0x0 */ struct std::less<int> comp;
}

struct MEMBER_POSITION_INFORMATION {
  /* this+0x0 */ int AID;
  /* this+0x4 */ int GID;
  /* this+0x8 */ int positionID;
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_P35a429d6 {
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_Pd3f2e78d {
}

struct std::pair<std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::it8051505a {
}

struct std::pair<std::_Tree<int,std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::map<int,MEMBER_POSITION_INFORMATION,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<MEMBER_POSITION_INFORMATION> >::cob7f31ea2 {
}

struct std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn {
}

class std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::value_compare {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSIT0c04e3fc {
}

class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSIT58e9ca25 {
}

struct std::pair<std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::iteratfe602761 {
}

struct std::pair<std::_Tree<int,std::pair<int const ,GUILD_POSITION_INFORMATION>,std::map<int,GUILD_POSITION_INFORMATION,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::_Kfn,std::less<int>,std::allocator<GUILD_POSITION_INFORMATION> >::const_2a2c2e07 {
}

struct std::unary_function<GUILD_POSITION_INFORMATION,bool> {
}

struct std::binary_function<GUILD_POSITION_INFORMATION,GUILD_POSITION_INFORMATION,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,GUILD_POSITION_INFORMATION,int> {
}

struct std::_Bidit<RELATED_GUILD_INFORMATION,int> {
}

struct std::unary_function<RELATED_GUILD_INFORMATION,bool> {
}

struct std::binary_function<RELATED_GUILD_INFORMATION,RELATED_GUILD_INFORMATION,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,RELATED_GUILD_INFORMATION,int> {
}

struct std::unary_function<std::pair<int const ,GUILD_POSITION_INFORMATION>,int> {
}

struct std::binary_function<std::pair<int const ,GUILD_POSITION_INFORMATION>,std::pair<int const ,GUILD_POSITION_INFORMATION>,bool> {
}

struct std::_Bidit<std::pair<int const ,GUILD_POSITION_INFORMATION>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<int const ,GUILD_POSITION_INFORMATION>,int> {
}

struct std::unary_function<std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,int> {
}

struct std::binary_function<std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,bool> {
}

struct std::_Bidit<std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,int> {
}

struct std::_Bidit<SGUILD_BANISH_INFO,int> {
}

struct std::unary_function<SGUILD_BANISH_INFO,bool> {
}

struct std::binary_function<SGUILD_BANISH_INFO,SGUILD_BANISH_INFO,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,SGUILD_BANISH_INFO,int> {
}

struct std::unary_function<std::pair<int const ,MEMBER_POSITION_INFORMATION>,int> {
}

struct std::binary_function<std::pair<int const ,MEMBER_POSITION_INFORMATION>,std::pair<int const ,MEMBER_POSITION_INFORMATION>,bool> {
}

struct std::_Bidit<std::pair<int const ,MEMBER_POSITION_INFORMATION>,int> {
}

struct std::unary_function<GUILD_MEMBER_INFORMATION,bool> {
}

struct std::binary_function<GUILD_MEMBER_INFORMATION,GUILD_MEMBER_INFORMATION,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,GUILD_MEMBER_INFORMATION,int> {
}

struct std::_Bidit<SGUILD_INFO,int> {
}

struct std::unary_function<SGUILD_INFO,bool> {
}

struct std::binary_function<SGUILD_INFO,SGUILD_INFO,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,SGUILD_INFO,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<int const ,MEMBER_POSITION_INFORMATION>,int> {
}

struct std::_Bidit<REPAIRITEM_INFO,int> {
}

struct std::unary_function<REPAIRITEM_INFO,bool> {
}

struct std::binary_function<REPAIRITEM_INFO,REPAIRITEM_INFO,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,REPAIRITEM_INFO,int> {
}

struct std::_Bidit<C3dNode *,int> {
}

struct std::_Ranit<CTexture *,int> {
}

struct std::unary_function<C3dNode *,bool> {
}

struct std::binary_function<C3dNode *,C3dNode *,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,C3dNode *,int> {
}

struct std::iterator<std::random_access_iterator_tag,CTexture *,int> {
}

struct _DICTHEADER {
  /* this+0x0 */ char[0x100] szDesc;
  /* this+0x100 */ char chEOF;
  /* this+0x101 */ struct _DICTVERSION version;
  /* this+0x104 */ unsigned int cWord;
  /* this+0x108 */ unsigned int cNode;
  /* this+0x10c */ long code;
  /* this+0x110 */ long nSize;
  /* this+0x114 */ unsigned char fValid;
}

struct _DICTVERSION {
  /* this+0x0 */ unsigned char fv;
  /* this+0x1 */ unsigned char dv;
}

struct std::list<std::pair<CMemFile *,CGPak *>,std::allocator<std::pair<CMemFile *,CGPak *> > >::_Acc {
}

class std::allocator<std::pair<CMemFile *,CGPak *> > {
}

class std::list<std::pair<CMemFile *,CGPak *>,std::allocator<std::pair<CMemFile *,CGPak *> > >::iterator {
  /* this+0x0 */ struct std::list<std::pair<CMemFile *,CGPak *>,std::allocator<std::pair<CMemFile *,CGPak *> > >::_Node * _Ptr;
}

class std::list<std::pair<CMemFile *,CGPak *>,std::allocator<std::pair<CMemFile *,CGPak *> > >::const_iterator {
  /* this+0x0 */ struct std::list<std::pair<CMemFile *,CGPak *>,std::allocator<std::pair<CMemFile *,CGPak *> > >::_Node * _Ptr;
}

class std::reverse_bidirectional_iterator<std::list<std::pair<CMemFile *,CGPak *>,std::allocator<std::pair<CMemFile *,CGPak *> > >::iterator,std::pair<CMemFile *,CGPak *>,std::pair<CMemFile *,CGPak *> &,std::pair<CMemFile *,CGPak *> *,int> {
}

class std::reverse_bidirectional_iterator<std::list<std::pair<CMemFile *,CGPak *>,std::allocator<std::pair<CMemFile *,CGPak *> > >::const_iterator,std::pair<CMemFile *,CGPak *>,std::pair<CMemFile *,CGPak *> const &,std::pair<CMemFile *,CGPak *> const *,int> {
}

class std::binder2nd<std::not_equal_to<std::pair<CMemFile *,CGPak *> > > {
  /* this+0x0 */ struct std::not_equal_to<std::pair<CMemFile *,CGPak *> > op;
  /* this+0x4 */ struct std::pair<CMemFile *,CGPak *> value;
}

struct std::not_equal_to<std::pair<CMemFile *,CGPak *> > {
}

struct std::greater<std::pair<CMemFile *,CGPak *> > {
}

struct std::_Bidit<std::pair<CMemFile *,CGPak *>,int> {
}

struct std::unary_function<std::pair<CMemFile *,CGPak *>,bool> {
}

struct std::binary_function<std::pair<CMemFile *,CGPak *>,std::pair<CMemFile *,CGPak *>,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<CMemFile *,CGPak *>,int> {
}

struct std::list<CActorPickInfo *,std::allocator<CActorPickInfo *> >::_Node {
  /* this+0x0 */ struct std::list<CActorPickInfo *,std::allocator<CActorPickInfo *> >::_Node * _Next;
  /* this+0x4 */ struct std::list<CActorPickInfo *,std::allocator<CActorPickInfo *> >::_Node * _Prev;
  /* this+0x8 */ class CActorPickInfo * _Value;
}

struct std::list<CActorPickInfo *,std::allocator<CActorPickInfo *> >::_Acc {
}

class std::allocator<CActorPickInfo *> {
}

class std::list<CActorPickInfo *,std::allocator<CActorPickInfo *> >::iterator {
  /* this+0x0 */ struct std::list<CActorPickInfo *,std::allocator<CActorPickInfo *> >::_Node * _Ptr;
}

class std::list<CActorPickInfo *,std::allocator<CActorPickInfo *> >::const_iterator {
  /* this+0x0 */ struct std::list<CActorPickInfo *,std::allocator<CActorPickInfo *> >::_Node * _Ptr;
}

class std::reverse_bidirectional_iterator<std::list<CActorPickInfo *,std::allocator<CActorPickInfo *> >::iterator,CActorPickInfo *,CActorPickInfo * &,CActorPickInfo * *,int> {
}

class std::reverse_bidirectional_iterator<std::list<CActorPickInfo *,std::allocator<CActorPickInfo *> >::const_iterator,CActorPickInfo *,CActorPickInfo * const &,CActorPickInfo * const *,int> {
}

class std::binder2nd<std::not_equal_to<CActorPickInfo *> > {
  /* this+0x0 */ struct std::not_equal_to<CActorPickInfo *> op;
  /* this+0x4 */ class CActorPickInfo * value;
}

struct std::not_equal_to<CActorPickInfo *> {
}

struct std::greater<CActorPickInfo *> {
}

struct std::_Bidit<CActorPickInfo *,int> {
}

struct std::unary_function<CActorPickInfo *,bool> {
}

struct std::binary_function<CActorPickInfo *,CActorPickInfo *,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,CActorPickInfo *,int> {
}

class std::allocator<PakPack> {
}

class std::reverse_iterator<PakPack const *,PakPack,PakPack const &,PakPack const *,int> {
}

class std::reverse_iterator<PakPack *,PakPack,PakPack &,PakPack *,int> {
}

struct _GG_AUTH_DATA {
  /* this+0x0 */ unsigned long dwIndex;
  /* this+0x4 */ unsigned long dwValue1;
  /* this+0x8 */ unsigned long dwValue2;
  /* this+0xc */ unsigned long dwValue3;
}

struct std::unary_function<std::pair<char const * const,int>,char const *> {
}

struct std::binary_function<std::pair<char const * const,int>,std::pair<char const * const,int>,bool> {
}

struct std::_Bidit<std::pair<char const * const,int>,int> {
}

struct std::_Bidit<std::pair<CHash * const,CRes *>,int> {
}

struct std::unary_function<std::pair<CHash * const,CRes *>,CHash *> {
}

struct std::binary_function<std::pair<CHash * const,CRes *>,std::pair<CHash * const,CRes *>,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<CHash * const,CRes *>,int> {
}

struct std::iterator<std::bidirectional_iterator_tag,std::pair<char const * const,int>,int> {
}

struct GCheader {
  /* this+0x0 */ union GCObject * next;
  /* this+0x4 */ unsigned char tt;
  /* this+0x5 */ unsigned char marked;
}

struct CClosure {
  /* this+0x0 */ union GCObject * next;
  /* this+0x4 */ unsigned char tt;
  /* this+0x5 */ unsigned char marked;
  /* this+0x6 */ unsigned char isC;
  /* this+0x7 */ unsigned char nupvalues;
  /* this+0x8 */ union GCObject * gclist;
  /* this+0xc */ function  * f;
  /* this+0x10 */ struct lua_TObject[0x1] upvalue;
}

union L_Umaxalign {
  /* this+0x0 */ double u;
  /* this+0x0 */ void * s;
  /* this+0x0 */ long l;
}

struct LocVar {
  /* this+0x0 */ union TString * varname;
  /* this+0x4 */ int startpc;
  /* this+0x8 */ int endpc;
}

struct _ATL_MODULE {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ struct HINSTANCE__ * m_hInst;
  /* this+0x8 */ struct HINSTANCE__ * m_hInstResource;
  /* this+0xc */ struct HINSTANCE__ * m_hInstTypeLib;
  /* this+0x10 */ struct _ATL_OBJMAP_ENTRY * m_pObjMap;
  /* this+0x14 */ long m_nLockCnt;
  /* this+0x18 */ void * m_hHeap;
  /* this+0x1c */ struct _RTL_CRITICAL_SECTION m_csTypeInfoHolder;
  /* this+0x1c */ struct _RTL_CRITICAL_SECTION m_csStaticDataInit;
  /* this+0x34 */ struct _RTL_CRITICAL_SECTION m_csWindowCreate;
  /* this+0x4c */ struct _RTL_CRITICAL_SECTION m_csObjMap;
  /* this+0x64 */ unsigned long dwAtlBuildVer;
  /* this+0x68 */ struct _AtlCreateWndData * m_pCreateWndList;
  /* this+0x6c */ unsigned char m_bDestroyHeap;
  /* this+0x70 */ struct _GUID * pguidVer;
  /* this+0x74 */ unsigned long m_dwHeaps;
  /* this+0x78 */ void * * m_phHeaps;
  /* this+0x7c */ int m_nHeap;
  /* this+0x80 */ struct _ATL_TERMFUNC_ELEM * m_pTermFuncs;
}

struct _AtlCreateWndData {
  /* this+0x0 */ void * m_pThis;
  /* this+0x4 */ unsigned long m_dwThreadID;
  /* this+0x8 */ struct _AtlCreateWndData * m_pNext;
}

struct _ATL_OBJMAP_ENTRY {
  /* this+0x0 */ const struct _GUID * pclsid;
  /* this+0x4 */ function  * pfnUpdateRegistry;
  /* this+0x8 */ function  * pfnGetClassObject;
  /* this+0xc */ function  * pfnCreateInstance;
  /* this+0x10 */ struct IUnknown * pCF;
  /* this+0x14 */ unsigned long dwRegister;
  /* this+0x18 */ function  * pfnGetObjectDescription;
  /* this+0x1c */ function  * pfnGetCategoryMap;
  /* this+0x20 */ function  * pfnObjectMain;
}

struct _ATL_REGMAP_ENTRY {
  /* this+0x0 */ const unsigned short * szKey;
  /* this+0x4 */ const unsigned short * szData;
}

struct _ATL_TERMFUNC_ELEM {
  /* this+0x0 */ function  * pFunc;
  /* this+0x4 */ unsigned long dw;
  /* this+0x8 */ struct _ATL_TERMFUNC_ELEM * pNext;
}

struct IPersistStream {
}

class ATL::_NoAddRefReleaseOnCComPtr<IPersistStream> {
}

struct IProvideClassInfo {
}

struct std::_Bidit<CRagEffect *,int> {
}

struct std::unary_function<CRagEffect *,bool> {
}

struct std::binary_function<CRagEffect *,CRagEffect *,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,CRagEffect *,int> {
}

struct std::_Bidit<RoomMemberData,int> {
}

struct std::unary_function<RoomMemberData,bool> {
}

struct std::binary_function<RoomMemberData,RoomMemberData,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,RoomMemberData,int> {
}

class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<int,std::allocator<int> > > > {
}

class std::reverse_iterator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<int,std::allocator<int> > > const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<int,std9047e131 {
}

class std::reverse_iterator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<int,std::allocator<int> > > *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<int,std::allo69a9a601 {
}

struct _Collvec {
  /* this+0x0 */ unsigned long _Hand;
  /* this+0x4 */ unsigned int _Page;
}

struct _Cvtvec {
  /* this+0x0 */ unsigned long _Hand;
  /* this+0x4 */ unsigned int _Page;
}

class std::_Timevec {
  /* this+0x0 */ void * _Ptr;
}

struct lconv {
  /* this+0x0 */ char * decimal_point;
  /* this+0x4 */ char * thousands_sep;
  /* this+0x8 */ char * grouping;
  /* this+0xc */ char * int_curr_symbol;
  /* this+0x10 */ char * currency_symbol;
  /* this+0x14 */ char * mon_decimal_point;
  /* this+0x18 */ char * mon_thousands_sep;
  /* this+0x1c */ char * mon_grouping;
  /* this+0x20 */ char * positive_sign;
  /* this+0x24 */ char * negative_sign;
  /* this+0x28 */ char int_frac_digits;
  /* this+0x29 */ char frac_digits;
  /* this+0x2a */ char p_cs_precedes;
  /* this+0x2b */ char p_sep_by_space;
  /* this+0x2c */ char n_cs_precedes;
  /* this+0x2d */ char n_sep_by_space;
  /* this+0x2e */ char p_sign_posn;
  /* this+0x2f */ char n_sign_posn;
}

class std::ostreambuf_iterator<char,std::char_traits<char> > {
}

class std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > {
}

class std::basic_ostream<char,std::char_traits<char> >::sentry {
  /* this+0x0 */ unsigned char _Ok;
  /* this+0x4 */ class std::basic_ostream<char,std::char_traits<char> > & _Ostr;
}

struct _LARGE_INTEGER::__unnamed {
  /* this+0x0 */ unsigned long LowPart;
  /* this+0x4 */ long HighPart;
}

struct _ULARGE_INTEGER::__unnamed {
  /* this+0x0 */ unsigned long LowPart;
  /* this+0x4 */ unsigned long HighPart;
}

struct tagPARAMDESC {
  /* this+0x0 */ struct tagPARAMDESCEX * pparamdescex;
  /* this+0x4 */ unsigned short wParamFlags;
}

struct _RTL_CRITICAL_SECTION_DEBUG {
  /* this+0x0 */ unsigned short Type;
  /* this+0x2 */ unsigned short CreatorBackTraceIndex;
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION * CriticalSection;
  /* this+0x8 */ struct _LIST_ENTRY ProcessLocksList;
  /* this+0x10 */ unsigned long EntryCount;
  /* this+0x14 */ unsigned long ContentionCount;
  /* this+0x18 */ unsigned long[0x2] Spare;
}

struct _D3DDP_PTRSTRIDE {
  /* this+0x0 */ void * lpvData;
  /* this+0x4 */ unsigned long dwStride;
}

struct tagARRAYDESC {
  /* this+0x0 */ struct tagTYPEDESC tdescElem;
  /* this+0x8 */ unsigned short cDims;
  /* this+0xc */ struct tagSAFEARRAYBOUND[0x1] rgbounds;
}

struct tagPARAMDESCEX {
  /* this+0x0 */ unsigned long cBytes;
  /* this+0x8 */ struct tagVARIANT varDefaultValue;
}

struct waveformat_tag {
  /* this+0x0 */ unsigned short wFormatTag;
  /* this+0x2 */ unsigned short nChannels;
  /* this+0x4 */ unsigned long nSamplesPerSec;
  /* this+0x8 */ unsigned long nAvgBytesPerSec;
  /* this+0xc */ unsigned short nBlockAlign;
}

struct std::forward_iterator_tag {
}

struct std::input_iterator_tag {
}

struct std::binary_function<CHash *,CHash *,bool> {
}

struct _ATL_CATMAP_ENTRY {
  /* this+0x0 */ int iType;
  /* this+0x4 */ const struct _GUID * pcatid;
}

struct _LIST_ENTRY {
  /* this+0x0 */ struct _LIST_ENTRY * Flink;
  /* this+0x4 */ struct _LIST_ENTRY * Blink;
}

struct HP_TRAVEL_AVAILABLE {
  /* this+0x0 */ short X;
  /* this+0x2 */ short Y;
  /* this+0x4 */ char Map;
}

struct PACKET_ZC_BATTLEFIELD_NOTIFY_POINT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short pointCampA;
  /* this+0x4 */ short pointCampB;
}

class std::vector<HP_Damage_Moment,std::allocator<HP_Damage_Moment> > {
  /* this+0x0 */ class std::allocator<HP_Damage_Moment> allocator;
  /* this+0x4 */ struct HP_Damage_Moment * _First;
  /* this+0x8 */ struct HP_Damage_Moment * _Last;
  /* this+0xc */ struct HP_Damage_Moment * _End;
}

class std::allocator<HP_Damage_Moment> {
}

class std::reverse_iterator<HP_Damage_Moment const *,HP_Damage_Moment,HP_Damage_Moment const &,HP_Damage_Moment const *,int> {
}

class std::reverse_iterator<HP_Damage_Moment *,HP_Damage_Moment,HP_Damage_Moment &,HP_Damage_Moment *,int> {
}

struct std::list<HP_Damage_Moment,std::allocator<HP_Damage_Moment> >::_Node {
  /* this+0x0 */ struct std::list<HP_Damage_Moment,std::allocator<HP_Damage_Moment> >::_Node * _Next;
  /* this+0x4 */ struct std::list<HP_Damage_Moment,std::allocator<HP_Damage_Moment> >::_Node * _Prev;
  /* this+0x8 */ struct HP_Damage_Moment _Value;
}

struct std::list<HP_Damage_Moment,std::allocator<HP_Damage_Moment> >::_Acc {
}

class std::list<HP_Damage_Moment,std::allocator<HP_Damage_Moment> > {
  /* this+0x0 */ class std::allocator<HP_Damage_Moment> allocator;
  /* this+0x4 */ struct std::list<HP_Damage_Moment,std::allocator<HP_Damage_Moment> >::_Node * _Head;
  /* this+0x8 */ unsigned int _Size;
}

class std::list<HP_Damage_Moment,std::allocator<HP_Damage_Moment> >::iterator {
  /* this+0x0 */ struct std::list<HP_Damage_Moment,std::allocator<HP_Damage_Moment> >::_Node * _Ptr;
}

class std::list<HP_Damage_Moment,std::allocator<HP_Damage_Moment> >::const_iterator {
  /* this+0x0 */ struct std::list<HP_Damage_Moment,std::allocator<HP_Damage_Moment> >::_Node * _Ptr;
}

class std::reverse_bidirectional_iterator<std::list<HP_Damage_Moment,std::allocator<HP_Damage_Moment> >::iterator,HP_Damage_Moment,HP_Damage_Moment &,HP_Damage_Moment *,int> {
}

class std::reverse_bidirectional_iterator<std::list<HP_Damage_Moment,std::allocator<HP_Damage_Moment> >::const_iterator,HP_Damage_Moment,HP_Damage_Moment const &,HP_Damage_Moment const *,int> {
}

class std::binder2nd<std::not_equal_to<HP_Damage_Moment> > {
  /* this+0x0 */ struct std::not_equal_to<HP_Damage_Moment> op;
  /* this+0x4 */ struct HP_Damage_Moment value;
}

struct std::not_equal_to<HP_Damage_Moment> {
}

struct std::greater<HP_Damage_Moment> {
}

struct std::_Bidit<HP_Damage_Moment,int> {
}

struct std::unary_function<HP_Damage_Moment,bool> {
}

struct std::binary_function<HP_Damage_Moment,HP_Damage_Moment,bool> {
}

struct std::iterator<std::bidirectional_iterator_tag,HP_Damage_Moment,int> {
}


